#include "AccountPay.h"
#include "common/CryptTask.hpp"
#include "RecordCache.h"

IMPL_LOGGER(AccountPay, logger);

AccountPay::AccountPay(const std::string  &cmd_type):
        HTTPRequest(cmd_type) {
    LOG4CPLUS_DEBUG(logger, __FUNCTION__ << "(" << this << ")");
    std::map<std::string, std::pair<std::string, bool> > ext_params = {
            { "cdata", std::make_pair(PARAM_TYPE_STRING, true) },
            { "cno", std::make_pair(PARAM_TYPE_STRING, true) }, //业务帐号
            { "scarno", std::make_pair(PARAM_TYPE_STRING, true) }, //付款人账号
            { "sbank", std::make_pair(PARAM_TYPE_STRING, true) }, //付款人银行
            { "sname", std::make_pair(PARAM_TYPE_STRING, true) }, //姓名
            { "dcarno", std::make_pair(PARAM_TYPE_STRING, true) }, //收款人账号
            { "dbank", std::make_pair(PARAM_TYPE_STRING, true) }, //收款人银行
            { "dname", std::make_pair(PARAM_TYPE_STRING, true) }, //姓名
            { "amount", std::make_pair(PARAM_TYPE_DOUBLE, true) }, //金额
            { "remain", std::make_pair(PARAM_TYPE_DOUBLE, true) }, //余额
            { "hip", std::make_pair(PARAM_TYPE_STRING, true) }, //客户端ip
            { "hvia", std::make_pair(PARAM_TYPE_STRING, true) }, //Http 头中的HTTP_VIA 参数
            { "hfwd", std::make_pair(PARAM_TYPE_STRING, true) }, //Http头中的HTTP_X_FORWARDED_FOR 参数
            { "gps_city", std::make_pair(PARAM_TYPE_STRING, false) }, //gprs 定位城市
            { "aid", std::make_pair(PARAM_TYPE_STRING, true) }, //应用 id
            { "cm_time", std::make_pair(PARAM_TYPE_STRING, true) }, //提交时间
            { "currency", std::make_pair(PARAM_TYPE_INT, true) }, //币种
            { "abstract", std::make_pair(PARAM_TYPE_STRING, false) }, //摘要
            { "msg", std::make_pair(PARAM_TYPE_STRING, false) }, //扩展字段
    };

    m_params.insert(ext_params.begin(), ext_params.end());

    tb_name = g_config_reader->get_string("account_service.db.tablename.account.pay", "tb_account_pay");
}

AccountPay::~AccountPay()
{
    LOG4CPLUS_DEBUG(logger, __FUNCTION__ << "(" << "destruction function" << ")");
}

int AccountPay::handle(json::Value& jsPara) {
    LOG4CPLUS_DEBUG(logger, __FUNCTION__ << "(" << this << ")");
    if(HTTPRequest::handle(jsPara) == 0)
    {   
        if(jsPara.HasKey("cdata")){
            std::string  cDataCrypt = jsPara.ToObject()["cdata"].ToString();
            std::string  cDataDecrypt;
    
            if(!CryptTask::Crypt(cDataCrypt, cDataDecrypt))
            {
                LOG4CPLUS_WARN(logger, "data decrypt error:" << cDataCrypt);
                return -1;
            }
            else
            {
                std::string cno = "";
                std::string pno = "";
                if(jsPara.HasKey("cno")){
                    cno = jsPara.ToObject()["cno"].ToString();
                }
                if(jsPara.HasKey("pno")){
                    pno = jsPara.ToObject()["pno"].ToString();
                }

                std::string devf = RecordCache::GetInstance()->getDeviceFingerprint(cDataDecrypt, cno, pno);
                if(devf.length() > 1)
                {
                    urlParam["cdata"] = cDataDecrypt;
                    return doAssembleSql();
                }
            }
        }
        else
        {
            return doAssembleSql();
        }
    }   
    return -1;
}

void AccountPay::doAssembleParam()
{
    LOG4CPLUS_DEBUG(logger, __FUNCTION__ << "(" << this << ")");
    HTTPRequest::doAssembleParam();
}

