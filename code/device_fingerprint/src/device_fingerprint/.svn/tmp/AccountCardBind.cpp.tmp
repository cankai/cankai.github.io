#include "AccountCardBind.h"

IMPL_LOGGER(AccountCardBind, logger);

AccountCardBind::AccountCardBind(const std::string  &cmd_type,
        FCGX_Request* request) :
        HTTPRequest(cmd_type, request) {
    LOG4CPLUS_DEBUG(logger, __FUNCTION__ << "(" << this << ")");
    std::map<std::string, std::pair<std::string, bool> > ext_params = {
            { "fname",std::make_pair(PARAM_TYPE_STRING, true) }, //本人姓名
            { "cno", std::make_pair(PARAM_TYPE_STRING, true) }, //业务帐号
            { "authn", std::make_pair(PARAM_TYPE_STRING, true) }, //证件号码(md5后)
            { "autht", std::make_pair(PARAM_TYPE_STRING, true) }, //证件类型
            { "pno", std::make_pair(PARAM_TYPE_STRING, true) }, //预留手机号码(md5后的)
            { "carno", std::make_pair(PARAM_TYPE_STRING, true) }, //银行卡卡号(md5后的)
            { "cararr", std::make_pair(PARAM_TYPE_STRING, true) }, //已绑定的卡(md5后的)
            { "aid", std::make_pair(PARAM_TYPE_STRING, true) }, //应用标识
            { "btimes",std::make_pair(PARAM_TYPE_STRING, false) }, //绑卡次数
            { "hip", std::make_pair(PARAM_TYPE_STRING, false) }, //客户端ip
            { "hvia", std::make_pair(PARAM_TYPE_STRING, false) }, //Http 头中的HTTP_VIA 参数
            { "hfwd", std::make_pair(PARAM_TYPE_STRING, false) }, //Http头中的HTTP_X_FORWARDED_FOR 参数
            { "gps_city", std::make_pair(PARAM_TYPE_STRING, false) }, //gprs 定位城市
            { "devf", std::make_pair(PARAM_TYPE_STRING, false) }, //设备指纹
            { "face_valid", std::make_pair(PARAM_TYPE_STRING, false) }, //人脸识别
            //{ "cver", std::make_pair(PARAM_TYPE_STRING, true) }, //客户端版本号，口袋直接使用nativeversion的值
            //{ "from", std::make_pair(PARAM_TYPE_STRING, true) }, //注册来源，1，undef未定义，2业务标识
            //{ "channel", std::make_pair(PARAM_TYPE_STRING, true) }, //渠道
            //{ "appv", std::make_pair(PARAM_TYPE_STRING, true) }, //应用版本号
    };

    m_params.insert(ext_params.begin(), ext_params.end());

    tb_name = g_config_reader->get_string("account_service.db.tablename.account.cardbind", "tb_account_card_bind");
}

AccountCardBind::~AccountCardBind()
{
    LOG4CPLUS_DEBUG(logger, __FUNCTION__ << "(" << "destruction function" << ")");
}

int AccountCardBind::handle(json::Value& jsPara) {
    LOG4CPLUS_DEBUG(logger, __FUNCTION__ << "(" << this << ")");
    if(HTTPRequest::handle(jsPara) == 0)
    {
        res = ACCOUNT_ACCEPT;
        return doAssembleSql();
    }
    return -1;
}

void AccountCardBind::doAssembleParam()
{
    LOG4CPLUS_DEBUG(logger, __FUNCTION__ << "(" << this << ")");
    HTTPRequest::doAssembleParam();
    jsReturn["res"] = res;
}

