!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACCOUNT_ACCEPT	src/device_fingerprint/Defines.h	/^#define ACCOUNT_ACCEPT /;"	d
ACCOUNT_REFUSE	src/device_fingerprint/Defines.h	/^#define ACCOUNT_REFUSE /;"	d
ACCOUNT_REVIEW	src/device_fingerprint/Defines.h	/^#define ACCOUNT_REVIEW /;"	d
AIO_RD_IX	src/fastcgi/os_unix.cpp	/^#define AIO_RD_IX(/;"	d	file:
AIO_WR_IX	src/fastcgi/os_unix.cpp	/^#define AIO_WR_IX(/;"	d	file:
APPSERVER_H	src/device_fingerprint/AppServer.h	/^#define APPSERVER_H$/;"	d
ASSERT	src/fastcgi/fcgimisc.h	/^#define ASSERT(/;"	d
AUTO_SQL_EXECUTER__H	src/common/AutoSqlExecuter.h	/^#define AUTO_SQL_EXECUTER__H$/;"	d
AcquireLock	src/fastcgi/os_unix.cpp	/^static int AcquireLock(int sock, int fail_on_intr)$/;"	f	file:
AddExecuteSql	src/device_fingerprint/RecordCache.cpp	/^int RecordCache::AddExecuteSql(const std::string& sql, int times)$/;"	f	class:RecordCache
AddToCache	src/device_fingerprint/RecordCache.cpp	/^int RecordCache::AddToCache(std::vector<std::string>& keys, std::string& key, std::string& rawData, std::string cno, std::string pno)$/;"	f	class:RecordCache
AioInfo	src/fastcgi/os_unix.cpp	/^} AioInfo;$/;"	t	typeref:struct:__anon15	file:
AlignInt8	src/fastcgi/fcgiapp.cpp	/^static int AlignInt8(unsigned n) {$/;"	f	file:
AlignPtr8	src/fastcgi/fcgiapp.cpp	/^static unsigned char *AlignPtr8(unsigned char *p) {$/;"	f	file:
AppServer	src/device_fingerprint/AppServer.cpp	/^AppServer::AppServer()$/;"	f	class:AppServer
AppServer	src/device_fingerprint/AppServer.h	/^class AppServer$/;"	c
Array	src/common/Json.cpp	/^Array::Array()$/;"	f	class:Array
Array	src/common/Json.cpp	/^Array::Array(const Array& a) : mValues(a.mValues)$/;"	f	class:Array
Array	src/common/Json.hpp	/^    class Array$/;"	c	namespace:json
Array	src/t/Json.cpp	/^Array::Array()$/;"	f	class:Array
Array	src/t/Json.cpp	/^Array::Array(const Array& a) : mValues(a.mValues)$/;"	f	class:Array
Array	src/t/Json.hpp	/^    class Array$/;"	c	namespace:json
ArrayVal	src/common/Json.hpp	/^        ArrayVal,$/;"	e	enum:json::ValueType
ArrayVal	src/t/Json.hpp	/^        ArrayVal,$/;"	e	enum:json::ValueType
AutoLock	src/common/MutexLock.h	/^	AutoLock(Lock& lock) : m_lock(&(lock.m_lock))$/;"	f	class:AutoLock
AutoLock	src/common/MutexLock.h	/^	AutoLock(pthread_mutex_t& lock) : m_lock(&lock)$/;"	f	class:AutoLock
AutoLock	src/common/MutexLock.h	/^	AutoLock(pthread_mutex_t* lock) : m_lock(lock)$/;"	f	class:AutoLock
AutoLock	src/common/MutexLock.h	/^class AutoLock$/;"	c
AutoLock	src/common/SDMutexLock.h	/^	AutoLock(const pthread_mutex_t& lock)$/;"	f	class:AutoLock
AutoLock	src/common/SDMutexLock.h	/^	AutoLock(const pthread_mutex_t* lock)$/;"	f	class:AutoLock
AutoLock	src/common/SDMutexLock.h	/^class AutoLock$/;"	c
AutoRDLock	src/common/SDMutexLock.h	/^	AutoRDLock(const pthread_rwlock_t& lock)$/;"	f	class:AutoRDLock
AutoRDLock	src/common/SDMutexLock.h	/^	AutoRDLock(const pthread_rwlock_t* lock)$/;"	f	class:AutoRDLock
AutoRDLock	src/common/SDMutexLock.h	/^class AutoRDLock$/;"	c
AutoSqlExecuter	src/common/AutoSqlExecuter.h	/^    AutoSqlExecuter(PGDBConnectionPool * pool, const string & sql, bool read=true)$/;"	f	class:AutoSqlExecuter
AutoSqlExecuter	src/common/AutoSqlExecuter.h	/^class AutoSqlExecuter{$/;"	c
AutoWRLock	src/common/SDMutexLock.h	/^	AutoWRLock(const pthread_rwlock_t& lock)$/;"	f	class:AutoWRLock
AutoWRLock	src/common/SDMutexLock.h	/^	AutoWRLock(const pthread_rwlock_t* lock)$/;"	f	class:AutoWRLock
AutoWRLock	src/common/SDMutexLock.h	/^class AutoWRLock$/;"	c
B0	src/base64.h	/^#define B0(/;"	d
B0	src/common/base64.h	/^#define B0(/;"	d
B1	src/base64.h	/^#define B1(/;"	d
B1	src/common/base64.h	/^#define B1(/;"	d
B2	src/base64.h	/^#define B2(/;"	d
B2	src/common/base64.h	/^#define B2(/;"	d
B3	src/base64.h	/^#define B3(/;"	d
B3	src/common/base64.h	/^#define B3(/;"	d
BEGIN_RECORD	src/fastcgi/fcgiapp.cpp	/^#define BEGIN_RECORD /;"	d	file:
BYTE	src/common/CryptTask.hpp	/^typedef unsigned char BYTE;         $/;"	t
Base64Decode	src/base64.h	/^inline int Base64Decode(char * buf, const char * base64code, int src_len)  $/;"	f
Base64Decode	src/common/base64.cpp	/^bool Base64Decode(const std::string& input, char* output, size_t* len)$/;"	f
Base64Decode	src/common/base64.cpp	/^bool Base64Decode(const std::string& input, std::string* output)$/;"	f
Base64Decode	src/common/base64.cpp	/^int Base64Decode(char * buf, const char * base64code, int src_len)$/;"	f
Base64Encode	src/base64.h	/^inline int Base64Encode(char * base64code, const char * src, int src_len)  $/;"	f
Base64Encode	src/common/base64.cpp	/^bool Base64Encode(const std::string& input, char* output, size_t* len)$/;"	f
Base64Encode	src/common/base64.cpp	/^bool Base64Encode(const std::string& input, std::string* output)$/;"	f
Base64Encode	src/common/base64.cpp	/^inline int Base64Encode(char * base64code, const char * src, int src_len)  $/;"	f
BoolVal	src/common/Json.hpp	/^        BoolVal$/;"	e	enum:json::ValueType
BoolVal	src/t/Json.hpp	/^        BoolVal$/;"	e	enum:json::ValueType
CCommonException	src/common/cexception.h	/^	CCommonException(string sErrMsg) {m_str= sErrMsg;};$/;"	f	class:CCommonException
CCommonException	src/common/cexception.h	/^	CCommonException(string sErrMsg, string sUrl) {m_str=sErrMsg; m_url=sUrl;};$/;"	f	class:CCommonException
CCommonException	src/common/cexception.h	/^class CCommonException$/;"	c
CFLAGS	src/makefile	/^CFLAGS:=-std=c++0x -Wall -Wno-deprecated  -g $(INCLUDE) $(LOG) -D_DEBUG -D_FILE_OFFSET_BITS=64 -DTIXML_USE_STL -D__STDC_FORMAT_MACROS  -fno-builtin-malloc -fno-builtin-calloc -fno-builtin-realloc -fno-builtin-free $/;"	m
CGIDEVICEDEP	src/makefile	/^CGIDEVICEDEP:=$(patsubst %.cpp,%.d,$(CGIDEVICESRC))$/;"	m
CGIDEVICEDIR	src/makefile	/^CGIDEVICEDIR=.\/device_fingerprint\/$/;"	m
CGIDEVICEOBJ	src/makefile	/^CGIDEVICEOBJ:=$(patsubst %.cpp,%.o,$(CGIDEVICESRC))$/;"	m
CGIDEVICESRC	src/makefile	/^CGIDEVICESRC:=$(wildcard $(CGIDEVICEDIR)*.cpp)$/;"	m
CLUSTER_SLOTS	src/common/RedisClusterClient.cpp	/^    CLUSTER_SLOTS = 16384 \/\/ number of slots, defined in cluster.h$/;"	e	enum:__anon2	file:
CMysqlException	src/common/cexception.h	/^	CMysqlException(const char* sErrMsg):CCommonException(sErrMsg) {};$/;"	f	class:CMysqlException
CMysqlException	src/common/cexception.h	/^	CMysqlException(const char* sErrMsg, const char* sUrl):CCommonException(sErrMsg, sUrl) {};$/;"	f	class:CMysqlException
CMysqlException	src/common/cexception.h	/^class CMysqlException: public CCommonException$/;"	c
COMMONDEP	src/makefile	/^COMMONDEP:=$(patsubst %.cpp,%.d,$(COMMONSRC))$/;"	m
COMMONDIR	src/makefile	/^COMMONDIR=.\/common\/$/;"	m
COMMONOBJ	src/makefile	/^COMMONOBJ:=$(patsubst %.cpp,%.o,$(COMMONSRC))$/;"	m
COMMONSRC	src/makefile	/^COMMONSRC:=$(wildcard $(COMMONDIR)*.cpp)$/;"	m
CONFIGURATION_H	src/common/ConfigReader.h	/^#define CONFIGURATION_H$/;"	d
CONNECT_TIMEOUT_MILLISECONDS	src/common/RedisClusterClient.h	/^    CONNECT_TIMEOUT_MILLISECONDS = 1000, \/\/ Connect timeout milliseconds$/;"	e	enum:__anon4
COUNTER_H	src/common/Counter.h	/^#define  COUNTER_H$/;"	d
CPPFLAGS	src/makefile	/^CPPFLAGS:=$(CFLAGS)$/;"	m
CRYPTAES_HPP	src/common/CryptAES.hpp	/^#define CRYPTAES_HPP$/;"	d
CRYPTRSA_HPP	src/common/CryptRSA.hpp	/^#define CRYPTRSA_HPP$/;"	d
CRYPT_TASK_HPP	src/common/CryptTask.hpp	/^#define CRYPT_TASK_HPP$/;"	d
CRedisClient	src/common/RedisClusterClient.cpp	/^CRedisClient::CRedisClient(const std::string& nodes, const std::string& password, int connect_timeout_milliseconds, int data_timeout_milliseconds) throw (CRedisException)$/;"	f	class:CRedisClient
CRedisClient	src/common/RedisClusterClient.h	/^    CRedisClient(){}$/;"	f	class:CRedisClient
CRedisClient	src/common/RedisClusterClient.h	/^class CRedisClient$/;"	c
CRedisException	src/common/RedisClusterClient.cpp	/^CRedisException::CRedisException(int errcode, const std::string& errmsg, const char* file, int line, const std::string& node_ip, uint16_t node_port, const char* command, const char* key) throw ()$/;"	f	class:CRedisException
CRedisException	src/common/RedisClusterClient.h	/^class CRedisException: public std::exception$/;"	c
CRegexException	src/common/cexception.h	/^	CRegexException(const char* sErrMsg):CCommonException(sErrMsg) {};$/;"	f	class:CRegexException
CRegexException	src/common/cexception.h	/^	CRegexException(const char* sErrMsg, const char* sUrl):CCommonException(sErrMsg, sUrl) {};$/;"	f	class:CRegexException
CRegexException	src/common/cexception.h	/^class CRegexException: public CCommonException$/;"	c
Clear	src/common/Json.cpp	/^void Array::Clear()$/;"	f	class:Array
Clear	src/common/Json.cpp	/^void Object::Clear()$/;"	f	class:Object
Clear	src/common/Json.cpp	/^void Value::Clear()$/;"	f	class:Value
Clear	src/t/Json.cpp	/^void Array::Clear()$/;"	f	class:Array
Clear	src/t/Json.cpp	/^void Object::Clear()$/;"	f	class:Object
Clear	src/t/Json.cpp	/^void Value::Clear()$/;"	f	class:Value
ClientAddrOK	src/fastcgi/os_unix.cpp	/^static int ClientAddrOK(struct sockaddr_in *saPtr, const char *clientList)$/;"	f	file:
ClientData	src/fastcgi/fcgios.h	/^    typedef int *ClientData;$/;"	t
ClientData	src/fastcgi/fcgios.h	/^    typedef void *ClientData;$/;"	t
Code	src/common/AutoSqlExecuter.h	/^    int Code() const$/;"	f	class:AutoSqlExecuter
ConfigItem	src/common/ConfigReader.h	/^		ConfigItem(const std::string& s1, const std::string& s2)$/;"	f	class:ConfigReader::ConfigItem
ConfigItem	src/common/ConfigReader.h	/^	class ConfigItem$/;"	c	class:ConfigReader
ConfigReader	src/common/ConfigReader.cpp	/^ConfigReader::ConfigReader()$/;"	f	class:ConfigReader
ConfigReader	src/common/ConfigReader.cpp	/^ConfigReader::ConfigReader(const char* file_name)$/;"	f	class:ConfigReader
ConfigReader	src/common/ConfigReader.h	/^class ConfigReader$/;"	c
ConfigWriter	src/common/ConfigReader.cpp	/^ConfigWriter::ConfigWriter(const char* file_name) : ConfigReader(file_name)$/;"	f	class:ConfigWriter
ConfigWriter	src/common/ConfigReader.h	/^class ConfigWriter : public ConfigReader$/;"	c
CopyAndAdvance	src/fastcgi/fcgiapp.cpp	/^static void CopyAndAdvance(char **destPtr, char **srcPtr, int n)$/;"	f	file:
Counter	src/common/Counter.h	/^	Counter() : m_count(0), m_max_count(0) { }$/;"	f	class:Counter
Counter	src/common/Counter.h	/^class Counter$/;"	c
Crypt	src/common/CryptTask.cpp	/^bool CryptTask::Crypt(string &src, string &des)$/;"	f	class:CryptTask
CryptAES	src/common/CryptAES.cpp	/^CryptAES::CryptAES(){$/;"	f	class:CryptAES
CryptAES	src/common/CryptAES.hpp	/^class CryptAES{$/;"	c
CryptRSA	src/common/CryptRSA.cpp	/^CryptRSA::CryptRSA(string &prifile, int padding)$/;"	f	class:CryptRSA
CryptRSA	src/common/CryptRSA.hpp	/^class CryptRSA {$/;"	c
CryptTask	src/common/CryptTask.hpp	/^class CryptTask$/;"	c
DATA_TIMEOUT_MILLISECONDS	src/common/RedisClusterClient.h	/^    DATA_TIMEOUT_MILLISECONDS = 1000     \/\/ Read and write socket timeout milliseconds$/;"	e	enum:__anon4
DECL_LOGGER	src/common/Logger.h	/^#define DECL_LOGGER(/;"	d
DEV_BUSSINESS	src/device_fingerprint/Defines.h	/^#define DEV_BUSSINESS /;"	d
DEV_GET_EVENT_LIST	src/device_fingerprint/Defines.h	/^#define DEV_GET_EVENT_LIST /;"	d
DEV_GET_TIME_LIST	src/device_fingerprint/Defines.h	/^#define DEV_GET_TIME_LIST /;"	d
DEV_INIT	src/device_fingerprint/Defines.h	/^#define DEV_INIT /;"	d
DEV_LATER_EVENT	src/device_fingerprint/Defines.h	/^#define DEV_LATER_EVENT /;"	d
DEV_TIMER	src/device_fingerprint/Defines.h	/^#define DEV_TIMER /;"	d
DEV_UP_EVENT	src/device_fingerprint/Defines.h	/^#define DEV_UP_EVENT /;"	d
DEV_UP_LIST	src/device_fingerprint/Defines.h	/^#define DEV_UP_LIST /;"	d
DLLAPI	src/fastcgi/fcgi_stdio.cpp	/^#define DLLAPI /;"	d	file:
DLLAPI	src/fastcgi/fcgi_stdio.h	/^#define DLLAPI /;"	d
DLLAPI	src/fastcgi/fcgi_stdio.h	/^#define DLLAPI$/;"	d
DLLAPI	src/fastcgi/fcgiapp.cpp	/^#define DLLAPI /;"	d	file:
DLLAPI	src/fastcgi/fcgiapp.h	/^#define DLLAPI /;"	d
DLLAPI	src/fastcgi/fcgiapp.h	/^#define DLLAPI$/;"	d
DLLAPI	src/fastcgi/fcgio.h	/^#define DLLAPI /;"	d
DLLAPI	src/fastcgi/fcgio.h	/^#define DLLAPI$/;"	d
DLLAPI	src/fastcgi/fcgios.h	/^#define DLLAPI /;"	d
DLLAPI	src/fastcgi/fcgios.h	/^#define DLLAPI$/;"	d
DecToMac	src/common/Utility.cpp	/^std::string Utility::DecToMac(int64_t d)$/;"	f	class:Utility
DecodeTable	src/common/base64.cpp	/^static const unsigned char* DecodeTable = NULL;$/;"	m	namespace:__anon1	file:
Deserialize	src/common/Json.cpp	/^Value json::Deserialize(const std::string &str)$/;"	f	class:json
Deserialize	src/t/Json.cpp	/^Value json::Deserialize(const std::string &str)$/;"	f	class:json
DeserializeArray	src/common/Json.cpp	/^static Value DeserializeArray(std::string& str, std::stack<StackDepthType>& depth_stack)$/;"	f	file:
DeserializeArray	src/t/Json.cpp	/^static Value DeserializeArray(std::string& str, std::stack<StackDepthType>& depth_stack)$/;"	f	file:
DeserializeInternal	src/common/Json.cpp	/^static Value DeserializeInternal(const std::string& _str, std::stack<StackDepthType>& depth_stack)$/;"	f	file:
DeserializeInternal	src/t/Json.cpp	/^static Value DeserializeInternal(const std::string& _str, std::stack<StackDepthType>& depth_stack)$/;"	f	file:
DeserializeObj	src/common/Json.cpp	/^static Value DeserializeObj(const std::string& _str, std::stack<StackDepthType>& depth_stack)$/;"	f	file:
DeserializeObj	src/t/Json.cpp	/^static Value DeserializeObj(const std::string& _str, std::stack<StackDepthType>& depth_stack)$/;"	f	file:
DeserializeValue	src/common/Json.cpp	/^static Value DeserializeValue(std::string& str, bool* had_error, std::stack<StackDepthType>& depth_stack)$/;"	f	file:
DeserializeValue	src/t/Json.cpp	/^static Value DeserializeValue(std::string& str, bool* had_error, std::stack<StackDepthType>& depth_stack)$/;"	f	file:
DevDevf	src/device_fingerprint/DevDevf.cpp	/^DevDevf::DevDevf(const string& cmd_type):HttpReuest(cmd_type)$/;"	f	class:DevDevf
DevDevf	src/device_fingerprint/DevDevf.cpp	/^IMPL_LOGGER(DevDevf);$/;"	v
DevDevf	src/device_fingerprint/DevDevf.h	/^class DevDevf:public HTTPRequest$/;"	c
DevGtmList	src/device_fingerprint/DevGtmList.cpp	/^DevGtmList::DevGtmList(const string& cmd_type):HttpReuest(cmd_type)$/;"	f	class:DevGtmList
DevGtmList	src/device_fingerprint/DevGtmList.cpp	/^IMPL_LOGGER(DevGtmList);$/;"	v
DevGtmList	src/device_fingerprint/DevGtmList.h	/^class DevGtmList:public HTTPRequest$/;"	c
DevTimer	src/device_fingerprint/DevTimer.cpp	/^ DevTimer::DevTimer(const string& cmd_type):HTTPRequest(cmd_type)$/;"	f	class:DevTimer
DevTimer	src/device_fingerprint/DevTimer.h	/^class DevTimer:public HTTPRequest$/;"	c
DevUpList	src/device_fingerprint/DevUpList.cpp	/^DevUpList::DevUpList(const string& cmd_type):HTTPRequest(cmd_type)$/;"	f	class:DevUpList
DevUpList	src/device_fingerprint/DevUpList.cpp	/^IMPL_LOGGER(DevUpList);$/;"	v
DevUpList	src/device_fingerprint/DevUpList.h	/^class DevUpList:public HTTPRequest$/;"	c
DoubleVal	src/common/Json.hpp	/^        DoubleVal,$/;"	e	enum:json::ValueType
DoubleVal	src/t/Json.hpp	/^        DoubleVal,$/;"	e	enum:json::ValueType
EPOLL	src/makefile	/^EPOLL=-D_EPOLL_$/;"	m
ERROR_COMMAND	src/common/RedisClusterClient.h	/^    ERROR_COMMAND = -3,        \/\/ Command error$/;"	e	enum:__anon3
ERROR_CONNECT_REDIS	src/common/RedisClusterClient.h	/^    ERROR_CONNECT_REDIS = -4,  \/\/ Can not connect any cluster node$/;"	e	enum:__anon3
ERROR_FORMAT	src/common/RedisClusterClient.h	/^    ERROR_FORMAT = -5,         \/\/ Format error$/;"	e	enum:__anon3
ERROR_NOT_SUPPORT	src/common/RedisClusterClient.h	/^    ERROR_NOT_SUPPORT = -6,    \/\/ Not support$/;"	e	enum:__anon3
ERROR_SLOT_NOT_EXIST	src/common/RedisClusterClient.h	/^    ERROR_SLOT_NOT_EXIST = -7  \/\/ Slot not exists$/;"	e	enum:__anon3
ERR_INIT_REDIS_CONN	src/common/RedisClusterClient.h	/^    ERR_INIT_REDIS_CONN = -2,  \/\/ Initialize redis connection error$/;"	e	enum:__anon3
ERR_PARAMETER	src/common/RedisClusterClient.h	/^    ERR_PARAMETER = -1,        \/\/ Parameter error$/;"	e	enum:__anon3
EXCEPTION_H	src/common/Exception.h	/^#define EXCEPTION_H$/;"	d
E_CALL_TIMEOUT	src/common/TimeoutWrapper.h	/^#define E_CALL_TIMEOUT /;"	d
Empty	src/common/AutoSqlExecuter.h	/^    bool Empty()const$/;"	f	class:AutoSqlExecuter
EmptyBuffProc	src/fastcgi/fcgiapp.cpp	/^static void EmptyBuffProc(struct FCGX_Stream *stream, int doClose)$/;"	f	file:
EncodeTable	src/common/base64.cpp	/^static const unsigned char EncodeTable[] =$/;"	m	namespace:__anon1	file:
Ensure_Connect	src/common/PGDBConnectionPool.cpp	/^bool PGSQLDB::Ensure_Connect ()$/;"	f	class:PGSQLDB
EscapeString	src/common/AutoSqlExecuter.h	/^    static int EscapeString (string &str)$/;"	f	class:AutoSqlExecuter
Exception	src/common/Exception.h	/^	Exception(const std::string& cause) : m_cause(cause){};$/;"	f	class:Exception
Exception	src/common/Exception.h	/^class Exception : public std::exception{$/;"	c
Execute	src/common/AutoSqlExecuter.h	/^    void Execute(const string & sql)$/;"	f	class:AutoSqlExecuter
ExpectedDecodeLength	src/common/base64.cpp	/^size_t ExpectedDecodeLength(size_t len)$/;"	f	namespace:__anon1
ExpectedEncodeLength	src/common/base64.cpp	/^size_t ExpectedEncodeLength(size_t len)$/;"	f	namespace:__anon1
FALSE	src/fastcgi/fcgimisc.h	/^#define FALSE /;"	d
FASTCGICPPDEP	src/makefile	/^FASTCGICPPDEP:=$(patsubst %.cpp,%.d,$(FASTCGICPPSRC))$/;"	m
FASTCGICPPDIR	src/makefile	/^FASTCGICPPDIR=.\/fastcgi\/$/;"	m
FASTCGICPPOBJ	src/makefile	/^FASTCGICPPOBJ:=$(patsubst %.cpp,%.o,$(FASTCGICPPSRC))$/;"	m
FASTCGICPPSRC	src/makefile	/^FASTCGICPPSRC:=$(wildcard $(FASTCGICPPDIR)*.cpp)$/;"	m
FCGIO_H	src/fastcgi/fcgio.h	/^#define FCGIO_H$/;"	d
FCGI_ABORT_REQUEST	src/fastcgi/fastcgi.h	/^#define FCGI_ABORT_REQUEST /;"	d
FCGI_AUTHORIZER	src/fastcgi/fastcgi.h	/^#define FCGI_AUTHORIZER /;"	d
FCGI_Accept	src/fastcgi/fcgi_stdio.cpp	/^int FCGI_Accept(void)$/;"	f
FCGI_BEGIN_REQUEST	src/fastcgi/fastcgi.h	/^#define FCGI_BEGIN_REQUEST /;"	d
FCGI_BeginRequestBody	src/fastcgi/fastcgi.h	/^} FCGI_BeginRequestBody;$/;"	t	typeref:struct:__anon6
FCGI_BeginRequestRecord	src/fastcgi/fastcgi.h	/^} FCGI_BeginRequestRecord;$/;"	t	typeref:struct:__anon7
FCGI_CANT_MPX_CONN	src/fastcgi/fastcgi.h	/^#define FCGI_CANT_MPX_CONN /;"	d
FCGI_DATA	src/fastcgi/fastcgi.h	/^#define FCGI_DATA /;"	d
FCGI_END_REQUEST	src/fastcgi/fastcgi.h	/^#define FCGI_END_REQUEST /;"	d
FCGI_EndRequestBody	src/fastcgi/fastcgi.h	/^} FCGI_EndRequestBody;$/;"	t	typeref:struct:__anon8
FCGI_EndRequestRecord	src/fastcgi/fastcgi.h	/^} FCGI_EndRequestRecord;$/;"	t	typeref:struct:__anon9
FCGI_FAIL_ACCEPT_ON_INTR	src/fastcgi/fcgiapp.h	/^#define FCGI_FAIL_ACCEPT_ON_INTR	/;"	d
FCGI_FILE	src/fastcgi/fcgi_stdio.h	/^} FCGI_FILE;$/;"	t	typeref:struct:__anon14
FCGI_FILTER	src/fastcgi/fastcgi.h	/^#define FCGI_FILTER /;"	d
FCGI_Finish	src/fastcgi/fcgi_stdio.cpp	/^void FCGI_Finish(void)$/;"	f
FCGI_GET_VALUES	src/fastcgi/fastcgi.h	/^#define FCGI_GET_VALUES /;"	d
FCGI_GET_VALUES_RESULT	src/fastcgi/fastcgi.h	/^#define FCGI_GET_VALUES_RESULT /;"	d
FCGI_HEADER_LEN	src/fastcgi/fastcgi.h	/^#define FCGI_HEADER_LEN /;"	d
FCGI_Header	src/fastcgi/fastcgi.h	/^} FCGI_Header;$/;"	t	typeref:struct:__anon5
FCGI_KEEP_CONN	src/fastcgi/fastcgi.h	/^#define FCGI_KEEP_CONN /;"	d
FCGI_LIB_H	src/fastcgi/fcgi_lib.h	/^#define FCGI_LIB_H$/;"	d
FCGI_LISTENSOCK_FILENO	src/fastcgi/fastcgi.h	/^#define FCGI_LISTENSOCK_FILENO /;"	d
FCGI_MAXTYPE	src/fastcgi/fastcgi.h	/^#define FCGI_MAXTYPE /;"	d
FCGI_MAX_CONNS	src/fastcgi/fastcgi.h	/^#define FCGI_MAX_CONNS /;"	d
FCGI_MAX_LENGTH	src/fastcgi/fastcgi.h	/^#define FCGI_MAX_LENGTH /;"	d
FCGI_MAX_REQS	src/fastcgi/fastcgi.h	/^#define FCGI_MAX_REQS /;"	d
FCGI_MPXS_CONNS	src/fastcgi/fastcgi.h	/^#define FCGI_MPXS_CONNS /;"	d
FCGI_NULL_REQUEST_ID	src/fastcgi/fastcgi.h	/^#define FCGI_NULL_REQUEST_ID /;"	d
FCGI_OVERLOADED	src/fastcgi/fastcgi.h	/^#define FCGI_OVERLOADED /;"	d
FCGI_OpenFromFILE	src/fastcgi/fcgi_stdio.cpp	/^static FCGI_FILE *FCGI_OpenFromFILE(FILE *stream)$/;"	f	file:
FCGI_PARAMS	src/fastcgi/fastcgi.h	/^#define FCGI_PARAMS /;"	d
FCGI_REQUEST_COMPLETE	src/fastcgi/fastcgi.h	/^#define FCGI_REQUEST_COMPLETE /;"	d
FCGI_RESPONDER	src/fastcgi/fastcgi.h	/^#define FCGI_RESPONDER /;"	d
FCGI_STDERR	src/fastcgi/fastcgi.h	/^#define FCGI_STDERR /;"	d
FCGI_STDIN	src/fastcgi/fastcgi.h	/^#define FCGI_STDIN /;"	d
FCGI_STDOUT	src/fastcgi/fastcgi.h	/^#define FCGI_STDOUT /;"	d
FCGI_SetExitStatus	src/fastcgi/fcgi_stdio.cpp	/^void FCGI_SetExitStatus(int status)$/;"	f
FCGI_StartFilterData	src/fastcgi/fcgi_stdio.cpp	/^int FCGI_StartFilterData(void)$/;"	f
FCGI_ToFILE	src/fastcgi/fcgi_stdio.h	/^#define FCGI_ToFILE(/;"	d
FCGI_ToFcgiStream	src/fastcgi/fcgi_stdio.h	/^#define FCGI_ToFcgiStream(/;"	d
FCGI_UNKNOWN_ROLE	src/fastcgi/fastcgi.h	/^#define FCGI_UNKNOWN_ROLE /;"	d
FCGI_UNKNOWN_TYPE	src/fastcgi/fastcgi.h	/^#define FCGI_UNKNOWN_TYPE /;"	d
FCGI_UnknownTypeBody	src/fastcgi/fastcgi.h	/^} FCGI_UnknownTypeBody;$/;"	t	typeref:struct:__anon10
FCGI_UnknownTypeRecord	src/fastcgi/fastcgi.h	/^} FCGI_UnknownTypeRecord;$/;"	t	typeref:struct:__anon11
FCGI_VERSION_1	src/fastcgi/fastcgi.h	/^#define FCGI_VERSION_1 /;"	d
FCGI_clearerr	src/fastcgi/fcgi_stdio.cpp	/^void FCGI_clearerr(FCGI_FILE *fp)$/;"	f
FCGI_errno	src/fastcgi/fcgiapp.h	/^    int FCGI_errno;                \/* error status *\/$/;"	m	struct:FCGX_Stream
FCGI_fclose	src/fastcgi/fcgi_stdio.cpp	/^int FCGI_fclose(FCGI_FILE *fp)$/;"	f
FCGI_fdopen	src/fastcgi/fcgi_stdio.cpp	/^FCGI_FILE *FCGI_fdopen(int fd, const char *mode)$/;"	f
FCGI_feof	src/fastcgi/fcgi_stdio.cpp	/^int FCGI_feof(FCGI_FILE *fp)$/;"	f
FCGI_ferror	src/fastcgi/fcgi_stdio.cpp	/^int FCGI_ferror(FCGI_FILE *fp)$/;"	f
FCGI_fflush	src/fastcgi/fcgi_stdio.cpp	/^int FCGI_fflush(FCGI_FILE *fp)$/;"	f
FCGI_fgetc	src/fastcgi/fcgi_stdio.cpp	/^int FCGI_fgetc(FCGI_FILE *fp)$/;"	f
FCGI_fgetpos	src/fastcgi/fcgi_stdio.cpp	/^int FCGI_fgetpos(FCGI_FILE *fp, fpos_t *pos)$/;"	f
FCGI_fgets	src/fastcgi/fcgi_stdio.cpp	/^char *FCGI_fgets(char *str, int size, FCGI_FILE *fp)$/;"	f
FCGI_fileno	src/fastcgi/fcgi_stdio.cpp	/^int FCGI_fileno(FCGI_FILE *fp)$/;"	f
FCGI_fopen	src/fastcgi/fcgi_stdio.cpp	/^FCGI_FILE *FCGI_fopen(const char *path, const char *mode)$/;"	f
FCGI_fprintf	src/fastcgi/fcgi_stdio.cpp	/^int FCGI_fprintf(FCGI_FILE *fp, const char *format, ...)$/;"	f
FCGI_fputc	src/fastcgi/fcgi_stdio.cpp	/^int FCGI_fputc(int c, FCGI_FILE *fp)$/;"	f
FCGI_fputs	src/fastcgi/fcgi_stdio.cpp	/^int FCGI_fputs(const char *str, FCGI_FILE *fp)$/;"	f
FCGI_fread	src/fastcgi/fcgi_stdio.cpp	/^size_t FCGI_fread(void *ptr, size_t size, size_t nmemb, FCGI_FILE *fp)$/;"	f
FCGI_freopen	src/fastcgi/fcgi_stdio.cpp	/^FCGI_FILE *FCGI_freopen(const char *path, const char *mode,$/;"	f
FCGI_fseek	src/fastcgi/fcgi_stdio.cpp	/^int FCGI_fseek(FCGI_FILE *fp, long offset, int whence)$/;"	f
FCGI_fsetpos	src/fastcgi/fcgi_stdio.cpp	/^int FCGI_fsetpos(FCGI_FILE *fp, const fpos_t *pos)$/;"	f
FCGI_ftell	src/fastcgi/fcgi_stdio.cpp	/^int FCGI_ftell(FCGI_FILE *fp)$/;"	f
FCGI_fwrite	src/fastcgi/fcgi_stdio.cpp	/^size_t FCGI_fwrite(void *ptr, size_t size, size_t nmemb, FCGI_FILE *fp)$/;"	f
FCGI_getchar	src/fastcgi/fcgi_stdio.cpp	/^int FCGI_getchar(void)$/;"	f
FCGI_gets	src/fastcgi/fcgi_stdio.cpp	/^char *FCGI_gets(char *str)$/;"	f
FCGI_pclose	src/fastcgi/fcgi_stdio.cpp	/^int FCGI_pclose(FCGI_FILE *fp)$/;"	f
FCGI_perror	src/fastcgi/fcgi_stdio.cpp	/^void FCGI_perror(const char *str)$/;"	f
FCGI_popen	src/fastcgi/fcgi_stdio.cpp	/^FCGI_FILE *FCGI_popen(const char *cmd, const char *type)$/;"	f
FCGI_printf	src/fastcgi/fcgi_stdio.cpp	/^int FCGI_printf(const char *format, ...)$/;"	f
FCGI_putchar	src/fastcgi/fcgi_stdio.cpp	/^int FCGI_putchar(int c)$/;"	f
FCGI_puts	src/fastcgi/fcgi_stdio.cpp	/^int FCGI_puts(const char *str)$/;"	f
FCGI_rewind	src/fastcgi/fcgi_stdio.cpp	/^void FCGI_rewind(FCGI_FILE *fp)$/;"	f
FCGI_setbuf	src/fastcgi/fcgi_stdio.cpp	/^void FCGI_setbuf(FCGI_FILE *fp, char *buf)$/;"	f
FCGI_setvbuf	src/fastcgi/fcgi_stdio.cpp	/^int FCGI_setvbuf(FCGI_FILE *fp, char *buf, int bufmode, size_t size)$/;"	f
FCGI_stderr	src/fastcgi/fcgi_stdio.h	/^#define FCGI_stderr	/;"	d
FCGI_stdin	src/fastcgi/fcgi_stdio.h	/^#define FCGI_stdin	/;"	d
FCGI_stdout	src/fastcgi/fcgi_stdio.h	/^#define FCGI_stdout	/;"	d
FCGI_tmpfile	src/fastcgi/fcgi_stdio.cpp	/^FCGI_FILE *FCGI_tmpfile(void)$/;"	f
FCGI_ungetc	src/fastcgi/fcgi_stdio.cpp	/^int FCGI_ungetc(int c, FCGI_FILE *fp)$/;"	f
FCGI_vfprintf	src/fastcgi/fcgi_stdio.cpp	/^int FCGI_vfprintf(FCGI_FILE *fp, const char *format, va_list ap)$/;"	f
FCGI_vprintf	src/fastcgi/fcgi_stdio.cpp	/^int FCGI_vprintf(const char *format, va_list ap)$/;"	f
FCGX_Accept	src/fastcgi/fcgiapp.cpp	/^int FCGX_Accept($/;"	f
FCGX_Accept_r	src/fastcgi/fcgiapp.cpp	/^int FCGX_Accept_r(FCGX_Request *reqDataPtr)$/;"	f
FCGX_CALL_SEQ_ERROR	src/fastcgi/fcgiapp.h	/^#define FCGX_CALL_SEQ_ERROR /;"	d
FCGX_ClearError	src/fastcgi/fcgiapp.cpp	/^void FCGX_ClearError(FCGX_Stream *stream) {$/;"	f
FCGX_CreateWriter	src/fastcgi/fcgiapp.cpp	/^FCGX_Stream *FCGX_CreateWriter($/;"	f
FCGX_FClose	src/fastcgi/fcgiapp.cpp	/^int FCGX_FClose(FCGX_Stream *stream)$/;"	f
FCGX_FFlush	src/fastcgi/fcgiapp.cpp	/^int FCGX_FFlush(FCGX_Stream *stream)$/;"	f
FCGX_FPrintF	src/fastcgi/fcgiapp.cpp	/^int FCGX_FPrintF(FCGX_Stream *stream, const char *format, ...)$/;"	f
FCGX_Finish	src/fastcgi/fcgiapp.cpp	/^void FCGX_Finish(void)$/;"	f
FCGX_Finish_r	src/fastcgi/fcgiapp.cpp	/^void FCGX_Finish_r(FCGX_Request *reqDataPtr)$/;"	f
FCGX_Free	src/fastcgi/fcgiapp.cpp	/^void FCGX_Free(FCGX_Request * request, int close)$/;"	f
FCGX_FreeStream	src/fastcgi/fcgiapp.cpp	/^void FCGX_FreeStream(FCGX_Stream **streamPtr)$/;"	f
FCGX_GetChar	src/fastcgi/fcgiapp.cpp	/^int FCGX_GetChar(FCGX_Stream *stream)$/;"	f
FCGX_GetError	src/fastcgi/fcgiapp.cpp	/^int FCGX_GetError(FCGX_Stream *stream) {$/;"	f
FCGX_GetLine	src/fastcgi/fcgiapp.cpp	/^char *FCGX_GetLine(char *str, int n, FCGX_Stream *stream)$/;"	f
FCGX_GetParam	src/fastcgi/fcgiapp.cpp	/^char *FCGX_GetParam(const char *name, FCGX_ParamArray envp)$/;"	f
FCGX_GetStr	src/fastcgi/fcgiapp.cpp	/^int FCGX_GetStr(char *str, int n, FCGX_Stream *stream)$/;"	f
FCGX_HasSeenEOF	src/fastcgi/fcgiapp.cpp	/^int FCGX_HasSeenEOF(FCGX_Stream *stream) {$/;"	f
FCGX_Init	src/fastcgi/fcgiapp.cpp	/^int FCGX_Init(void)$/;"	f
FCGX_InitRequest	src/fastcgi/fcgiapp.cpp	/^int FCGX_InitRequest(FCGX_Request *request, int sock, int flags)$/;"	f
FCGX_IsCGI	src/fastcgi/fcgiapp.cpp	/^int FCGX_IsCGI(void)$/;"	f
FCGX_OpenSocket	src/fastcgi/fcgiapp.cpp	/^int FCGX_OpenSocket(const char *path, int backlog)$/;"	f
FCGX_PARAMS_ERROR	src/fastcgi/fcgiapp.h	/^#define FCGX_PARAMS_ERROR /;"	d
FCGX_PROTOCOL_ERROR	src/fastcgi/fcgiapp.h	/^#define FCGX_PROTOCOL_ERROR /;"	d
FCGX_ParamArray	src/fastcgi/fcgiapp.h	/^typedef char **FCGX_ParamArray;$/;"	t
FCGX_PutChar	src/fastcgi/fcgiapp.cpp	/^int FCGX_PutChar(int c, FCGX_Stream *stream)$/;"	f
FCGX_PutS	src/fastcgi/fcgiapp.cpp	/^int FCGX_PutS(const char *str, FCGX_Stream *stream)$/;"	f
FCGX_PutStr	src/fastcgi/fcgiapp.cpp	/^int FCGX_PutStr(const char *str, int n, FCGX_Stream *stream)$/;"	f
FCGX_Request	src/fastcgi/fcgiapp.h	/^typedef struct FCGX_Request {$/;"	s
FCGX_Request	src/fastcgi/fcgiapp.h	/^} FCGX_Request;$/;"	t	typeref:struct:FCGX_Request
FCGX_SetExitStatus	src/fastcgi/fcgiapp.cpp	/^void FCGX_SetExitStatus(int status, FCGX_Stream *stream)$/;"	f
FCGX_ShutdownPending	src/fastcgi/fcgiapp.cpp	/^void FCGX_ShutdownPending(void)$/;"	f
FCGX_StartFilterData	src/fastcgi/fcgiapp.cpp	/^int FCGX_StartFilterData(FCGX_Stream *stream)$/;"	f
FCGX_Stream	src/fastcgi/fcgiapp.h	/^typedef struct FCGX_Stream {$/;"	s
FCGX_Stream	src/fastcgi/fcgiapp.h	/^} FCGX_Stream;$/;"	t	typeref:struct:FCGX_Stream
FCGX_Stream_Data	src/fastcgi/fcgiapp.cpp	/^typedef struct FCGX_Stream_Data {$/;"	s	file:
FCGX_Stream_Data	src/fastcgi/fcgiapp.cpp	/^} FCGX_Stream_Data;$/;"	t	typeref:struct:FCGX_Stream_Data	file:
FCGX_UNSUPPORTED_VERSION	src/fastcgi/fcgiapp.h	/^#define FCGX_UNSUPPORTED_VERSION /;"	d
FCGX_UnGetChar	src/fastcgi/fcgiapp.cpp	/^int FCGX_UnGetChar(int c, FCGX_Stream *stream) {$/;"	f
FCGX_VFPrintF	src/fastcgi/fcgiapp.cpp	/^int FCGX_VFPrintF(FCGX_Stream *stream, const char *format, va_list arg)$/;"	f
FILE	src/fastcgi/fcgi_stdio.h	/^#define	FILE /;"	d
FILE	src/fastcgi/fcgi_stdio.h	/^#undef  FILE$/;"	d
FMT_BUFFLEN	src/fastcgi/fcgiapp.cpp	/^#define FMT_BUFFLEN /;"	d	file:
FillBuffProc	src/fastcgi/fcgiapp.cpp	/^static void FillBuffProc(FCGX_Stream *stream)$/;"	f	file:
FillDecodeTable	src/common/base64.cpp	/^void FillDecodeTable() {$/;"	f	namespace:__anon1
FloatVal	src/common/Json.hpp	/^        FloatVal,$/;"	e	enum:json::ValueType
FloatVal	src/t/Json.hpp	/^        FloatVal,$/;"	e	enum:json::ValueType
FreeArgvHelper	src/common/RedisClusterClient.cpp	/^    FreeArgvHelper(int argc, char* argv[], size_t* argv_len)$/;"	f	class:FreeArgvHelper
FreeArgvHelper	src/common/RedisClusterClient.cpp	/^class FreeArgvHelper$/;"	c	file:
FreeParams	src/fastcgi/fcgiapp.cpp	/^static void FreeParams(ParamsPtr *paramsPtrPtr)$/;"	f	file:
GetB64Char	src/base64.h	/^__inline char GetB64Char(int index) $/;"	f
GetB64Char	src/common/base64.cpp	/^inline char GetB64Char(int index) $/;"	f
GetB64Index	src/base64.h	/^__inline int GetB64Index(char ch) $/;"	f
GetB64Index	src/common/base64.cpp	/^inline int GetB64Index(char ch) $/;"	f
GetEndOfArrayOrObj	src/common/Json.cpp	/^static size_t GetEndOfArrayOrObj(const std::string& str, std::stack<StackDepthType>& depth_stack)$/;"	f	file:
GetEndOfArrayOrObj	src/t/Json.cpp	/^static size_t GetEndOfArrayOrObj(const std::string& str, std::stack<StackDepthType>& depth_stack)$/;"	f	file:
GetErrMsg	src/common/cexception.h	/^	const char* GetErrMsg() {return m_str.c_str();};$/;"	f	class:CCommonException
GetInstance	src/device_fingerprint/RecordCache.cpp	/^RecordCache * RecordCache::GetInstance()$/;"	f	class:RecordCache
GetNext4EncodedCharacters	src/common/base64.cpp	/^int GetNext4EncodedCharacters(const unsigned char*& p,$/;"	f	namespace:__anon1
GetQuotePos	src/common/Json.cpp	/^static size_t GetQuotePos(const std::string& str, size_t start_pos = 0)$/;"	f	file:
GetQuotePos	src/t/Json.cpp	/^static size_t GetQuotePos(const std::string& str, size_t start_pos = 0)$/;"	f	file:
GetType	src/common/Json.hpp	/^            ValueType GetType() const {return mValueType;}$/;"	f	class:json::Value
GetType	src/t/Json.hpp	/^            ValueType GetType() const {return mValueType;}$/;"	f	class:json::Value
GetUrl	src/common/cexception.h	/^	const char* GetUrl() {return m_url.c_str();};$/;"	f	class:CCommonException
Good	src/common/AutoSqlExecuter.h	/^    bool Good() const$/;"	f	class:AutoSqlExecuter
GrowAsyncTable	src/fastcgi/os_unix.cpp	/^static void GrowAsyncTable(void)$/;"	f	file:
HAVE_ARPA_INET_H	src/fastcgi/fcgi_config.h	/^#define HAVE_ARPA_INET_H /;"	d
HAVE_ARPA_INET_H	src/fastcgi/fcgi_config_x86.h	/^#undef HAVE_ARPA_INET_H$/;"	d
HAVE_DLFCN_H	src/fastcgi/fcgi_config.h	/^#define HAVE_DLFCN_H /;"	d
HAVE_DLFCN_H	src/fastcgi/fcgi_config_x86.h	/^#undef HAVE_DLFCN_H$/;"	d
HAVE_FILENO_PROTO	src/fastcgi/fcgi_config.h	/^#define HAVE_FILENO_PROTO /;"	d
HAVE_FILENO_PROTO	src/fastcgi/fcgi_config_x86.h	/^#undef HAVE_FILENO_PROTO$/;"	d
HAVE_FPOS	src/fastcgi/fcgi_config.h	/^#define HAVE_FPOS /;"	d
HAVE_FPOS	src/fastcgi/fcgi_config_x86.h	/^#define HAVE_FPOS /;"	d
HAVE_INTTYPES_H	src/fastcgi/fcgi_config.h	/^#define HAVE_INTTYPES_H /;"	d
HAVE_INTTYPES_H	src/fastcgi/fcgi_config_x86.h	/^#undef HAVE_INTTYPES_H$/;"	d
HAVE_IOSTREAM_WITHASSIGN_STREAMBUF	src/fastcgi/fcgi_config_x86.h	/^#undef HAVE_IOSTREAM_WITHASSIGN_STREAMBUF$/;"	d
HAVE_LIBNSL	src/fastcgi/fcgi_config.h	/^#define HAVE_LIBNSL /;"	d
HAVE_LIBNSL	src/fastcgi/fcgi_config_x86.h	/^#undef HAVE_LIBNSL$/;"	d
HAVE_LIBSOCKET	src/fastcgi/fcgi_config_x86.h	/^#undef HAVE_LIBSOCKET$/;"	d
HAVE_LIMITS_H	src/fastcgi/fcgi_config.h	/^#define HAVE_LIMITS_H /;"	d
HAVE_LIMITS_H	src/fastcgi/fcgi_config_x86.h	/^#define HAVE_LIMITS_H /;"	d
HAVE_MEMORY_H	src/fastcgi/fcgi_config.h	/^#define HAVE_MEMORY_H /;"	d
HAVE_MEMORY_H	src/fastcgi/fcgi_config_x86.h	/^#undef HAVE_MEMORY_H$/;"	d
HAVE_NETDB_H	src/fastcgi/fcgi_config.h	/^#define HAVE_NETDB_H /;"	d
HAVE_NETDB_H	src/fastcgi/fcgi_config_x86.h	/^#undef HAVE_NETDB_H$/;"	d
HAVE_NETINET_IN_H	src/fastcgi/fcgi_config.h	/^#define HAVE_NETINET_IN_H /;"	d
HAVE_NETINET_IN_H	src/fastcgi/fcgi_config_x86.h	/^#undef HAVE_NETINET_IN_H$/;"	d
HAVE_PTHREAD	src/fastcgi/fcgi_config_x86.h	/^#undef HAVE_PTHREAD$/;"	d
HAVE_SOCKADDR_UN_SUN_LEN	src/fastcgi/fcgi_config_x86.h	/^#undef HAVE_SOCKADDR_UN_SUN_LEN$/;"	d
HAVE_SOCKLEN	src/fastcgi/fcgi_config_x86.h	/^#undef HAVE_SOCKLEN$/;"	d
HAVE_STDINT_H	src/fastcgi/fcgi_config.h	/^#define HAVE_STDINT_H /;"	d
HAVE_STDINT_H	src/fastcgi/fcgi_config_x86.h	/^#undef HAVE_STDINT_H$/;"	d
HAVE_STDLIB_H	src/fastcgi/fcgi_config.h	/^#define HAVE_STDLIB_H /;"	d
HAVE_STDLIB_H	src/fastcgi/fcgi_config_x86.h	/^#undef HAVE_STDLIB_H$/;"	d
HAVE_STREAMBUF_CHAR_TYPE	src/fastcgi/fcgi_config_x86.h	/^#define HAVE_STREAMBUF_CHAR_TYPE /;"	d
HAVE_STRERROR	src/fastcgi/fcgi_config.h	/^#define HAVE_STRERROR /;"	d
HAVE_STRERROR	src/fastcgi/fcgi_config_x86.h	/^#define HAVE_STRERROR /;"	d
HAVE_STRINGS_H	src/fastcgi/fcgi_config.h	/^#define HAVE_STRINGS_H /;"	d
HAVE_STRINGS_H	src/fastcgi/fcgi_config_x86.h	/^#undef HAVE_STRINGS_H$/;"	d
HAVE_STRING_H	src/fastcgi/fcgi_config.h	/^#define HAVE_STRING_H /;"	d
HAVE_STRING_H	src/fastcgi/fcgi_config_x86.h	/^#undef HAVE_STRING_H$/;"	d
HAVE_SYS_PARAM_H	src/fastcgi/fcgi_config.h	/^#define HAVE_SYS_PARAM_H /;"	d
HAVE_SYS_PARAM_H	src/fastcgi/fcgi_config_x86.h	/^#undef HAVE_SYS_PARAM_H$/;"	d
HAVE_SYS_SOCKET_H	src/fastcgi/fcgi_config.h	/^#define HAVE_SYS_SOCKET_H /;"	d
HAVE_SYS_SOCKET_H	src/fastcgi/fcgi_config_x86.h	/^#undef HAVE_SYS_SOCKET_H$/;"	d
HAVE_SYS_STAT_H	src/fastcgi/fcgi_config.h	/^#define HAVE_SYS_STAT_H /;"	d
HAVE_SYS_STAT_H	src/fastcgi/fcgi_config_x86.h	/^#undef HAVE_SYS_STAT_H$/;"	d
HAVE_SYS_TIME_H	src/fastcgi/fcgi_config.h	/^#define HAVE_SYS_TIME_H /;"	d
HAVE_SYS_TIME_H	src/fastcgi/fcgi_config_x86.h	/^#undef HAVE_SYS_TIME_H$/;"	d
HAVE_SYS_TYPES_H	src/fastcgi/fcgi_config.h	/^#define HAVE_SYS_TYPES_H /;"	d
HAVE_SYS_TYPES_H	src/fastcgi/fcgi_config_x86.h	/^#undef HAVE_SYS_TYPES_H$/;"	d
HAVE_UNISTD_H	src/fastcgi/fcgi_config.h	/^#define HAVE_UNISTD_H /;"	d
HAVE_UNISTD_H	src/fastcgi/fcgi_config_x86.h	/^#undef HAVE_UNISTD_H$/;"	d
HAVE_VA_ARG_LONG_DOUBLE_BUG	src/fastcgi/fcgi_config_x86.h	/^#undef HAVE_VA_ARG_LONG_DOUBLE_BUG$/;"	d
HEX_DATA_MAP	src/common/Utility.cpp	/^const char Utility::HEX_DATA_MAP[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};$/;"	m	class:Utility	file:
HEX_DATA_MAP	src/common/Utility.h	/^    const static char HEX_DATA_MAP[];$/;"	m	class:Utility
HTML_LIB_H	src/fastcgi/html_lib.h	/^#define HTML_LIB_H$/;"	d
HTTPRequest	src/device_fingerprint/HTTPRequest.cpp	/^HTTPRequest::HTTPRequest(const std::string &cmd_type)$/;"	f	class:HTTPRequest
HTTPRequest	src/device_fingerprint/HTTPRequest.h	/^    HTTPRequest(){}$/;"	f	class:HTTPRequest
HTTPRequest	src/device_fingerprint/HTTPRequest.h	/^class HTTPRequest$/;"	c
HTTPRequestHandler	src/device_fingerprint/HTTPRequestHandler.cpp	/^HTTPRequestHandler::HTTPRequestHandler()$/;"	f	class:HTTPRequestHandler
HTTPRequestHandler	src/device_fingerprint/HTTPRequestHandler.h	/^class HTTPRequestHandler {$/;"	c
HTTPRequestPool	src/device_fingerprint/HTTPRequestPool.cpp	/^HTTPRequestPool::HTTPRequestPool (const HTTPRequestPool & http_pool)$/;"	f	class:HTTPRequestPool
HTTPRequestPool	src/device_fingerprint/HTTPRequestPool.cpp	/^HTTPRequestPool::HTTPRequestPool (unsigned poolsize)$/;"	f	class:HTTPRequestPool
HTTPRequestPool	src/device_fingerprint/HTTPRequestPool.h	/^    HTTPRequestPool() {$/;"	f	class:HTTPRequestPool
HTTPRequestPool	src/device_fingerprint/HTTPRequestPool.h	/^class HTTPRequestPool {$/;"	c
HTTP_200_REASON_PHRASE	src/device_fingerprint/Defines.h	/^#define HTTP_200_REASON_PHRASE /;"	d
HTTP_404_REASON_PHRASE	src/device_fingerprint/Defines.h	/^#define HTTP_404_REASON_PHRASE /;"	d
HTTP_416_REASON_PHRASE	src/device_fingerprint/Defines.h	/^#define HTTP_416_REASON_PHRASE /;"	d
HTTP_500_REASON_PHRASE	src/device_fingerprint/Defines.h	/^#define HTTP_500_REASON_PHRASE /;"	d
HTTP_HTML_HEADER	src/device_fingerprint/Defines.h	/^#define HTTP_HTML_HEADER /;"	d
HTTP_STATUS_INALID	src/device_fingerprint/Defines.h	/^#define HTTP_STATUS_INALID /;"	d
HTTP_STATUS_PROTOCAL_ERROR	src/device_fingerprint/Defines.h	/^#define HTTP_STATUS_PROTOCAL_ERROR /;"	d
HTTP_STATUS_SUCC	src/device_fingerprint/Defines.h	/^#define HTTP_STATUS_SUCC /;"	d
HTTP_STATUS_SVR_SIE	src/device_fingerprint/Defines.h	/^#define HTTP_STATUS_SVR_SIE /;"	d
HasKey	src/common/Json.cpp	/^bool Object::HasKey(const std::string& key) const$/;"	f	class:Object
HasKey	src/common/Json.cpp	/^bool Value::HasKey(const std::string &key) const$/;"	f	class:Value
HasKey	src/t/Json.cpp	/^bool Object::HasKey(const std::string& key) const$/;"	f	class:Object
HasKey	src/t/Json.cpp	/^bool Value::HasKey(const std::string &key) const$/;"	f	class:Value
HasKeys	src/common/Json.cpp	/^int Object::HasKeys(const char** keys, int key_count) const$/;"	f	class:Object
HasKeys	src/common/Json.cpp	/^int Object::HasKeys(const std::vector<std::string>& keys) const$/;"	f	class:Object
HasKeys	src/common/Json.cpp	/^int Value::HasKeys(const char **keys, int key_count) const$/;"	f	class:Value
HasKeys	src/common/Json.cpp	/^int Value::HasKeys(const std::vector<std::string> &keys) const$/;"	f	class:Value
HasKeys	src/t/Json.cpp	/^int Object::HasKeys(const char** keys, int key_count) const$/;"	f	class:Object
HasKeys	src/t/Json.cpp	/^int Object::HasKeys(const std::vector<std::string>& keys) const$/;"	f	class:Object
HasKeys	src/t/Json.cpp	/^int Value::HasKeys(const char **keys, int key_count) const$/;"	f	class:Value
HasKeys	src/t/Json.cpp	/^int Value::HasKeys(const std::vector<std::string> &keys) const$/;"	f	class:Value
HasValue	src/common/Json.cpp	/^bool Array::HasValue(const Value& v) const$/;"	f	class:Array
HasValue	src/t/Json.cpp	/^bool Array::HasValue(const Value& v) const$/;"	f	class:Array
HexToDec	src/common/Utility.cpp	/^int64_t Utility::HexToDec(char *s)$/;"	f	class:Utility
IMPL_LOGGER	src/common/Logger.h	/^#define IMPL_LOGGER(/;"	d
INADDR_NONE	src/fastcgi/os_unix.cpp	/^#define INADDR_NONE /;"	d	file:
INCLUDE	src/makefile	/^INCLUDE=-I.\/ -I\/usr\/local\/pgsql\/include -I\/usr\/include\/mysql -I$(INSTALL_INCLUDE_PATH) -I..\/..\/common\/log4cplus-1.2.0\/include -I.\/include -include inttypes.h -include string.h -include stdlib.h -include stdio.h$/;"	m
INSTALL_INCLUDE_PATH	src/makefile	/^INSTALL_INCLUDE_PATH= $(PREFIX)\/include\/hiredis-vip$/;"	m
INSTALL_LIBRARY_PATH	src/makefile	/^INSTALL_LIBRARY_PATH= $(PREFIX)\/lib$/;"	m
InArray	src/common/Json.cpp	/^        InArray$/;"	e	enum:json::StackDepthType	file:
InArray	src/t/Json.cpp	/^        InArray$/;"	e	enum:json::StackDepthType	file:
InObject	src/common/Json.cpp	/^        InObject,$/;"	e	enum:json::StackDepthType	file:
InObject	src/t/Json.cpp	/^        InObject,$/;"	e	enum:json::StackDepthType	file:
Init	src/common/PGDBConnectionPool.cpp	/^bool PGDBConnectionPool::Init ()$/;"	f	class:PGDBConnectionPool
Init	src/common/PGDBConnectionPool.cpp	/^bool PGSQLDB::Init ()$/;"	f	class:PGSQLDB
InitException	src/common/Exception.h	/^	InitException(const std::string& what) : Exception(what){};$/;"	f	class:InitException
InitException	src/common/Exception.h	/^class InitException : public Exception{$/;"	c
IntVal	src/common/Json.hpp	/^        IntVal,$/;"	e	enum:json::ValueType
IntVal	src/t/Json.hpp	/^        IntVal,$/;"	e	enum:json::ValueType
IsArray	src/common/Json.hpp	/^            bool IsArray() const             {return (mValueType == ArrayVal);}$/;"	f	class:json::Value
IsNumeric	src/common/Json.hpp	/^            bool IsNumeric() const             {return (mValueType == IntVal) || (mValueType == DoubleVal) || (mValueType == FloatVal);}$/;"	f	class:json::Value
IsNumeric	src/t/Json.hpp	/^            bool IsNumeric() const             {return (mValueType == IntVal) || (mValueType == DoubleVal) || (mValueType == FloatVal);}$/;"	f	class:json::Value
IsString	src/common/Json.hpp	/^            bool IsString() const             {return (mValueType == StringVal);}$/;"	f	class:json::Value
IsString	src/t/Json.hpp	/^            bool IsString() const             {return (mValueType == StringVal);}$/;"	f	class:json::Value
JSONCPPDEP	src/makefile	/^JSONCPPDEP:=$(patsubst %.cpp,%.d,$(JSONCPPSRC))$/;"	m
JSONCPPDIR	src/makefile	/^JSONCPPDIR=.\/json\/$/;"	m
JSONCPPOBJ	src/makefile	/^JSONCPPOBJ:=$(patsubst %.cpp,%.o,$(JSONCPPSRC))$/;"	m
JSONCPPSRC	src/makefile	/^JSONCPPSRC:=$(wildcard $(JSONCPPDIR)*.cpp)$/;"	m
JSON_HTTP_HTML_HEADER	src/device_fingerprint/Defines.h	/^#define JSON_HTTP_HTML_HEADER /;"	d
LIB	src/makefile	/^LIB=-L..\/lib -L$(INSTALL_LIBRARY_PATH)\/lib  -lstdc++ -lcrypto -lrt -lpthread -lpq \/home\/chenkai\/compile\/hiredis-vip-master\/libhiredis_vip.a  \/usr\/local\/lib\/libjemalloc.a -ljsoncpp  -lz  -lcurl -llog4cplus -lhiredis_vip -ljemalloc$/;"	m
LOG	src/makefile	/^LOG=-DLOGGER #-DMEM_DEBUG -D_MEM_DEBUG$/;"	m
LOG4CPLUS_DEBUG	src/common/Logger.h	/^#define LOG4CPLUS_DEBUG(/;"	d
LOG4CPLUS_DEBUG	src/common/Logger.h	/^#undef LOG4CPLUS_DEBUG$/;"	d
LOG4CPLUS_ERROR	src/common/Logger.h	/^#define LOG4CPLUS_ERROR(/;"	d
LOG4CPLUS_FATAL	src/common/Logger.h	/^#define LOG4CPLUS_FATAL(/;"	d
LOG4CPLUS_INFO	src/common/Logger.h	/^#define LOG4CPLUS_INFO(/;"	d
LOG4CPLUS_INFO	src/common/Logger.h	/^#undef LOG4CPLUS_INFO$/;"	d
LOG4CPLUS_WARN	src/common/Logger.h	/^#define LOG4CPLUS_WARN(/;"	d
LOG_WRITE	src/common/RedisClusterClient.h	/^typedef void (*LOG_WRITE)(const char* format, ...);$/;"	t
LONG_DOUBLE	src/fastcgi/fcgiapp.cpp	/^#define LONG_DOUBLE /;"	d	file:
LoadDB	src/device_fingerprint/RecordCache.cpp	/^void  RecordCache::LoadDB()$/;"	f	class:RecordCache
Lock	src/common/MutexLock.h	/^	Lock()$/;"	f	class:Lock
Lock	src/common/MutexLock.h	/^class Lock$/;"	c
MAXPATHLEN	src/fastcgi/fcgios.h	/^#define MAXPATHLEN /;"	d
MEM_BUFF_SIZE	src/common/CryptTask.hpp	/^#define MEM_BUFF_SIZE /;"	d
MGMT_RECORD	src/fastcgi/fcgiapp.cpp	/^#define MGMT_RECORD /;"	d	file:
MUTEX_LOCK_H	src/common/MutexLock.h	/^#define MUTEX_LOCK_H$/;"	d
MacToDec	src/common/Utility.cpp	/^int64_t Utility::MacToDec(std::string &s)$/;"	f	class:Utility
MakeEndRequestBody	src/fastcgi/fcgiapp.cpp	/^static FCGI_EndRequestBody MakeEndRequestBody($/;"	f	file:
MakeHeader	src/fastcgi/fcgiapp.cpp	/^static FCGI_Header MakeHeader($/;"	f	file:
MakeUnknownTypeBody	src/fastcgi/fcgiapp.cpp	/^static FCGI_UnknownTypeBody MakeUnknownTypeBody($/;"	f	file:
Malloc	src/fastcgi/fcgiapp.cpp	/^static void *Malloc(size_t size)$/;"	f	file:
MutexCounter	src/common/Counter.h	/^	MutexCounter() {}$/;"	f	class:MutexCounter
MutexCounter	src/common/Counter.h	/^class MutexCounter : public Counter<T>$/;"	c
MutexLock	src/common/SDMutexLock.h	/^	MutexLock()$/;"	f	class:MutexLock
MutexLock	src/common/SDMutexLock.h	/^class MutexLock$/;"	c
NO_FCGI_DEFINES	src/fastcgi/fcgi_stdio.cpp	/^#define NO_FCGI_DEFINES$/;"	d	file:
NO_FCGI_DEFINES	src/fastcgi/fcgi_stdio.cpp	/^#undef NO_FCGI_DEFINES$/;"	d	file:
NULLVal	src/common/Json.hpp	/^        NULLVal,$/;"	e	enum:json::ValueType
NULLVal	src/t/Json.hpp	/^        NULLVal,$/;"	e	enum:json::ValueType
NewParams	src/fastcgi/fcgiapp.cpp	/^static ParamsPtr NewParams(int length)$/;"	f	file:
NewReader	src/fastcgi/fcgiapp.cpp	/^static FCGX_Stream *NewReader(FCGX_Request *reqDataPtr, int bufflen, int streamType)$/;"	f	file:
NewStream	src/fastcgi/fcgiapp.cpp	/^static FCGX_Stream *NewStream($/;"	f	file:
NewWriter	src/fastcgi/fcgiapp.cpp	/^static FCGX_Stream *NewWriter(FCGX_Request *reqDataPtr, int bufflen, int streamType)$/;"	f	file:
NodeInfo	src/common/RedisClusterClient.h	/^struct NodeInfo$/;"	s
OBJDIR	src/makefile	/^OBJDIR=..\/bin\/$/;"	m
OS_Accept	src/fastcgi/os_unix.cpp	/^int OS_Accept(int listen_sock, int fail_on_intr, const char *webServerAddrs)$/;"	f
OS_AsyncProc	src/fastcgi/fcgios.h	/^typedef void (*OS_AsyncProc) (ClientData clientData, int len);$/;"	t
OS_AsyncRead	src/fastcgi/os_unix.cpp	/^int OS_AsyncRead(int fd, int offset, void *buf, int len,$/;"	f
OS_AsyncReadStdin	src/fastcgi/os_unix.cpp	/^int OS_AsyncReadStdin(void *buf, int len, OS_AsyncProc procPtr,$/;"	f
OS_AsyncWrite	src/fastcgi/os_unix.cpp	/^int OS_AsyncWrite(int fd, int offset, void *buf, int len,$/;"	f
OS_BuildSockAddrUn	src/fastcgi/os_unix.cpp	/^static int OS_BuildSockAddrUn(const char *bindPath,$/;"	f	file:
OS_Close	src/fastcgi/os_unix.cpp	/^int OS_Close(int fd)$/;"	f
OS_CloseRead	src/fastcgi/os_unix.cpp	/^int OS_CloseRead(int fd)$/;"	f
OS_CreateLocalIpcFd	src/fastcgi/os_unix.cpp	/^int OS_CreateLocalIpcFd(const char *bindPath, int backlog)$/;"	f
OS_DoIo	src/fastcgi/os_unix.cpp	/^int OS_DoIo(struct timeval *tmo)$/;"	f
OS_Errno	src/fastcgi/fcgios.h	/^#define OS_Errno /;"	d
OS_FcgiConnect	src/fastcgi/os_unix.cpp	/^int OS_FcgiConnect(char *bindPath)$/;"	f
OS_InstallSignalHandlers	src/fastcgi/os_unix.cpp	/^static void OS_InstallSignalHandlers(int force)$/;"	f	file:
OS_IpcClose	src/fastcgi/os_unix.cpp	/^int OS_IpcClose(int ipcFd)$/;"	f
OS_IsFcgi	src/fastcgi/os_unix.cpp	/^int OS_IsFcgi(int sock)$/;"	f
OS_LibInit	src/fastcgi/os_unix.cpp	/^int OS_LibInit(int stdioFds[3])$/;"	f
OS_LibShutdown	src/fastcgi/os_unix.cpp	/^void OS_LibShutdown()$/;"	f
OS_Read	src/fastcgi/os_unix.cpp	/^int OS_Read(int fd, char * buf, size_t len)$/;"	f
OS_SetErrno	src/fastcgi/fcgios.h	/^#define OS_SetErrno(/;"	d
OS_SetFlags	src/fastcgi/os_unix.cpp	/^void OS_SetFlags(int fd, int flags)$/;"	f
OS_ShutdownPending	src/fastcgi/os_unix.cpp	/^void OS_ShutdownPending()$/;"	f
OS_SigpipeHandler	src/fastcgi/os_unix.cpp	/^static void OS_SigpipeHandler(int signo)$/;"	f	file:
OS_Sigusr1Handler	src/fastcgi/os_unix.cpp	/^static void OS_Sigusr1Handler(int signo)$/;"	f	file:
OS_SpawnChild	src/fastcgi/os_unix.cpp	/^int OS_SpawnChild(char *appPath, int listenFd)$/;"	f
OS_Write	src/fastcgi/os_unix.cpp	/^int OS_Write(int fd, char * buf, size_t len)$/;"	f
O_NONBLOCK	src/fastcgi/fcgios.h	/^#define O_NONBLOCK /;"	d
Object	src/common/Json.cpp	/^Object::Object()$/;"	f	class:Object
Object	src/common/Json.cpp	/^Object::Object(const Object& obj) : mValues(obj.mValues)$/;"	f	class:Object
Object	src/common/Json.hpp	/^    class Object$/;"	c	namespace:json
Object	src/t/Json.cpp	/^Object::Object()$/;"	f	class:Object
Object	src/t/Json.cpp	/^Object::Object(const Object& obj) : mValues(obj.mValues)$/;"	f	class:Object
Object	src/t/Json.hpp	/^    class Object$/;"	c	namespace:json
ObjectVal	src/common/Json.hpp	/^        ObjectVal,$/;"	e	enum:json::ValueType
ObjectVal	src/t/Json.hpp	/^        ObjectVal,$/;"	e	enum:json::ValueType
PACKAGE	src/fastcgi/fcgi_config.h	/^#define PACKAGE /;"	d
PACKAGE_BUGREPORT	src/fastcgi/fcgi_config.h	/^#define PACKAGE_BUGREPORT /;"	d
PACKAGE_NAME	src/fastcgi/fcgi_config.h	/^#define PACKAGE_NAME /;"	d
PACKAGE_STRING	src/fastcgi/fcgi_config.h	/^#define PACKAGE_STRING /;"	d
PACKAGE_TARNAME	src/fastcgi/fcgi_config.h	/^#define PACKAGE_TARNAME /;"	d
PACKAGE_VERSION	src/fastcgi/fcgi_config.h	/^#define PACKAGE_VERSION /;"	d
PARAM_TYPE_ARRAY	src/device_fingerprint/Defines.h	/^#define PARAM_TYPE_ARRAY /;"	d
PARAM_TYPE_DOUBLE	src/device_fingerprint/Defines.h	/^#define PARAM_TYPE_DOUBLE /;"	d
PARAM_TYPE_INT	src/device_fingerprint/Defines.h	/^#define PARAM_TYPE_INT /;"	d
PARAM_TYPE_STRING	src/device_fingerprint/Defines.h	/^#define PARAM_TYPE_STRING /;"	d
PGDBConnectionPool	src/common/PGDBConnectionPool.cpp	/^PGDBConnectionPool::PGDBConnectionPool (const PGDBConnectionPool & dbc_pool)$/;"	f	class:PGDBConnectionPool
PGDBConnectionPool	src/common/PGDBConnectionPool.cpp	/^PGDBConnectionPool::PGDBConnectionPool (unsigned poolsize, $/;"	f	class:PGDBConnectionPool
PGDBConnectionPool	src/common/PGDBConnectionPool.h	/^  public:PGDBConnectionPool() {$/;"	f	class:PGDBConnectionPool
PGDBConnectionPool	src/common/PGDBConnectionPool.h	/^class PGDBConnectionPool {$/;"	c
PGSQLDB	src/common/PGDBConnectionPool.cpp	/^PGSQLDB::PGSQLDB (const std::string & port, const std::string & host,$/;"	f	class:PGSQLDB
PGSQLDB	src/common/PGDBConnectionPool.h	/^class PGSQLDB {$/;"	c
PREFIX	src/makefile	/^PREFIX=\/usr\/local$/;"	m
PRINTF_BUFFLEN	src/fastcgi/fcgiapp.cpp	/^#define PRINTF_BUFFLEN /;"	d	file:
PRINT_COLOR_BLUE	src/common/RedisClusterClient.h	/^#define PRINT_COLOR_BLUE /;"	d
PRINT_COLOR_BROWN	src/common/RedisClusterClient.h	/^#define PRINT_COLOR_BROWN /;"	d
PRINT_COLOR_CYAN	src/common/RedisClusterClient.h	/^#define PRINT_COLOR_CYAN /;"	d
PRINT_COLOR_DARY_GRAY	src/common/RedisClusterClient.h	/^#define PRINT_COLOR_DARY_GRAY /;"	d
PRINT_COLOR_GREEN	src/common/RedisClusterClient.h	/^#define PRINT_COLOR_GREEN /;"	d
PRINT_COLOR_LIGHT_BLUE	src/common/RedisClusterClient.h	/^#define PRINT_COLOR_LIGHT_BLUE /;"	d
PRINT_COLOR_LIGHT_CYAN	src/common/RedisClusterClient.h	/^#define PRINT_COLOR_LIGHT_CYAN /;"	d
PRINT_COLOR_LIGHT_GRAY	src/common/RedisClusterClient.h	/^#define PRINT_COLOR_LIGHT_GRAY /;"	d
PRINT_COLOR_LIGHT_GREEN	src/common/RedisClusterClient.h	/^#define PRINT_COLOR_LIGHT_GREEN /;"	d
PRINT_COLOR_LIGHT_PURPLE	src/common/RedisClusterClient.h	/^#define PRINT_COLOR_LIGHT_PURPLE /;"	d
PRINT_COLOR_LIGHT_RED	src/common/RedisClusterClient.h	/^#define PRINT_COLOR_LIGHT_RED /;"	d
PRINT_COLOR_NONE	src/common/RedisClusterClient.h	/^#define PRINT_COLOR_NONE /;"	d
PRINT_COLOR_PURPLE	src/common/RedisClusterClient.h	/^#define PRINT_COLOR_PURPLE /;"	d
PRINT_COLOR_RED	src/common/RedisClusterClient.h	/^#define PRINT_COLOR_RED /;"	d
PRINT_COLOR_WHITE	src/common/RedisClusterClient.h	/^#define PRINT_COLOR_WHITE /;"	d
PRINT_COLOR_YELLOW	src/common/RedisClusterClient.h	/^#define PRINT_COLOR_YELLOW /;"	d
PTHREAD_CREATE_JOINABLE	src/fastcgi/fcgi_config_x86.h	/^#undef PTHREAD_CREATE_JOINABLE$/;"	d
ParamInfo	src/common/RedisClusterClient.cpp	/^    ParamInfo(const char* command_, size_t command_length_, const std::string* key_, std::pair<std::string, uint16_t>* which_)$/;"	f	struct:ParamInfo
ParamInfo	src/common/RedisClusterClient.cpp	/^struct ParamInfo$/;"	s	file:
Params	src/fastcgi/fcgiapp.cpp	/^typedef struct Params {$/;"	s	file:
Params	src/fastcgi/fcgiapp.cpp	/^} Params;$/;"	t	typeref:struct:Params	file:
ParamsPtr	src/fastcgi/fcgiapp.cpp	/^typedef Params *ParamsPtr;$/;"	t	file:
Pool	src/device_fingerprint/Queue.h	/^    Pool(int capacity)$/;"	f	class:Pool
Pool	src/device_fingerprint/Queue.h	/^class Pool{$/;"	c
ProcessBeginRecord	src/fastcgi/fcgiapp.cpp	/^static int ProcessBeginRecord(int requestId, FCGX_Stream *stream)$/;"	f	file:
ProcessHeader	src/fastcgi/fcgiapp.cpp	/^static int ProcessHeader(FCGI_Header header, FCGX_Stream *stream)$/;"	f	file:
ProcessManagementRecord	src/fastcgi/fcgiapp.cpp	/^static int ProcessManagementRecord(int type, FCGX_Stream *stream)$/;"	f	file:
ProtocolException	src/common/Exception.h	/^	ProtocolException(const std::string& what) : Exception(what){};$/;"	f	class:ProtocolException
ProtocolException	src/common/Exception.h	/^class ProtocolException : public Exception{$/;"	c
PutParam	src/fastcgi/fcgiapp.cpp	/^static void PutParam(ParamsPtr paramsPtr, char *nameValue)$/;"	f	file:
Queue	src/common/Queue.h	/^	Queue(int capacity)$/;"	f	class:Queue
Queue	src/common/Queue.h	/^class Queue{$/;"	c
R3C_ASSERT	src/common/RedisClusterClient.cpp	/^#define R3C_ASSERT(/;"	d	file:
READABLE_UNIX_FD_DROP_DEAD_TIMEVAL	src/fastcgi/fcgios.h	/^#define READABLE_UNIX_FD_DROP_DEAD_TIMEVAL /;"	d
RECORD_CACHE__H	src/device_fingerprint/RecordCache.h	/^#define RECORD_CACHE__H$/;"	d
REDISCLASS_H	src/common/RedisClass.h	/^#define REDISCLASS_H$/;"	d
REDIS_CLUSTER_CLIENT_H	src/common/RedisClusterClient.h	/^#define REDIS_CLUSTER_CLIENT_H$/;"	d
RES_RESULT	src/common/PGDBConnectionPool.cpp	/^RES_RESULT::RES_RESULT(PGresult* result)$/;"	f	class:RES_RESULT
RES_RESULT	src/common/PGDBConnectionPool.h	/^class RES_RESULT$/;"	c
RETRYTIMES	src/common/PGDBConnectionPool.h	/^#define RETRYTIMES /;"	d
RETRY_SLEEP_MILLISECONDS	src/common/RedisClusterClient.h	/^    RETRY_SLEEP_MILLISECONDS = 100,     \/\/ Default value$/;"	e	enum:__anon4
RETRY_TIMES	src/common/RedisClusterClient.h	/^    RETRY_TIMES = 10,                    \/\/ Default value$/;"	e	enum:__anon4
ReadParams	src/fastcgi/fcgiapp.cpp	/^static int ReadParams(Params *paramsPtr, FCGX_Stream *stream)$/;"	f	file:
RecordCache	src/device_fingerprint/RecordCache.cpp	/^RecordCache::RecordCache()$/;"	f	class:RecordCache
RecordCache	src/device_fingerprint/RecordCache.h	/^class RecordCache : public Thread{$/;"	c
Records	src/common/AutoSqlExecuter.h	/^    RES_RESULT * Records() $/;"	f	class:AutoSqlExecuter
RedisConnectionPool	src/common/RedisClass.cpp	/^RedisConnectionPool::RedisConnectionPool(const RedisConnectionPool & redis_connect_pool)$/;"	f	class:RedisConnectionPool
RedisConnectionPool	src/common/RedisClass.cpp	/^RedisConnectionPool::RedisConnectionPool(int sent_flag, unsigned poolsize, $/;"	f	class:RedisConnectionPool
RedisConnectionPool	src/common/RedisClass.h	/^    RedisConnectionPool() {$/;"	f	class:RedisConnectionPool
RedisConnectionPool	src/common/RedisClass.h	/^class RedisConnectionPool {$/;"	c
RedisSentinel	src/common/RedisSentinel.cpp	/^RedisSentinel::RedisSentinel(const std::string& host, const std::string& passwd, int timeout) throw (CRedisException)$/;"	f	class:RedisSentinel
RedisSentinel	src/common/RedisSentinel.h	/^class RedisSentinel:public CRedisClient$/;"	c
ReleaseLock	src/fastcgi/os_unix.cpp	/^static int ReleaseLock(int sock)$/;"	f	file:
ResetDeviceRedis	src/device_fingerprint/RecordCache.cpp	/^void  RecordCache::ResetDeviceRedis()$/;"	f	class:RecordCache
ResetRedis	src/device_fingerprint/RecordCache.cpp	/^void  RecordCache::ResetRedis()$/;"	f	class:RecordCache
SKIP	src/fastcgi/fcgiapp.cpp	/^#define SKIP /;"	d	file:
SO_CFLAGS	src/makefile	/^SO_CFLAGS:=-Wall -shared -fPIC -O0 -g $(INCLUDE) $(LOG) -D_DEBUG -D__STDC_FORMAT_MACROS$/;"	m
STACK_SIZE	src/common/Thread.h	/^	const static int STACK_SIZE = (256 * 1024);$/;"	m	class:Thread
STDC_HEADERS	src/fastcgi/fcgi_config.h	/^#define STDC_HEADERS /;"	d
STDC_HEADERS	src/fastcgi/fcgi_config_x86.h	/^#undef STDC_HEADERS$/;"	d
STDERR_FILENO	src/fastcgi/fcgios.h	/^#define STDERR_FILENO /;"	d
STDIN_FILENO	src/fastcgi/fcgios.h	/^#define STDIN_FILENO /;"	d
STDOUT_FILENO	src/fastcgi/fcgios.h	/^#define STDOUT_FILENO /;"	d
STREAM_RECORD	src/fastcgi/fcgiapp.cpp	/^#define STREAM_RECORD /;"	d	file:
SaveToDB	src/device_fingerprint/RecordCache.cpp	/^bool RecordCache::SaveToDB(const std::string& sql_buf)$/;"	f	class:RecordCache
Serialize	src/common/Json.cpp	/^std::string json::Serialize(const Value& v)$/;"	f	class:json
Serialize	src/t/Json.cpp	/^std::string json::Serialize(const Value& v)$/;"	f	class:json
SerializeArray	src/common/Json.cpp	/^std::string SerializeArray(const Array& a)$/;"	f
SerializeArray	src/t/Json.cpp	/^std::string SerializeArray(const Array& a)$/;"	f
SerializeValue	src/common/Json.cpp	/^std::string SerializeValue(const Value& v)$/;"	f
SerializeValue	src/t/Json.cpp	/^std::string SerializeValue(const Value& v)$/;"	f
SetError	src/fastcgi/fcgiapp.cpp	/^static void SetError(FCGX_Stream *stream, int FCGI_errno)$/;"	f	file:
SetReaderType	src/fastcgi/fcgiapp.cpp	/^static FCGX_Stream *SetReaderType(FCGX_Stream *stream, int streamType)$/;"	f	file:
SlotInfo	src/common/RedisClusterClient.cpp	/^struct SlotInfo$/;"	s	file:
SockAddrUnion	src/fastcgi/os_unix.cpp	/^union SockAddrUnion {$/;"	u	file:
StackDepthType	src/common/Json.cpp	/^    enum StackDepthType$/;"	g	namespace:json	file:
StackDepthType	src/t/Json.cpp	/^    enum StackDepthType$/;"	g	namespace:json	file:
StringCopy	src/fastcgi/fcgiapp.cpp	/^static char *StringCopy(char *str)$/;"	f	file:
StringVal	src/common/Json.hpp	/^        StringVal,$/;"	e	enum:json::ValueType
StringVal	src/t/Json.hpp	/^        StringVal,$/;"	e	enum:json::ValueType
THREAD_H	src/common/Thread.h	/^#define THREAD_H$/;"	d
THROW_REDIS_EXCEPTION	src/common/RedisClusterClient.cpp	/^#define THROW_REDIS_EXCEPTION(/;"	d	file:
THROW_REDIS_EXCEPTION_WITH_NODE	src/common/RedisClusterClient.cpp	/^#define THROW_REDIS_EXCEPTION_WITH_NODE(/;"	d	file:
THROW_REDIS_EXCEPTION_WITH_NODE_AND_COMMAND	src/common/RedisClusterClient.cpp	/^#define THROW_REDIS_EXCEPTION_WITH_NODE_AND_COMMAND(/;"	d	file:
TRUE	src/fastcgi/fcgimisc.h	/^#define TRUE /;"	d
Thread	src/common/Thread.cpp	/^Thread::Thread(int stack_size)$/;"	f	class:Thread
Thread	src/common/Thread.h	/^class Thread$/;"	c
ToArray	src/common/Json.cpp	/^Array Value::ToArray() const        $/;"	f	class:Value
ToArray	src/t/Json.cpp	/^Array Value::ToArray() const        $/;"	f	class:Value
ToBool	src/common/Json.cpp	/^bool Value::ToBool() const        $/;"	f	class:Value
ToBool	src/common/Json.hpp	/^            bool                ToBool(bool def) const                    {return (mValueType == BoolVal) ? mBoolVal : def;}$/;"	f	class:json::Value
ToBool	src/t/Json.cpp	/^bool Value::ToBool() const        $/;"	f	class:Value
ToBool	src/t/Json.hpp	/^            bool                ToBool(bool def) const                    {return (mValueType == BoolVal) ? mBoolVal : def;}$/;"	f	class:json::Value
ToDouble	src/common/Json.cpp	/^double Value::ToDouble() const    $/;"	f	class:Value
ToDouble	src/common/Json.hpp	/^            double                ToDouble(double def) const                {return IsNumeric() ? mDoubleVal : def;}$/;"	f	class:json::Value
ToDouble	src/t/Json.cpp	/^double Value::ToDouble() const    $/;"	f	class:Value
ToDouble	src/t/Json.hpp	/^            double                ToDouble(double def) const                {return IsNumeric() ? mDoubleVal : def;}$/;"	f	class:json::Value
ToFloat	src/common/Json.cpp	/^float Value::ToFloat() const        $/;"	f	class:Value
ToFloat	src/common/Json.hpp	/^            float                ToFloat(float def) const                {return IsNumeric() ? mFloatVal : def;}$/;"	f	class:json::Value
ToFloat	src/t/Json.cpp	/^float Value::ToFloat() const        $/;"	f	class:Value
ToFloat	src/t/Json.hpp	/^            float                ToFloat(float def) const                {return IsNumeric() ? mFloatVal : def;}$/;"	f	class:json::Value
ToInt	src/common/Json.cpp	/^int Value::ToInt() const        $/;"	f	class:Value
ToInt	src/common/Json.hpp	/^            int                    ToInt(int def) const                    {return IsNumeric() ? mIntVal : def;}$/;"	f	class:json::Value
ToInt	src/t/Json.cpp	/^int Value::ToInt() const        $/;"	f	class:Value
ToInt	src/t/Json.hpp	/^            int                    ToInt(int def) const                    {return IsNumeric() ? mIntVal : def;}$/;"	f	class:json::Value
ToObject	src/common/Json.cpp	/^Object Value::ToObject() const    $/;"	f	class:Value
ToObject	src/t/Json.cpp	/^Object Value::ToObject() const    $/;"	f	class:Value
ToString	src/common/Json.cpp	/^const std::string& Value::ToString() const    $/;"	f	class:Value
ToString	src/common/Json.cpp	/^std::string Array::ToString()$/;"	f	class:Array
ToString	src/common/Json.hpp	/^            const std::string&    ToString(const std::string& def) const    {return (mValueType == StringVal) ? mStringVal : def;}$/;"	f	class:json::Value
ToString	src/t/Json.cpp	/^const std::string& Value::ToString() const    $/;"	f	class:Value
ToString	src/t/Json.hpp	/^            const std::string&    ToString(const std::string& def) const    {return (mValueType == StringVal) ? mStringVal : def;}$/;"	f	class:json::Value
Trim	src/common/Json.cpp	/^static std::string Trim(const std::string& str)$/;"	f	file:
Trim	src/t/Json.cpp	/^static std::string Trim(const std::string& str)$/;"	f	file:
UNUSED	src/common/RedisClusterClient.cpp	/^#  define UNUSED(/;"	d	file:
USE_LOCKING	src/fastcgi/fcgi_config_x86.h	/^#undef USE_LOCKING$/;"	d
UTILITY_H	src/common/Utility.h	/^#define UTILITY_H$/;"	d
UnescapeJSONString	src/common/Json.cpp	/^static std::string UnescapeJSONString(const std::string& str)$/;"	f	file:
UnescapeJSONString	src/t/Json.cpp	/^static std::string UnescapeJSONString(const std::string& str)$/;"	f	file:
UrlDecode	src/common/Utility.cpp	/^string Utility::UrlDecode(const std::string& src)$/;"	f	class:Utility
UrlEncode	src/common/Utility.cpp	/^string Utility::UrlEncode(const string& src)$/;"	f	class:Utility
Utility	src/common/Utility.h	/^class Utility$/;"	c
VERSION	src/fastcgi/fcgi_config.h	/^#define VERSION /;"	d
Value	src/common/Json.cpp	/^Value::Value(const Value& v) : mValueType(v.mValueType)$/;"	f	class:Value
Value	src/common/Json.hpp	/^            Value()                     : mValueType(NULLVal), mIntVal(0), mFloatVal(0), mDoubleVal(0), mBoolVal(false) {}$/;"	f	class:json::Value
Value	src/common/Json.hpp	/^            Value(bool v)                : mValueType(BoolVal), mIntVal(), mFloatVal(), mDoubleVal(), mBoolVal(v) {}$/;"	f	class:json::Value
Value	src/common/Json.hpp	/^            Value(const Array& v)        : mValueType(ArrayVal), mIntVal(), mFloatVal(), mDoubleVal(), mArrayVal(v), mBoolVal(false) {}$/;"	f	class:json::Value
Value	src/common/Json.hpp	/^            Value(const Object& v)        : mValueType(ObjectVal), mIntVal(), mFloatVal(), mDoubleVal(), mObjectVal(v), mBoolVal(false) {}$/;"	f	class:json::Value
Value	src/common/Json.hpp	/^            Value(const char* v)        : mValueType(StringVal), mIntVal(), mFloatVal(), mDoubleVal(), mStringVal(v), mBoolVal(false) {}$/;"	f	class:json::Value
Value	src/common/Json.hpp	/^            Value(const std::string& v) : mValueType(StringVal), mIntVal(), mFloatVal(), mDoubleVal(), mStringVal(v), mBoolVal(false) {}$/;"	f	class:json::Value
Value	src/common/Json.hpp	/^            Value(double v)                : mValueType(DoubleVal), mIntVal((int)v), mFloatVal((float)v), mDoubleVal(v), mBoolVal(false) {}$/;"	f	class:json::Value
Value	src/common/Json.hpp	/^            Value(float v)                : mValueType(FloatVal), mIntVal((int)v), mFloatVal(v), mDoubleVal((double)v), mBoolVal(false) {}$/;"	f	class:json::Value
Value	src/common/Json.hpp	/^            Value(int v)                : mValueType(IntVal), mIntVal(v), mFloatVal((float)v), mDoubleVal((double)v), mBoolVal(false) {}$/;"	f	class:json::Value
Value	src/common/Json.hpp	/^    class Value$/;"	c	namespace:json
Value	src/t/Json.cpp	/^Value::Value(const Value& v) : mValueType(v.mValueType)$/;"	f	class:Value
Value	src/t/Json.hpp	/^            Value()                     : mValueType(NULLVal), mIntVal(0), mFloatVal(0), mDoubleVal(0), mBoolVal(false) {}$/;"	f	class:json::Value
Value	src/t/Json.hpp	/^            Value(bool v)                : mValueType(BoolVal), mIntVal(), mFloatVal(), mDoubleVal(), mBoolVal(v) {}$/;"	f	class:json::Value
Value	src/t/Json.hpp	/^            Value(const Array& v)        : mValueType(ArrayVal), mIntVal(), mFloatVal(), mDoubleVal(), mArrayVal(v), mBoolVal(false) {}$/;"	f	class:json::Value
Value	src/t/Json.hpp	/^            Value(const Object& v)        : mValueType(ObjectVal), mIntVal(), mFloatVal(), mDoubleVal(), mObjectVal(v), mBoolVal(false) {}$/;"	f	class:json::Value
Value	src/t/Json.hpp	/^            Value(const char* v)        : mValueType(StringVal), mIntVal(), mFloatVal(), mDoubleVal(), mStringVal(v), mBoolVal(false) {}$/;"	f	class:json::Value
Value	src/t/Json.hpp	/^            Value(const std::string& v) : mValueType(StringVal), mIntVal(), mFloatVal(), mDoubleVal(), mStringVal(v), mBoolVal(false) {}$/;"	f	class:json::Value
Value	src/t/Json.hpp	/^            Value(double v)                : mValueType(DoubleVal), mIntVal((int)v), mFloatVal((float)v), mDoubleVal(v), mBoolVal(false) {}$/;"	f	class:json::Value
Value	src/t/Json.hpp	/^            Value(float v)                : mValueType(FloatVal), mIntVal((int)v), mFloatVal(v), mDoubleVal((double)v), mBoolVal(false) {}$/;"	f	class:json::Value
Value	src/t/Json.hpp	/^            Value(int v)                : mValueType(IntVal), mIntVal(v), mFloatVal((float)v), mDoubleVal((double)v), mBoolVal(false) {}$/;"	f	class:json::Value
Value	src/t/Json.hpp	/^    class Value$/;"	c	namespace:json
ValueMap	src/common/Json.hpp	/^            typedef std::map<std::string, Value> ValueMap;$/;"	t	class:json::Object
ValueMap	src/t/Json.hpp	/^            typedef std::map<std::string, Value> ValueMap;$/;"	t	class:json::Object
ValueType	src/common/Json.hpp	/^    enum ValueType$/;"	g	namespace:json
ValueType	src/t/Json.hpp	/^    enum ValueType$/;"	g	namespace:json
ValueVector	src/common/Json.hpp	/^            typedef std::vector<Value> ValueVector;$/;"	t	class:json::Array
ValueVector	src/t/Json.hpp	/^            typedef std::vector<Value> ValueVector;$/;"	t	class:json::Array
WIN32_LEAN_AND_MEAN	src/fastcgi/fcgios.h	/^#define WIN32_LEAN_AND_MEAN /;"	d
WriteCloseRecords	src/fastcgi/fcgiapp.cpp	/^static void WriteCloseRecords(struct FCGX_Stream *stream)$/;"	f	file:
X_OK	src/fastcgi/fcgios.h	/^#define X_OK /;"	d
ZADDFLAG	src/common/RedisClusterClient.h	/^enum ZADDFLAG$/;"	g
Z_CH	src/common/RedisClusterClient.h	/^    Z_CH  \/\/ Modify the return value from the number of new elements added$/;"	e	enum:ZADDFLAG
Z_NS	src/common/RedisClusterClient.h	/^    Z_NS, \/\/ Don't set options$/;"	e	enum:ZADDFLAG
Z_NX	src/common/RedisClusterClient.h	/^    Z_NX, \/\/ Don't update already existing elements. Always add new elements.$/;"	e	enum:ZADDFLAG
Z_XX	src/common/RedisClusterClient.h	/^    Z_XX, \/\/ Only update elements that already exist. Never add elements.$/;"	e	enum:ZADDFLAG
_BASE64UTILS_H_	src/common/base64.h	/^#define _BASE64UTILS_H_$/;"	d
_BASE64_H_	src/common/base64.hpp	/^#define _BASE64_H_$/;"	d
_BASE64_INCLUDE__H__	src/base64.h	/^#define _BASE64_INCLUDE__H__ /;"	d
_CEXCEPTION_H	src/common/cexception.h	/^#define _CEXCEPTION_H$/;"	d
_CLIENTDATA	src/fastcgi/fcgios.h	/^#define _CLIENTDATA$/;"	d
_DEFINES_H_	src/device_fingerprint/Defines.h	/^#define _DEFINES_H_$/;"	d
_DEVBUSS_H	src/device_fingerprint/DevBuss.h	/^#define _DEVBUSS_H$/;"	d
_DEVDEVF_H	src/device_fingerprint/DevDevf.h	/^#define _DEVDEVF_H$/;"	d
_DEVGEVTLIST_H	src/device_fingerprint/DevGevtList.h	/^#define _DEVGEVTLIST_H$/;"	d
_DEVGTMLIST_H	src/device_fingerprint/DevGtmList.h	/^#define _DEVGTMLIST_H$/;"	d
_DEVLEVT_H	src/device_fingerprint/DevLevt.h	/^#define _DEVLEVT_H$/;"	d
_DEVTIMER_H	src/device_fingerprint/DevTimer.h	/^#define _DEVTIMER_H$/;"	d
_DEVUEVT_H	src/device_fingerprint/DevUevt.h	/^#define _DEVUEVT_H$/;"	d
_DEVUPLIST_H	src/device_fingerprint/DevUpList.h	/^#define _DEVUPLIST_H$/;"	d
_FASTCGI_H	src/fastcgi/fastcgi.h	/^#define _FASTCGI_H$/;"	d
_FCGIAPP_H	src/fastcgi/fcgiapp.h	/^#define _FCGIAPP_H$/;"	d
_FCGIMISC_H	src/fastcgi/fcgimisc.h	/^#define _FCGIMISC_H$/;"	d
_FCGIOS_H	src/fastcgi/fcgios.h	/^#define _FCGIOS_H$/;"	d
_FCGI_STDIO	src/fastcgi/fcgi_stdio.h	/^#define _FCGI_STDIO /;"	d
_HTTPREQUESTPOOL_H	src/device_fingerprint/HTTPRequestPool.h	/^#define _HTTPREQUESTPOOL_H$/;"	d
_HTTP_REQUEST_HANDLER_	src/device_fingerprint/HTTPRequestHandler.h	/^#define _HTTP_REQUEST_HANDLER_$/;"	d
_HTTP_REQUEST_H_	src/device_fingerprint/HTTPRequest.h	/^#define _HTTP_REQUEST_H_$/;"	d
_LOG4CPLUS_LOGGING_MACROS_HEADER_	src/common/Logger.h	/^#define _LOG4CPLUS_LOGGING_MACROS_HEADER_$/;"	d
_LOGGER_H_	src/common/Logger.h	/^#define _LOGGER_H_$/;"	d
_MUTEXTLOCK_H	src/common/SDMutexLock.h	/^#define  _MUTEXTLOCK_H$/;"	d
_NAME	src/fastcgi/fcgi_lib.h	/^#define _NAME /;"	d
_PGDBCONNECTIONPOOL_H	src/common/PGDBConnectionPool.h	/^#define _PGDBCONNECTIONPOOL_H$/;"	d
_QUEUE_H	src/common/Queue.h	/^#define _QUEUE_H$/;"	d
_QUEUE_H	src/device_fingerprint/Queue.h	/^#define _QUEUE_H$/;"	d
_REDIS_SENTINEL_H	src/common/RedisSentinel.h	/^#define _REDIS_SENTINEL_H$/;"	d
_VALUE	src/fastcgi/fcgi_lib.h	/^#define _VALUE /;"	d
__SUPER_EASY_JSON_H__	src/common/Json.hpp	/^#define __SUPER_EASY_JSON_H__$/;"	d
__SUPER_EASY_JSON_H__	src/t/Json.hpp	/^#define __SUPER_EASY_JSON_H__$/;"	d
_ap	src/common/RedisClusterClient.cpp	/^    va_list& _ap;$/;"	m	struct:va_list_helper	file:
_app	src/common/dispatch.types.hpp	/^      string _app;$/;"	m	struct:dsn::tmx::analyse_req
_app	src/common/dispatch.types.hpp	/^      string _app;$/;"	m	struct:dsn::tmx::analyse_resp
_app	src/common/dispatch.types.hpp	/^      string _app;$/;"	m	struct:dsn::tmx::decise_req
_app	src/common/dispatch.types.hpp	/^      string _app;$/;"	m	struct:dsn::tmx::decise_resp
_app	src/common/dispatch.types.hpp	/^      string _app;$/;"	m	struct:dsn::tmx::dispatch_req
_app	src/common/dispatch.types.hpp	/^      string _app;$/;"	m	struct:dsn::tmx::dispatch_resp
_argc	src/common/RedisClusterClient.cpp	/^    int _argc;$/;"	m	class:FreeArgvHelper	file:
_argv	src/common/RedisClusterClient.cpp	/^    char** _argv;$/;"	m	class:FreeArgvHelper	file:
_argv_len	src/common/RedisClusterClient.cpp	/^    size_t* _argv_len;$/;"	m	class:FreeArgvHelper	file:
_cluster_mode	src/common/RedisClusterClient.h	/^    bool _cluster_mode;$/;"	m	class:CRedisClient
_code	src/common/AutoSqlExecuter.h	/^    int _code;$/;"	m	class:AutoSqlExecuter
_command	src/common/RedisClusterClient.h	/^    std::string _command;$/;"	m	class:CRedisException
_connect_timeout_milliseconds	src/common/RedisClusterClient.h	/^    int _connect_timeout_milliseconds;$/;"	m	class:CRedisClient
_data_timeout_milliseconds	src/common/RedisClusterClient.h	/^    int _data_timeout_milliseconds; \/\/ read & write timeout$/;"	m	class:CRedisClient
_db_lock	src/device_fingerprint/RecordCache.h	/^        Lock _db_lock;$/;"	m	class:RecordCache
_db_table_name	src/device_fingerprint/RecordCache.h	/^        std::string  _db_table_name;$/;"	m	class:RecordCache
_eid	src/common/dispatch.types.hpp	/^      string _eid;$/;"	m	struct:dsn::tmx::analyse_req
_eid	src/common/dispatch.types.hpp	/^      string _eid;$/;"	m	struct:dsn::tmx::analyse_resp
_eid	src/common/dispatch.types.hpp	/^      string _eid;$/;"	m	struct:dsn::tmx::decise_req
_eid	src/common/dispatch.types.hpp	/^      string _eid;$/;"	m	struct:dsn::tmx::decise_resp
_eid	src/common/dispatch.types.hpp	/^      string _eid;$/;"	m	struct:dsn::tmx::dispatch_req
_eid	src/common/dispatch.types.hpp	/^      string _eid;$/;"	m	struct:dsn::tmx::dispatch_resp
_errcode	src/common/RedisClusterClient.h	/^    const int _errcode;$/;"	m	class:CRedisException
_errmsg	src/common/RedisClusterClient.h	/^    const std::string _errmsg;$/;"	m	class:CRedisException
_etype	src/common/dispatch.types.hpp	/^      string _etype;$/;"	m	struct:dsn::tmx::analyse_req
_etype	src/common/dispatch.types.hpp	/^      string _etype;$/;"	m	struct:dsn::tmx::analyse_resp
_etype	src/common/dispatch.types.hpp	/^      string _etype;$/;"	m	struct:dsn::tmx::decise_req
_etype	src/common/dispatch.types.hpp	/^      string _etype;$/;"	m	struct:dsn::tmx::decise_resp
_etype	src/common/dispatch.types.hpp	/^      string _etype;$/;"	m	struct:dsn::tmx::dispatch_req
_etype	src/common/dispatch.types.hpp	/^      string _etype;$/;"	m	struct:dsn::tmx::dispatch_resp
_fcgi_sF	src/fastcgi/fcgi_stdio.cpp	/^FCGI_FILE _fcgi_sF[3];$/;"	v
_file	src/common/RedisClusterClient.h	/^    const std::string _file;$/;"	m	class:CRedisException
_instance	src/device_fingerprint/RecordCache.cpp	/^RecordCache * RecordCache::_instance = NULL;$/;"	m	class:RecordCache	file:
_instance	src/device_fingerprint/RecordCache.h	/^        static RecordCache * _instance;$/;"	m	class:RecordCache
_instance_lock	src/device_fingerprint/RecordCache.cpp	/^Lock RecordCache::_instance_lock ;$/;"	m	class:RecordCache	file:
_instance_lock	src/device_fingerprint/RecordCache.h	/^        static Lock _instance_lock;$/;"	m	class:RecordCache
_key	src/common/RedisClusterClient.h	/^    std::string _key;$/;"	m	class:CRedisException
_line	src/common/RedisClusterClient.h	/^    const int _line;$/;"	m	class:CRedisException
_need_read	src/common/AutoSqlExecuter.h	/^    bool _need_read;$/;"	m	class:AutoSqlExecuter
_node	src/fastcgi/fcgi_lib.h	/^typedef struct _node {$/;"	s
_node_ip	src/common/RedisClusterClient.h	/^    const std::string _node_ip;$/;"	m	class:CRedisException
_node_port	src/common/RedisClusterClient.h	/^    const uint16_t _node_port;$/;"	m	class:CRedisException
_nodes	src/common/RedisClusterClient.h	/^    std::vector<std::pair<std::string, uint16_t> > _nodes;$/;"	m	class:CRedisClient
_nodes	src/common/RedisSentinel.h	/^    std::vector<std::pair<std::string, uint16_t> > _nodes;$/;"	m	class:RedisSentinel
_nodes_string	src/common/RedisClusterClient.h	/^    std::string _nodes_string;$/;"	m	class:CRedisClient
_pgsql	src/common/AutoSqlExecuter.h	/^    PGSQLDB * _pgsql;$/;"	m	class:AutoSqlExecuter
_pload	src/common/dispatch.types.hpp	/^      string _pload;$/;"	m	struct:dsn::tmx::analyse_req
_pload	src/common/dispatch.types.hpp	/^      string _pload;$/;"	m	struct:dsn::tmx::decise_req
_pload	src/common/dispatch.types.hpp	/^      string _pload;$/;"	m	struct:dsn::tmx::dispatch_req
_pool	src/common/AutoSqlExecuter.h	/^    PGDBConnectionPool * _pool;$/;"	m	class:AutoSqlExecuter
_records	src/common/AutoSqlExecuter.h	/^    RES_RESULT * _records;$/;"	m	class:AutoSqlExecuter
_redis_context	src/common/RedisClusterClient.h	/^    redisContext* _redis_context; \/\/ Standalone mode$/;"	m	class:CRedisClient
_redis_contexts	src/common/RedisClusterClient.h	/^    std::map<std::pair<uint32_t, uint16_t>, redisContext*> _redis_contexts; \/\/ Key is node (IP&port)$/;"	m	class:CRedisClient
_res	src/common/dispatch.types.hpp	/^      string _res;$/;"	m	struct:dsn::tmx::analyse_resp
_res	src/common/dispatch.types.hpp	/^      string _res;$/;"	m	struct:dsn::tmx::decise_resp
_res	src/common/dispatch.types.hpp	/^      string _res;$/;"	m	struct:dsn::tmx::dispatch_resp
_retry_sleep_milliseconds	src/common/RedisClusterClient.h	/^    int _retry_sleep_milliseconds;$/;"	m	class:CRedisClient
_retry_times	src/common/RedisClusterClient.h	/^    int _retry_times;$/;"	m	class:CRedisClient
_slots	src/common/RedisClusterClient.h	/^    std::vector<struct SlotInfo*> _slots;$/;"	m	class:CRedisClient
_status	src/common/dispatch.types.hpp	/^      int32_t _status;$/;"	m	struct:dsn::tmx::analyse_resp
_status	src/common/dispatch.types.hpp	/^      int32_t _status;$/;"	m	struct:dsn::tmx::decise_resp
_status	src/common/dispatch.types.hpp	/^      int32_t _status;$/;"	m	struct:dsn::tmx::dispatch_resp
_stricmp	src/common/Json.cpp	/^#define _stricmp /;"	d	file:
_stricmp	src/t/Json.cpp	/^#define _stricmp /;"	d	file:
_tid	src/common/dispatch.types.hpp	/^      string _tid;$/;"	m	struct:dsn::tmx::analyse_req
_tid	src/common/dispatch.types.hpp	/^      string _tid;$/;"	m	struct:dsn::tmx::analyse_resp
_tid	src/common/dispatch.types.hpp	/^      string _tid;$/;"	m	struct:dsn::tmx::decise_req
_tid	src/common/dispatch.types.hpp	/^      string _tid;$/;"	m	struct:dsn::tmx::decise_resp
_tid	src/common/dispatch.types.hpp	/^      string _tid;$/;"	m	struct:dsn::tmx::dispatch_req
_tid	src/common/dispatch.types.hpp	/^      string _tid;$/;"	m	struct:dsn::tmx::dispatch_resp
acceptCalled	src/fastcgi/fcgi_stdio.cpp	/^static int acceptCalled = FALSE;$/;"	v	file:
account_card_bind	src/device_fingerprint/HTTPRequestPool.h	/^    std::vector<pair<HTTPRequest*,bool> >account_card_bind;$/;"	m	class:HTTPRequestPool
account_card_bind_fb	src/device_fingerprint/HTTPRequestPool.h	/^    std::vector<pair<HTTPRequest*,bool> >account_card_bind_fb;$/;"	m	class:HTTPRequestPool
account_card_unbind	src/device_fingerprint/HTTPRequestPool.h	/^    std::vector<pair<HTTPRequest*,bool> >account_card_unbind;$/;"	m	class:HTTPRequestPool
account_card_unbind_fb	src/device_fingerprint/HTTPRequestPool.h	/^    std::vector<pair<HTTPRequest*,bool> >account_card_unbind_fb;$/;"	m	class:HTTPRequestPool
account_login	src/device_fingerprint/HTTPRequestPool.h	/^    std::vector<pair<HTTPRequest*,bool> >account_login;$/;"	m	class:HTTPRequestPool
account_login_fb	src/device_fingerprint/HTTPRequestPool.h	/^    std::vector<pair<HTTPRequest*,bool> >account_login_fb;$/;"	m	class:HTTPRequestPool
account_login_valid_fb	src/device_fingerprint/HTTPRequestPool.h	/^    std::vector<pair<HTTPRequest*,bool> >account_login_valid_fb;$/;"	m	class:HTTPRequestPool
account_pay	src/device_fingerprint/HTTPRequestPool.h	/^    std::vector<pair<HTTPRequest*,bool> >account_pay;$/;"	m	class:HTTPRequestPool
account_pay_fb	src/device_fingerprint/HTTPRequestPool.h	/^    std::vector<pair<HTTPRequest*,bool> >account_pay_fb;$/;"	m	class:HTTPRequestPool
account_reg	src/device_fingerprint/HTTPRequestPool.h	/^    std::vector<pair<HTTPRequest*,bool> >account_reg;$/;"	m	class:HTTPRequestPool
account_reg_feedback	src/device_fingerprint/HTTPRequestPool.h	/^    std::vector<pair<HTTPRequest*,bool> >account_reg_feedback;$/;"	m	class:HTTPRequestPool
account_reg_valid_fb	src/device_fingerprint/HTTPRequestPool.h	/^    std::vector<pair<HTTPRequest*,bool> >account_reg_valid_fb;$/;"	m	class:HTTPRequestPool
account_service_db_pool	src/device_fingerprint/RecordCache.h	/^        PGDBConnectionPool account_service_db_pool;$/;"	m	class:RecordCache
account_service_redis_pool	src/device_fingerprint/RecordCache.h	/^        RedisConnectionPool *account_service_redis_pool;$/;"	m	class:RecordCache
add_timeout_to_func	src/common/TimeoutWrapper.h	/^#define add_timeout_to_func(/;"	d
aesDecrypt	src/common/CryptAES.cpp	/^string* CryptAES::aesDecrypt(const std::string& ciphertext, const std::string& key)$/;"	f	class:CryptAES
aesDecrypt	src/common/CryptAES.cpp	/^void CryptAES::aesDecrypt(u_char *ciphertext, size_t encsiz, const std::string& key, u_char *result, size_t &resLen)$/;"	f	class:CryptAES
aid	src/device_fingerprint/HTTPRequest.h	/^    std::string aid;\/\/应用标识$/;"	m	class:HTTPRequest
allocBuffer	src/common/Queue.h	/^	virtual T* allocBuffer(int capacity)$/;"	f	class:Queue
allocBuffer	src/device_fingerprint/Queue.h	/^    virtual T* allocBuffer(int capacity)$/;"	f	class:Pool
analyse_req	src/common/dispatch.types.hpp	/^    struct analyse_req$/;"	s	namespace:dsn::tmx
analyse_resp	src/common/dispatch.types.hpp	/^    struct analyse_resp$/;"	s	namespace:dsn::tmx
any2string	src/common/RedisClusterClient.h	/^inline std::string any2string(T m)$/;"	f
appStatus	src/fastcgi/fcgiapp.h	/^    int appStatus;$/;"	m	struct:FCGX_Request
appStatusB0	src/fastcgi/fastcgi.h	/^    unsigned char appStatusB0;$/;"	m	struct:__anon8
appStatusB1	src/fastcgi/fastcgi.h	/^    unsigned char appStatusB1;$/;"	m	struct:__anon8
appStatusB2	src/fastcgi/fastcgi.h	/^    unsigned char appStatusB2;$/;"	m	struct:__anon8
appStatusB3	src/fastcgi/fastcgi.h	/^    unsigned char appStatusB3;$/;"	m	struct:__anon8
array	src/common/RedisClusterClient.cpp	/^    const std::vector<std::string>* array;$/;"	m	struct:ParamInfo	file:
asyncIoInUse	src/fastcgi/os_unix.cpp	/^static int asyncIoInUse = FALSE;$/;"	v	file:
asyncIoTable	src/fastcgi/os_unix.cpp	/^static AioInfo *asyncIoTable = NULL;$/;"	v	file:
asyncIoTableSize	src/fastcgi/os_unix.cpp	/^static int asyncIoTableSize = 16;$/;"	v	file:
atouint32	src/common/Utility.cpp	/^uint32_t Utility::atouint32(char* ptr, int32_t len)$/;"	f	class:Utility
atouint64	src/common/Utility.cpp	/^uint32_t Utility::atouint64(char* ptr, int32_t len)$/;"	f	class:Utility
auth_connect	src/common/RedisClusterClient.cpp	/^bool CRedisClient::auth_connect(redisContext *redis_context)$/;"	f	class:CRedisClient
base64Pre	src/common/Utility.cpp	/^int Utility::base64Pre(const std::string & str64, char* des)$/;"	f	class:Utility
base64Pre	src/t/main.cpp	/^int base64Pre(const std::string & str64, char* des)$/;"	f
begin	src/common/Json.cpp	/^Array::ValueVector::const_iterator Array::begin() const$/;"	f	class:Array
begin	src/common/Json.cpp	/^Array::ValueVector::iterator Array::begin()$/;"	f	class:Array
begin	src/common/Json.cpp	/^Object::ValueMap::const_iterator Object::begin() const$/;"	f	class:Object
begin	src/common/Json.cpp	/^Object::ValueMap::iterator Object::begin()$/;"	f	class:Object
begin	src/t/Json.cpp	/^Array::ValueVector::const_iterator Array::begin() const$/;"	f	class:Array
begin	src/t/Json.cpp	/^Array::ValueVector::iterator Array::begin()$/;"	f	class:Array
begin	src/t/Json.cpp	/^Object::ValueMap::const_iterator Object::begin() const$/;"	f	class:Object
begin	src/t/Json.cpp	/^Object::ValueMap::iterator Object::begin()$/;"	f	class:Object
body	src/fastcgi/fastcgi.h	/^    FCGI_BeginRequestBody body;$/;"	m	struct:__anon7
body	src/fastcgi/fastcgi.h	/^    FCGI_EndRequestBody body;$/;"	m	struct:__anon9
body	src/fastcgi/fastcgi.h	/^    FCGI_UnknownTypeBody body;$/;"	m	struct:__anon11
buf	src/fastcgi/fcgio.h	/^    char_type * buf;$/;"	m	class:fcgi_streambuf
buf	src/fastcgi/os_unix.cpp	/^    void *buf;$/;"	m	struct:__anon15	file:
buff	src/fastcgi/fcgiapp.cpp	/^    unsigned char *buff;      \/* buffer after alignment *\/$/;"	m	struct:FCGX_Stream_Data	file:
buffStop	src/fastcgi/fcgiapp.cpp	/^    unsigned char *buffStop;  \/* reader: last valid byte + 1 of entire buffer.$/;"	m	struct:FCGX_Stream_Data	file:
bufflen	src/fastcgi/fcgiapp.cpp	/^    int bufflen;              \/* number of bytes buff can store *\/$/;"	m	struct:FCGX_Stream_Data	file:
bufsize	src/fastcgi/fcgio.h	/^    std::streamsize bufsize;$/;"	m	class:fcgi_streambuf
cacheHasKey	src/device_fingerprint/RecordCache.cpp	/^bool RecordCache::cacheHasKey(const string& key, string &value)$/;"	f	class:RecordCache
calc_argc	src/common/RedisClusterClient.cpp	/^int CRedisClient::calc_argc(const struct ParamInfo* param_info) const$/;"	f	class:CRedisClient
cgi_val	src/fastcgi/fcgi_lib.cpp	/^char *cgi_val(llist l, char *name)$/;"	f
char_type	src/fastcgi/fcgio.h	/^typedef char char_type;$/;"	t
checkBuffer	src/common/Queue.h	/^	bool checkBuffer()$/;"	f	class:Queue
checkBuffer	src/device_fingerprint/Queue.h	/^    bool checkBuffer()$/;"	f	class:Pool
choose_node	src/common/RedisClusterClient.cpp	/^void CRedisClient::choose_node(int seed_factor, std::pair<std::string, uint16_t>* node) const$/;"	f	class:CRedisClient
clear	src/common/RedisClusterClient.cpp	/^void CRedisClient::clear()$/;"	f	class:CRedisClient
clear_redis_contexts	src/common/RedisClusterClient.cpp	/^void CRedisClient::clear_redis_contexts()$/;"	f	class:CRedisClient
clear_slots	src/common/RedisClusterClient.cpp	/^void CRedisClient::clear_slots()$/;"	f	class:CRedisClient
clear_status	src/device_fingerprint/HTTPRequest.cpp	/^void HTTPRequest::clear_status()$/;"	f	class:HTTPRequest
clearerr	src/fastcgi/fcgi_stdio.h	/^#define	clearerr /;"	d
clearerr	src/fastcgi/fcgi_stdio.h	/^#undef  clearerr$/;"	d
clientData	src/fastcgi/os_unix.cpp	/^    ClientData clientData;	    \/* caller private data *\/$/;"	m	struct:__anon15	file:
cluster_mode	src/common/RedisClusterClient.cpp	/^bool CRedisClient::cluster_mode() const$/;"	f	class:CRedisClient
code	src/device_fingerprint/DevDevf.h	/^        string code;$/;"	m	class:DevDevf
code	src/device_fingerprint/DevGtmList.h	/^        string code;$/;"	m	class:DevGtmList
code	src/device_fingerprint/DevTimer.h	/^        string code;$/;"	m	class:DevTimer
code	src/device_fingerprint/DevUpList.h	/^        int code;$/;"	m	class:DevUpList
command	src/common/RedisClusterClient.cpp	/^    const char* command;$/;"	m	struct:ParamInfo	file:
command	src/common/RedisClusterClient.h	/^    const char* command() const throw() { return _command.c_str(); }$/;"	f	class:CRedisException
command_buffer_overflow_exception	src/common/Exception.h	/^	command_buffer_overflow_exception(const std::string& what) : Exception(what){};$/;"	f	class:command_buffer_overflow_exception
command_buffer_overflow_exception	src/common/Exception.h	/^class command_buffer_overflow_exception : public Exception{$/;"	c
command_buffer_underflow_exception	src/common/Exception.h	/^	command_buffer_underflow_exception(const std::string& what) : Exception(what){};$/;"	f	class:command_buffer_underflow_exception
command_buffer_underflow_exception	src/common/Exception.h	/^class command_buffer_underflow_exception : public Exception{$/;"	c
command_length	src/common/RedisClusterClient.cpp	/^    size_t command_length;$/;"	m	struct:ParamInfo	file:
compare_by_item_key	src/common/ConfigReader.cpp	/^int ConfigReader::compare_by_item_key(const void* key, const void* item)$/;"	f	class:ConfigReader
compress_string	src/common/dispatch.types.hpp	/^    inline blob compress_string(const std::string& str,$/;"	f	namespace:dsn::tmx
config_file	src/common/ConfigReader.h	/^	const char* config_file() const { return m_file_name; }$/;"	f	class:ConfigReader
connect_node	src/common/RedisClusterClient.cpp	/^redisContext* CRedisClient::connect_node(int* errcode, std::string* errmsg, std::pair<std::string, uint16_t>* node)$/;"	f	class:CRedisClient
connected	src/common/RedisClusterClient.h	/^    bool connected;         \/\/ The state of the link used for the node-to-node cluster bus$/;"	m	struct:NodeInfo
const	src/fastcgi/fcgi_config_x86.h	/^#undef const$/;"	d
contentLen	src/fastcgi/fcgiapp.cpp	/^    int contentLen;           \/* reader: bytes of unread content *\/$/;"	m	struct:FCGX_Stream_Data	file:
contentLengthB0	src/fastcgi/fastcgi.h	/^    unsigned char contentLengthB0;$/;"	m	struct:__anon5
contentLengthB1	src/fastcgi/fastcgi.h	/^    unsigned char contentLengthB1;$/;"	m	struct:__anon5
count	src/common/Counter.h	/^	virtual T count() const { return m_count; }$/;"	f	class:Counter
crc16	src/common/crc16.cpp	/^uint16_t crc16(const char *buf, int len) {$/;"	f
crc16_ccitt	src/common/CryptTask.cpp	/^uint16_t CryptTask::crc16_ccitt(BYTE *ucbuf, int iLen)$/;"	f	class:CryptTask
crc16tab	src/common/crc16.cpp	/^static const uint16_t crc16tab[256]= {$/;"	v	file:
create	src/device_fingerprint/HTTPRequestHandler.cpp	/^HTTPRequest* HTTPRequestHandler::create(FCGX_Request* request)$/;"	f	class:HTTPRequestHandler
createInstance	src/common/CryptRSA.cpp	/^void CryptRSA::createInstance(string &prifile)$/;"	f	class:CryptRSA
createRSA	src/common/CryptRSA.cpp	/^void CryptRSA::createRSA(){$/;"	f	class:CryptRSA
cur	src/fastcgi/fcgiapp.cpp	/^    char **cur;		    \/* current item in vec; *cur == NULL *\/$/;"	m	struct:Params	file:
data	src/fastcgi/fcgiapp.h	/^    void *data;$/;"	m	struct:FCGX_Stream
decise_req	src/common/dispatch.types.hpp	/^    struct decise_req$/;"	s	namespace:dsn::tmx
decise_resp	src/common/dispatch.types.hpp	/^    struct decise_resp$/;"	s	namespace:dsn::tmx
decompress	src/common/Utility.cpp	/^std::string Utility::decompress(const std::string & str64)$/;"	f	class:Utility
decompress_string	src/common/dispatch.types.hpp	/^    inline void decompress_string(blob& str, string& result)$/;"	f	namespace:dsn::tmx
decrease	src/common/Counter.h	/^	virtual T decrease()$/;"	f	class:Counter
decrease	src/common/Counter.h	/^	virtual T decrease()$/;"	f	class:MutexCounter
del	src/common/RedisClusterClient.cpp	/^bool CRedisClient::del(const std::string& key, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
del	src/common/RedisSentinel.cpp	/^bool RedisSentinel::del(const std::string& key, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:RedisSentinel
delKey	src/device_fingerprint/RecordCache.cpp	/^bool RecordCache::delKey(const string& key)$/;"	f	class:RecordCache
destroy	src/common/CryptRSA.cpp	/^void CryptRSA::destroy()$/;"	f	class:CryptRSA
devf	src/device_fingerprint/DevDevf.h	/^        string devf;$/;"	m	class:DevDevf
deviceInfoChange	src/device_fingerprint/RecordCache.cpp	/^bool RecordCache::deviceInfoChange(json::Value jsCache, json::Value jsIn)$/;"	f	class:RecordCache
device_fingerprint_info	src/device_fingerprint/RecordCache.h	/^        std::map<std::string, std::string>  *device_fingerprint_info;$/;"	m	class:RecordCache
device_fingerprint_info_buffer	src/device_fingerprint/RecordCache.h	/^        std::map<std::string, std::string>  *device_fingerprint_info_buffer;$/;"	m	class:RecordCache
device_fingerprint_info_latest	src/device_fingerprint/RecordCache.h	/^        std::map<std::string, std::string>  *device_fingerprint_info_latest;$/;"	m	class:RecordCache
device_fingerprint_info_update	src/device_fingerprint/RecordCache.h	/^        std::map<std::string, std::string>  *device_fingerprint_info_update;$/;"	m	class:RecordCache
device_fingerprint_jsoni4	test/test.sql	/^CREATE TABLE device_fingerprint_jsoni4 ($/;"	t
device_fingerprint_jsoni4.appid	test/test.sql	/^appid varchar(64) NOT NULL default '',$/;"	F
device_fingerprint_jsoni4.clientip	test/test.sql	/^clientip varchar(16) NOT NULL default '',$/;"	F
device_fingerprint_jsoni4.clientno	test/test.sql	/^clientno varchar(64) NOT NULL default '',$/;"	F
device_fingerprint_jsoni4.createtime	test/test.sql	/^createtime timestamp  NOT NULL,$/;"	F
device_fingerprint_jsoni4.credential	test/test.sql	/^credential varchar(64) NOT NULL default '',$/;"	F
device_fingerprint_jsoni4.credentialtype	test/test.sql	/^credentialtype varchar(32) NOT NULL default '',$/;"	F
device_fingerprint_jsoni4.data	test/test.sql	/^data json,$/;"	F
device_fingerprint_jsoni4.deviceid	test/test.sql	/^deviceid varchar(64) NOT NULL DEFAULT '',$/;"	F
device_fingerprint_jsoni4.deviceid2	test/test.sql	/^deviceid2 varchar(64) NOT NULL DEFAULT '',$/;"	F
device_fingerprint_jsoni4.eventid	test/test.sql	/^eventid varchar(16) NOT NULL default '',$/;"	F
device_fingerprint_jsoni4.eventtype	test/test.sql	/^eventtype smallint NOT NULL default '2',$/;"	F
device_fingerprint_jsoni4.fullname	test/test.sql	/^fullname varchar(64) NOT NULL default '',$/;"	F
device_fingerprint_jsoni4.id	test/test.sql	/^id  SERIAL,$/;"	F
device_fingerprint_jsoni4.lastvisit	test/test.sql	/^lastvisit timestamp  NOT NULL,$/;"	F
device_fingerprint_jsoni4.phoneno	test/test.sql	/^phoneno varchar(16) NOT NULL default '',$/;"	F
device_fingerprint_jsoni4.sex	test/test.sql	/^sex smallint NOT NULL default '2',$/;"	F
device_fingerprint_jsoni4.username	test/test.sql	/^username varchar(32) NOT NULL default '',$/;"	F
dispatch_req	src/common/dispatch.types.hpp	/^    struct dispatch_req$/;"	s	namespace:dsn::tmx
dispatch_resp	src/common/dispatch.types.hpp	/^    struct dispatch_resp$/;"	s	namespace:dsn::tmx
doAssembleParam	src/device_fingerprint/DevDevf.cpp	/^void DevDevf::doAssembleParam()$/;"	f	class:DevDevf
doAssembleParam	src/device_fingerprint/DevGtmList.cpp	/^void DevGtmList::doAssembleParam()$/;"	f	class:DevGtmList
doAssembleParam	src/device_fingerprint/DevUpList.cpp	/^void DevUpList::doAssembleParam()$/;"	f	class:DevUpList
doAssembleParam	src/device_fingerprint/HTTPRequest.cpp	/^void HTTPRequest::doAssembleParam()$/;"	f	class:HTTPRequest
doAssembleSql	src/device_fingerprint/HTTPRequest.cpp	/^int HTTPRequest::doAssembleSql()$/;"	f	class:HTTPRequest
doit	src/device_fingerprint/AppServer.cpp	/^void* AppServer::doit(void* para)$/;"	f	class:AppServer
dsn	src/common/dispatch.types.hpp	/^namespace dsn {$/;"	n
eid	src/device_fingerprint/HTTPRequest.h	/^    std::string eid;\/\/消息id$/;"	m	class:HTTPRequest
emptyBuffProc	src/fastcgi/fcgiapp.h	/^    void (*emptyBuffProc) (struct FCGX_Stream *stream, int doClose);$/;"	m	struct:FCGX_Stream
end	src/common/Json.cpp	/^Array::ValueVector::const_iterator Array::end() const$/;"	f	class:Array
end	src/common/Json.cpp	/^Array::ValueVector::iterator Array::end()$/;"	f	class:Array
end	src/common/Json.cpp	/^Object::ValueMap::const_iterator Object::end() const$/;"	f	class:Object
end	src/common/Json.cpp	/^Object::ValueMap::iterator Object::end()$/;"	f	class:Object
end	src/t/Json.cpp	/^Array::ValueVector::const_iterator Array::end() const$/;"	f	class:Array
end	src/t/Json.cpp	/^Array::ValueVector::iterator Array::end()$/;"	f	class:Array
end	src/t/Json.cpp	/^Object::ValueMap::const_iterator Object::end() const$/;"	f	class:Object
end	src/t/Json.cpp	/^Object::ValueMap::iterator Object::end()$/;"	f	class:Object
ensure_connect	src/common/RedisClusterClient.cpp	/^bool CRedisClient::ensure_connect(redisContext *redis_context, std::pair<std::string, uint16_t>* node_info)$/;"	f	class:CRedisClient
entry	src/fastcgi/fcgi_lib.h	/^  entrytype entry;$/;"	m	struct:_node
entrytype	src/fastcgi/fcgi_lib.h	/^} entrytype;$/;"	t	typeref:struct:__anon12
envp	src/fastcgi/fcgiapp.h	/^	char **envp;$/;"	m	struct:FCGX_Request
eorStop	src/fastcgi/fcgiapp.cpp	/^    int eorStop;              \/* reader: stop stream at end-of-record *\/$/;"	m	struct:FCGX_Stream_Data	file:
epoch	src/common/RedisClusterClient.h	/^    int epoch;              \/\/ The configuration epoch (or version) of the current node (or of the current master if the node is a slave). Each time there is a failover, a new, unique, monotonically increasing configuration epoch is created. If multiple nodes claim to serve the same hash slots, the one with higher configuration epoch wins$/;"	m	struct:NodeInfo
err	src/fastcgi/fcgiapp.h	/^    FCGX_Stream *err;$/;"	m	struct:FCGX_Request
evi	src/device_fingerprint/DevDevf.h	/^        int evi;$/;"	m	class:DevDevf
execute_sql	src/device_fingerprint/RecordCache.h	/^        std::vector<std::pair<std::string, int> > *execute_sql;$/;"	m	class:RecordCache
exists	src/common/RedisClusterClient.cpp	/^bool CRedisClient::exists(const std::string& key, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
expire	src/common/RedisClusterClient.cpp	/^bool CRedisClient::expire(const std::string& key, uint32_t seconds, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
expire	src/common/RedisSentinel.cpp	/^bool RedisSentinel::expire(const std::string& key, uint32_t seconds, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:RedisSentinel
fcgi_istream	src/fastcgi/fcgio.h	/^class DLLAPI fcgi_istream : public std::istream$/;"	c
fcgi_ostream	src/fastcgi/fcgio.h	/^class DLLAPI fcgi_ostream : public std::ostream$/;"	c
fcgi_streambuf	src/fastcgi/fcgio.h	/^class DLLAPI fcgi_streambuf : public std::streambuf$/;"	c
fcgi_strmbuf	src/fastcgi/fcgio.h	/^    fcgi_streambuf fcgi_strmbuf;$/;"	m	class:fcgi_istream
fcgi_strmbuf	src/fastcgi/fcgio.h	/^    fcgi_streambuf fcgi_strmbuf;$/;"	m	class:fcgi_ostream
fcgx	src/fastcgi/fcgio.h	/^    FCGX_Stream * fcgx;$/;"	m	class:fcgi_streambuf
fcgx_stream	src/fastcgi/fcgi_stdio.h	/^    FCGX_Stream *fcgx_stream;$/;"	m	struct:__anon14
fclose	src/fastcgi/fcgi_stdio.h	/^#define	fclose /;"	d
fclose	src/fastcgi/fcgi_stdio.h	/^#undef  fclose$/;"	d
fd	src/fastcgi/os_unix.cpp	/^    int fd;$/;"	m	struct:__anon15	file:
fdata	test/test.py	/^fdata=fp.readlines()$/;"	v
fdopen	src/fastcgi/fcgi_stdio.h	/^#define fdopen /;"	d
fdopen	src/fastcgi/fcgi_stdio.h	/^#undef  fdopen$/;"	d
feof	src/fastcgi/fcgi_stdio.h	/^#define	feof /;"	d
feof	src/fastcgi/fcgi_stdio.h	/^#undef  feof$/;"	d
ferror	src/fastcgi/fcgi_stdio.h	/^#define ferror /;"	d
ferror	src/fastcgi/fcgi_stdio.h	/^#undef  ferror$/;"	d
fflush	src/fastcgi/fcgi_stdio.h	/^#define	fflush /;"	d
fflush	src/fastcgi/fcgi_stdio.h	/^#undef  fflush$/;"	d
fgetc	src/fastcgi/fcgi_stdio.h	/^#define	fgetc /;"	d
fgetc	src/fastcgi/fcgi_stdio.h	/^#undef  fgetc$/;"	d
fgetpos	src/fastcgi/fcgi_stdio.h	/^#define fgetpos /;"	d
fgetpos	src/fastcgi/fcgi_stdio.h	/^#undef  fgetpos$/;"	d
fgets	src/fastcgi/fcgi_stdio.h	/^#define fgets /;"	d
fgets	src/fastcgi/fcgi_stdio.h	/^#undef  fgets$/;"	d
file	src/common/RedisClusterClient.h	/^    const char* file() const throw () { return _file.c_str(); }$/;"	f	class:CRedisException
file	test/test.py	/^file="\/home\/chenkai\/compile\/cgi_device\/test\/data2.dat"$/;"	v
fileno	src/fastcgi/fcgi_stdio.h	/^#define fileno /;"	d
fileno	src/fastcgi/fcgi_stdio.h	/^#undef  fileno$/;"	d
fillBuffProc	src/fastcgi/fcgiapp.h	/^    void (*fillBuffProc) (struct FCGX_Stream *stream);$/;"	m	struct:FCGX_Stream
find	src/common/Json.cpp	/^Array::ValueVector::const_iterator Array::find(const Value& v) const$/;"	f	class:Array
find	src/common/Json.cpp	/^Array::ValueVector::iterator Array::find(const Value& v)$/;"	f	class:Array
find	src/common/Json.cpp	/^Object::ValueMap::const_iterator Object::find(const std::string& key) const$/;"	f	class:Object
find	src/common/Json.cpp	/^Object::ValueMap::iterator Object::find(const std::string& key)$/;"	f	class:Object
find	src/t/Json.cpp	/^Array::ValueVector::const_iterator Array::find(const Value& v) const$/;"	f	class:Array
find	src/t/Json.cpp	/^Array::ValueVector::iterator Array::find(const Value& v)$/;"	f	class:Array
find	src/t/Json.cpp	/^Object::ValueMap::const_iterator Object::find(const std::string& key) const$/;"	f	class:Object
find	src/t/Json.cpp	/^Object::ValueMap::iterator Object::find(const std::string& key)$/;"	f	class:Object
flags	src/common/RedisClusterClient.h	/^    std::string flags;      \/\/ A list of comma separated flags: myself, master, slave, fail?, fail, handshake, noaddr, noflags$/;"	m	struct:NodeInfo
flags	src/fastcgi/fastcgi.h	/^    unsigned char flags;$/;"	m	struct:__anon6
flags	src/fastcgi/fcgiapp.h	/^	int flags;$/;"	m	struct:FCGX_Request
flushall	src/common/RedisClusterClient.cpp	/^void CRedisClient::flushall(std::vector<std::pair<std::string, std::string> >* results) throw (CRedisException)$/;"	f	class:CRedisClient
fopen	src/fastcgi/fcgi_stdio.h	/^#define	fopen /;"	d
fopen	src/fastcgi/fcgi_stdio.h	/^#undef  fopen$/;"	d
format	src/common/Utility.cpp	/^string Utility::format(int n)$/;"	f	class:Utility
format	src/common/Utility.cpp	/^string Utility::format(long n)$/;"	f	class:Utility
format	src/common/Utility.cpp	/^string Utility::format(string &binary_data)$/;"	f	class:Utility
format	src/common/Utility.cpp	/^string Utility::format(uint32_t n)$/;"	f	class:Utility
format_string	src/common/RedisClusterClient.cpp	/^std::string format_string(const char* format, ...)$/;"	f
format_suffix	src/common/Utility.cpp	/^std::string Utility::format_suffix(int n)$/;"	f	class:Utility
format_time	src/common/Utility.cpp	/^string Utility::format_time(time_t unix_time)$/;"	f	class:Utility
fp	test/test.py	/^fp=open(file)$/;"	v
fprintf	src/fastcgi/fcgi_stdio.h	/^#define	fprintf /;"	d
fprintf	src/fastcgi/fcgi_stdio.h	/^#undef  fprintf$/;"	d
fputc	src/fastcgi/fcgi_stdio.h	/^#define fputc /;"	d
fputc	src/fastcgi/fcgi_stdio.h	/^#undef  fputc$/;"	d
fputs	src/fastcgi/fcgi_stdio.h	/^#define	fputs /;"	d
fputs	src/fastcgi/fcgi_stdio.h	/^#undef  fputs$/;"	d
fread	src/fastcgi/fcgi_stdio.h	/^#define	fread /;"	d
fread	src/fastcgi/fcgi_stdio.h	/^#undef  fread$/;"	d
freeBuffer	src/common/Queue.h	/^	virtual void freeBuffer(T* pBuffer)$/;"	f	class:Queue
freeBuffer	src/device_fingerprint/Queue.h	/^    virtual void freeBuffer(T* pBuffer)$/;"	f	class:Pool
freopen	src/fastcgi/fcgi_stdio.h	/^#define	freopen /;"	d
freopen	src/fastcgi/fcgi_stdio.h	/^#undef  freopen$/;"	d
fseek	src/fastcgi/fcgi_stdio.h	/^#define fseek /;"	d
fseek	src/fastcgi/fcgi_stdio.h	/^#undef  fseek$/;"	d
fsetpos	src/fastcgi/fcgi_stdio.h	/^#define fsetpos /;"	d
fsetpos	src/fastcgi/fcgi_stdio.h	/^#undef  fsetpos$/;"	d
ftell	src/fastcgi/fcgi_stdio.h	/^#define ftell /;"	d
ftell	src/fastcgi/fcgi_stdio.h	/^#undef  ftell$/;"	d
fwrite	src/fastcgi/fcgi_stdio.h	/^#define fwrite /;"	d
fwrite	src/fastcgi/fcgi_stdio.h	/^#undef  fwrite$/;"	d
g_debug_log	src/common/RedisClusterClient.cpp	/^static LOG_WRITE g_debug_log = r3c_log_write;$/;"	v	file:
g_error_log	src/common/RedisClusterClient.cpp	/^static LOG_WRITE g_error_log = r3c_log_write;$/;"	v	file:
g_info_log	src/common/RedisClusterClient.cpp	/^static LOG_WRITE g_info_log = r3c_log_write;$/;"	v	file:
g_thread_count	src/test/MemTest.cpp	/^int g_thread_count = 1;$/;"	v
gbk2utf8	src/common/Utility.cpp	/^string Utility::gbk2utf8(const char* text)$/;"	f	class:Utility
get	src/common/RedisClusterClient.cpp	/^bool CRedisClient::get(const std::string& key, std::string* value, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
get	src/common/RedisSentinel.cpp	/^bool RedisSentinel::get(const std::string& key, std::string* value, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:RedisSentinel
getAbsTimeout	src/common/Queue.h	/^	void getAbsTimeout(int timeout, struct timespec& abstimeout)$/;"	f	class:Queue
getCapacity	src/common/Queue.h	/^	int getCapacity()$/;"	f	class:Queue
getCapacity	src/device_fingerprint/Queue.h	/^    int getCapacity()$/;"	f	class:Pool
getDeviceFingerprint	src/device_fingerprint/RecordCache.cpp	/^std::string RecordCache::getDeviceFingerprint(std::string &dataCrypt,std::string cno, std::string pno)$/;"	f	class:RecordCache
getFree	src/device_fingerprint/Queue.h	/^    int getFree()$/;"	f	class:Pool
getHeadLen	src/common/CryptTask.cpp	/^int CryptTask::getHeadLen(char* cryptData, int dataLen)$/;"	f	class:CryptTask
getHost	src/common/PGDBConnectionPool.h	/^    std::string getHost() {$/;"	f	class:PGSQLDB
getInstance	src/common/CryptRSA.cpp	/^CryptRSA* CryptRSA::getInstance()$/;"	f	class:CryptRSA
getMaxSize	src/common/Queue.h	/^	int getMaxSize(bool resetMax = true)$/;"	f	class:Queue
getRes	src/device_fingerprint/DevUpList.cpp	/^string DevUpList::getRes(string& os, string& version, string& net_type)$/;"	f	class:DevUpList
getSize	src/common/Queue.h	/^	int getSize()$/;"	f	class:Queue
getUsed	src/device_fingerprint/Queue.h	/^    int getUsed()$/;"	f	class:Pool
getValue	src/device_fingerprint/RecordCache.cpp	/^bool RecordCache::getValue(const string& key, string& value)$/;"	f	class:RecordCache
get_GET	src/fastcgi/fcgi_lib.cpp	/^char *get_GET(FCGX_Request &request)$/;"	f
get_POST	src/fastcgi/fcgi_lib.cpp	/^char *get_POST(FCGX_Request &request)$/;"	f
get_errorinfo	src/common/PGDBConnectionPool.cpp	/^string PGSQLDB::get_errorinfo ()$/;"	f	class:PGSQLDB
get_http_request	src/device_fingerprint/HTTPRequestPool.cpp	/^HTTPRequest *HTTPRequestPool::get_http_request (std::string cmd_type,bool autocreate)$/;"	f	class:HTTPRequestPool
get_int	src/common/ConfigReader.cpp	/^int ConfigReader::get_int(const char* key, int default_value, bool log_warning)$/;"	f	class:ConfigReader
get_key_slot	src/common/RedisClusterClient.cpp	/^unsigned int get_key_slot(const std::string* key)$/;"	f
get_local_datestring	src/common/Utility.cpp	/^string Utility::get_local_datestring()$/;"	f	class:Utility
get_mysql	src/common/PGDBConnectionPool.h	/^    PGconn *get_mysql() {$/;"	f	class:PGSQLDB
get_params	src/fastcgi/fcgi_lib.cpp	/^char* get_params(FCGX_Request &request) $/;"	f
get_redis_connect	src/common/RedisClass.cpp	/^CRedisClient *RedisConnectionPool::get_redis_connect(bool autocreate)$/;"	f	class:RedisConnectionPool
get_redis_connect	src/common/RedisSentinel.cpp	/^CRedisClient *RedisSentinel::get_redis_connect(const std::string &key)$/;"	f	class:RedisSentinel
get_redis_context	src/common/RedisClusterClient.cpp	/^redisContext* CRedisClient::get_redis_context(unsigned int slot, std::pair<std::string, uint16_t>* node) throw (CRedisException)$/;"	f	class:CRedisClient
get_request_cmd	src/device_fingerprint/HTTPRequestHandler.cpp	/^std::string HTTPRequestHandler::get_request_cmd(FCGX_Request* request)$/;"	f	class:HTTPRequestHandler
get_sql	src/common/PGDBConnectionPool.cpp	/^PGSQLDB *PGDBConnectionPool::get_sql (bool autocreate)$/;"	f	class:PGDBConnectionPool
get_string	src/common/ConfigReader.cpp	/^string ConfigReader::get_string(const char* key, const char* default_value, bool log_warning)$/;"	f	class:ConfigReader
get_thread_id	src/common/Thread.h	/^	pthread_t get_thread_id() { return m_thread_id; }$/;"	f	class:Thread
get_value_data	src/common/PGDBConnectionPool.cpp	/^char* RES_RESULT::get_value_data()$/;"	f	class:RES_RESULT
getc	src/fastcgi/fcgi_stdio.h	/^#define getc /;"	d
getc	src/fastcgi/fcgi_stdio.h	/^#undef  getc$/;"	d
getchar	src/fastcgi/fcgi_stdio.h	/^#define	getchar /;"	d
getchar	src/fastcgi/fcgi_stdio.h	/^#undef  getchar$/;"	d
getdbname	src/common/PGDBConnectionPool.h	/^    std::string getdbname() const {$/;"	f	class:PGDBConnectionPool
gethost	src/common/PGDBConnectionPool.h	/^    std::string gethost()const {$/;"	f	class:PGDBConnectionPool
gethost	src/common/RedisClass.h	/^    std::string gethost()const {$/;"	f	class:RedisConnectionPool
getport	src/common/PGDBConnectionPool.h	/^    std::string getport() const {$/;"	f	class:PGDBConnectionPool
getpwd	src/common/PGDBConnectionPool.h	/^    std::string getpwd() const {$/;"	f	class:PGDBConnectionPool
gets	src/fastcgi/fcgi_stdio.h	/^#define	gets /;"	d
gets	src/fastcgi/fcgi_stdio.h	/^#undef  gets$/;"	d
gettimeout	src/common/RedisClass.h	/^    int gettimeout() const {$/;"	f	class:RedisConnectionPool
getuser	src/common/PGDBConnectionPool.h	/^    std::string getuser() const {$/;"	f	class:PGDBConnectionPool
h1	src/fastcgi/html_lib.cpp	/^void h1(char *header)$/;"	f
h2	src/fastcgi/html_lib.cpp	/^void h2(char *header)$/;"	f
h3	src/fastcgi/html_lib.cpp	/^void h3(char *header)$/;"	f
h4	src/fastcgi/html_lib.cpp	/^void h4(char *header)$/;"	f
h5	src/fastcgi/html_lib.cpp	/^void h5(char *header)$/;"	f
h6	src/fastcgi/html_lib.cpp	/^void h6(char *header)$/;"	f
handle	src/device_fingerprint/DevDevf.cpp	/^int DevDevf::handle(json::Value& jsPara)$/;"	f	class:DevDevf
handle	src/device_fingerprint/DevGtmList.cpp	/^int DevGtmList::handle(json::Value& jsPara)$/;"	f	class:DevGtmList
handle	src/device_fingerprint/DevUpList.cpp	/^int DevUpList::handle(json::Value& jsPara)$/;"	f	class:DevUpList
handle	src/device_fingerprint/HTTPRequest.cpp	/^int HTTPRequest::handle(FCGX_Request* request)$/;"	f	class:HTTPRequest
handle	src/device_fingerprint/HTTPRequest.cpp	/^int HTTPRequest::handle(json::Value& jsPara) {$/;"	f	class:HTTPRequest
hasKey	src/device_fingerprint/RecordCache.cpp	/^bool RecordCache::hasKey(const string& key, string &value)$/;"	f	class:RecordCache
hash	src/common/Utility.cpp	/^unsigned int Utility::hash(const char* str)$/;"	f	class:Utility
hdel	src/common/RedisClusterClient.cpp	/^bool CRedisClient::hdel(const std::string& key, const std::string& field, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
hdel	src/common/RedisClusterClient.cpp	/^int CRedisClient::hdel(const std::string& key, const std::vector<std::string>& fields, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
head	src/fastcgi/fcgi_lib.h	/^  node* head;$/;"	m	struct:__anon13
header	src/fastcgi/fastcgi.h	/^    FCGI_Header header;$/;"	m	struct:__anon11
header	src/fastcgi/fastcgi.h	/^    FCGI_Header header;$/;"	m	struct:__anon7
header	src/fastcgi/fastcgi.h	/^    FCGI_Header header;$/;"	m	struct:__anon9
hexists	src/common/RedisClusterClient.cpp	/^bool CRedisClient::hexists(const std::string& key, const std::string& field, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
hget	src/common/RedisClusterClient.cpp	/^bool CRedisClient::hget(const std::string& key, const std::string& field, std::string* value, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
hgetall	src/common/RedisClusterClient.cpp	/^int CRedisClient::hgetall(const std::string& key, std::map<std::string, std::string>* map, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
hidden	src/fastcgi/html_lib.cpp	/^void hidden(char *name, char *value)$/;"	f
hincrby	src/common/RedisClusterClient.cpp	/^int64_t CRedisClient::hincrby(const std::string& key, const std::string& field, int64_t increment, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
hkeys	src/common/RedisClusterClient.cpp	/^int CRedisClient::hkeys(const std::string& key, std::vector<std::string>* fields, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
hlen	src/common/RedisClusterClient.cpp	/^int CRedisClient::hlen(const std::string& key, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
hmget	src/common/RedisClusterClient.cpp	/^int CRedisClient::hmget(const std::string& key, const std::vector<std::string>& fields, std::map<std::string, std::string>* map, bool keep_null, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
hmset	src/common/RedisClusterClient.cpp	/^void CRedisClient::hmset(const std::string& key, const std::map<std::string, std::string>& map, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
hscan	src/common/RedisClusterClient.cpp	/^int64_t CRedisClient::hscan(const std::string& key, int64_t cursor, const std::string& pattern, int count, std::map<std::string, std::string>* map, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
hscan	src/common/RedisClusterClient.cpp	/^int64_t CRedisClient::hscan(const std::string& key, int64_t cursor, const std::string& pattern, std::map<std::string, std::string>* map, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
hscan	src/common/RedisClusterClient.cpp	/^int64_t CRedisClient::hscan(const std::string& key, int64_t cursor, int count, std::map<std::string, std::string>* map, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
hscan	src/common/RedisClusterClient.cpp	/^int64_t CRedisClient::hscan(const std::string& key, int64_t cursor, std::map<std::string, std::string>* map, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
hset	src/common/RedisClusterClient.cpp	/^bool CRedisClient::hset(const std::string& key, const std::string& field, const std::string& value, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
hsetnx	src/common/RedisClusterClient.cpp	/^bool CRedisClient::hsetnx(const std::string& key, const std::string& field, const std::string& value, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
hstrlen	src/common/RedisClusterClient.cpp	/^int CRedisClient::hstrlen(const std::string& key, const std::string& field, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
html_begin	src/fastcgi/html_lib.cpp	/^void html_begin(char *title)$/;"	f
html_end	src/fastcgi/html_lib.cpp	/^void html_end()$/;"	f
html_header	src/fastcgi/html_lib.cpp	/^void html_header()$/;"	f
http_pool_lock	src/device_fingerprint/HTTPRequestPool.h	/^    pthread_mutex_t http_pool_lock;$/;"	m	class:HTTPRequestPool
http_request_pool	src/device_fingerprint/HTTPRequestHandler.h	/^    HTTPRequestPool http_request_pool;$/;"	m	class:HTTPRequestHandler
hvals	src/common/RedisClusterClient.cpp	/^int CRedisClient::hvals(const std::string& key, std::vector<std::string>* vals, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
id	src/common/RedisClusterClient.h	/^    std::string id;         \/\/ The node ID, a 40 characters random string generated when a node is created and never changed again (unless CLUSTER RESET HARD is used)$/;"	m	struct:NodeInfo
in	src/fastcgi/fcgiapp.h	/^    FCGX_Stream *in;$/;"	m	struct:FCGX_Request
inUse	src/fastcgi/os_unix.cpp	/^    int inUse;$/;"	m	struct:__anon15	file:
in_map1	src/common/RedisClusterClient.cpp	/^    const std::map<std::string, std::string>* in_map1;$/;"	m	struct:ParamInfo	file:
in_map2	src/common/RedisClusterClient.cpp	/^    const std::map<std::string, int64_t>* in_map2;$/;"	m	struct:ParamInfo	file:
incrby	src/common/RedisClusterClient.cpp	/^int64_t CRedisClient::incrby(const std::string& key, int64_t increment, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
increase	src/common/Counter.h	/^	virtual T increase()$/;"	f	class:Counter
increase	src/common/Counter.h	/^	virtual T increase()$/;"	f	class:MutexCounter
inetVariant	src/fastcgi/os_unix.cpp	/^    struct  sockaddr_in	inetVariant;$/;"	m	union:SockAddrUnion	typeref:struct:SockAddrUnion::sockaddr_in	file:
init	src/common/RedisClusterClient.cpp	/^void CRedisClient::init() throw (CRedisException)$/;"	f	class:CRedisClient
initUrlParam	src/fastcgi/fcgi_lib.cpp	/^void initUrlParam(std::map<std::string, std::string> &paraMap, std::string &paramStr)$/;"	f
inline	src/fastcgi/fcgi_config_x86.h	/^#undef inline$/;"	d
insert	src/common/Json.cpp	/^void Array::insert(size_t index, const Value& v)$/;"	f	class:Array
insert	src/t/Json.cpp	/^void Array::insert(size_t index, const Value& v)$/;"	f	class:Array
insertItem	src/common/ConfigReader.cpp	/^void ConfigReader::insertItem(const ConfigItem& item)$/;"	f	class:ConfigReader
installSignalHandler	src/fastcgi/os_unix.cpp	/^static void installSignalHandler(int signo, const struct sigaction * act, int force)$/;"	f	file:
interval	src/device_fingerprint/DevGtmList.h	/^        int interval;$/;"	m	class:DevGtmList
interval	src/device_fingerprint/DevTimer.h	/^        string interval;$/;"	m	class:DevTimer
invalid_data_exception	src/common/Exception.h	/^	invalid_data_exception(const std::string& what) : Exception(what){}$/;"	f	class:invalid_data_exception
invalid_data_exception	src/common/Exception.h	/^class invalid_data_exception : public Exception$/;"	c
invoke_count	src/common/TimeoutWrapper.cpp	/^volatile int invoke_count = 0;$/;"	v
invoke_env	src/common/TimeoutWrapper.cpp	/^sigjmp_buf invoke_env;$/;"	v
ip	src/common/RedisClusterClient.h	/^    std::string ip;         \/\/ The node IP$/;"	m	struct:NodeInfo
ip2string	src/common/RedisClusterClient.cpp	/^std::string ip2string(uint32_t ip)$/;"	f
ip_aton	src/common/Utility.cpp	/^uint32_t Utility::ip_aton(const  string & ip)$/;"	f	class:Utility
ip_ntoa	src/common/Utility.cpp	/^string Utility::ip_ntoa(uint32_t ip)$/;"	f	class:Utility
ipcFd	src/fastcgi/fcgiapp.h	/^    int ipcFd;               \/* < 0 means no connection *\/$/;"	m	struct:FCGX_Request
isActive	src/common/RedisClass.cpp	/^bool RedisConnectionPool::isActive()$/;"	f	class:RedisConnectionPool
isAnythingWritten	src/fastcgi/fcgiapp.cpp	/^    int isAnythingWritten;    \/* writer: data has been written to ipcFd *\/$/;"	m	struct:FCGX_Stream_Data	file:
isBeginProcessed	src/fastcgi/fcgiapp.h	/^    int isBeginProcessed;     \/* FCGI_BEGIN_REQUEST seen *\/$/;"	m	struct:FCGX_Request
isCGI	src/fastcgi/fcgi_stdio.cpp	/^static int isCGI = FALSE;$/;"	v	file:
isClosed	src/fastcgi/fcgiapp.h	/^    int isClosed;$/;"	m	struct:FCGX_Stream
isFastCGI	src/fastcgi/fcgiapp.cpp	/^static int isFastCGI = -1;$/;"	v	file:
isReader	src/fastcgi/fcgiapp.h	/^    int isReader;$/;"	m	struct:FCGX_Stream
is_Null	src/common/PGDBConnectionPool.cpp	/^bool RES_RESULT::is_Null()$/;"	f	class:RES_RESULT
is_active	src/common/RedisClusterClient.cpp	/^bool CRedisClient::is_active(std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
is_active	src/common/RedisSentinel.cpp	/^bool RedisSentinel::is_active(std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:RedisSentinel
is_af_unix_keeper	src/fastcgi/os_unix.cpp	/^static int is_af_unix_keeper(const int fd)$/;"	f	file:
is_end_with	src/common/Utility.cpp	/^bool Utility::is_end_with(std::string& fullstr, const char* c_suffix)$/;"	f	class:Utility
is_fail	src/common/RedisClusterClient.h	/^    bool is_fail;$/;"	m	struct:NodeInfo
is_master	src/common/RedisClusterClient.h	/^    bool is_master;         \/\/ true if node is master, false if node is salve$/;"	m	struct:NodeInfo
is_reasonable_accept_errno	src/fastcgi/os_unix.cpp	/^static int is_reasonable_accept_errno (const int error)$/;"	f	file:
is_running	src/common/Thread.h	/^	bool is_running() { return m_is_started; }$/;"	f	class:Thread
is_slave	src/common/RedisClusterClient.h	/^    bool is_slave;$/;"	m	struct:NodeInfo
jsReturn	src/device_fingerprint/HTTPRequest.h	/^    json::Value jsReturn;$/;"	m	class:HTTPRequest
json	src/common/Json.cpp	/^namespace json$/;"	n	file:
json	src/common/Json.hpp	/^namespace json$/;"	n
json	src/t/Json.cpp	/^namespace json$/;"	n	file:
json	src/t/Json.hpp	/^namespace json$/;"	n
keepConnection	src/fastcgi/fcgiapp.h	/^    int keepConnection;       \/* don't close ipcFd at end of request *\/$/;"	m	struct:FCGX_Request
keep_null	src/common/RedisClusterClient.cpp	/^    const bool* keep_null;$/;"	m	struct:ParamInfo	file:
key	src/common/RedisClusterClient.cpp	/^    const std::string* key;$/;"	m	struct:ParamInfo	file:
key	src/common/RedisClusterClient.h	/^    const char* key() const throw() { return _key.c_str(); }$/;"	f	class:CRedisException
keyHashSlot	src/common/RedisClusterClient.cpp	/^static unsigned int keyHashSlot(const char *key, size_t keylen) {$/;"	f	file:
key_type	src/common/RedisClusterClient.cpp	/^bool CRedisClient::key_type(const std::string& key, std::string* key_type, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
len	src/fastcgi/os_unix.cpp	/^    int len;$/;"	m	struct:__anon15	file:
length	src/fastcgi/fcgiapp.cpp	/^    int length;		    \/* number of string vec can hold *\/$/;"	m	struct:Params	file:
libInitialized	src/fastcgi/fcgiapp.cpp	/^static int libInitialized = 0;$/;"	v	file:
libInitialized	src/fastcgi/os_unix.cpp	/^static int libInitialized = FALSE;$/;"	v	file:
line	src/common/RedisClusterClient.h	/^    int line() const throw () { return _line; }$/;"	f	class:CRedisException
list_create	src/fastcgi/fcgi_lib.cpp	/^void list_create(llist *l)$/;"	f
list_insafter	src/fastcgi/fcgi_lib.cpp	/^node* list_insafter(llist* l, node* w, entrytype item)$/;"	f
list_next	src/fastcgi/fcgi_lib.cpp	/^node* list_next(node* w)$/;"	f
list_nodes	src/common/RedisClusterClient.cpp	/^int CRedisClient::list_nodes(std::vector<struct NodeInfo>* nodes_info, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
listen_sock	src/fastcgi/fcgiapp.h	/^	int listen_sock;$/;"	m	struct:FCGX_Request
llen	src/common/RedisClusterClient.cpp	/^int CRedisClient::llen(const std::string& key, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
llist	src/fastcgi/fcgi_lib.h	/^} llist;$/;"	t	typeref:struct:__anon13
load	src/common/ConfigReader.cpp	/^bool ConfigReader::load()$/;"	f	class:ConfigReader
loadLine	src/common/ConfigReader.cpp	/^bool ConfigReader::loadLine(char* buffer)$/;"	f	class:ConfigReader
lock	src/common/MutexLock.h	/^	int lock()$/;"	f	class:Lock
lock	src/common/SDMutexLock.h	/^	void lock()$/;"	f	class:MutexLock
lpop	src/common/RedisClusterClient.cpp	/^bool CRedisClient::lpop(const std::string& key, std::string* value, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
lpush	src/common/RedisClusterClient.cpp	/^int CRedisClient::lpush(const std::string& key, const std::string& value, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
lpush	src/common/RedisClusterClient.cpp	/^int CRedisClient::lpush(const std::string& key, const std::vector<std::string>& values, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
lrange	src/common/RedisClusterClient.cpp	/^int CRedisClient::lrange(const std::string& key, int64_t start, int64_t end, std::vector<std::string>* values, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
ltrim	src/common/RedisClusterClient.cpp	/^bool CRedisClient::ltrim(const std::string& key, int64_t start, int64_t end, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
mArrayVal	src/common/Json.hpp	/^            Array                            mArrayVal;$/;"	m	class:json::Value
mArrayVal	src/t/Json.hpp	/^            Array                            mArrayVal;$/;"	m	class:json::Value
mBoolVal	src/common/Json.hpp	/^            bool                             mBoolVal;$/;"	m	class:json::Value
mBoolVal	src/t/Json.hpp	/^            bool                             mBoolVal;$/;"	m	class:json::Value
mBuff	src/fastcgi/fcgiapp.cpp	/^    unsigned char *mBuff;     \/* buffer as returned by Malloc *\/$/;"	m	struct:FCGX_Stream_Data	file:
mDoubleVal	src/common/Json.hpp	/^            double                             mDoubleVal;$/;"	m	class:json::Value
mDoubleVal	src/t/Json.hpp	/^            double                             mDoubleVal;$/;"	m	class:json::Value
mFloatVal	src/common/Json.hpp	/^            float                            mFloatVal;$/;"	m	class:json::Value
mFloatVal	src/t/Json.hpp	/^            float                            mFloatVal;$/;"	m	class:json::Value
mIntVal	src/common/Json.hpp	/^            int                                mIntVal;$/;"	m	class:json::Value
mIntVal	src/t/Json.hpp	/^            int                                mIntVal;$/;"	m	class:json::Value
mObjectVal	src/common/Json.hpp	/^            Object                            mObjectVal;$/;"	m	class:json::Value
mObjectVal	src/t/Json.hpp	/^            Object                            mObjectVal;$/;"	m	class:json::Value
mStringVal	src/common/Json.hpp	/^            std::string                        mStringVal;$/;"	m	class:json::Value
mStringVal	src/t/Json.hpp	/^            std::string                        mStringVal;$/;"	m	class:json::Value
mValueType	src/common/Json.hpp	/^            ValueType                        mValueType;$/;"	m	class:json::Value
mValueType	src/t/Json.hpp	/^            ValueType                        mValueType;$/;"	m	class:json::Value
mValues	src/common/Json.hpp	/^            ValueMap    mValues;$/;"	m	class:json::Object
mValues	src/common/Json.hpp	/^            ValueVector                mValues;$/;"	m	class:json::Array
mValues	src/t/Json.hpp	/^            ValueMap    mValues;$/;"	m	class:json::Object
mValues	src/t/Json.hpp	/^            ValueVector                mValues;$/;"	m	class:json::Array
m_buffer	src/common/Queue.h	/^	T*  m_buffer;$/;"	m	class:Queue
m_buffer	src/device_fingerprint/Queue.h	/^    T*  m_buffer;$/;"	m	class:Pool
m_capacity	src/common/Queue.h	/^	int m_capacity;$/;"	m	class:Queue
m_capacity	src/device_fingerprint/Queue.h	/^    int m_capacity;$/;"	m	class:Pool
m_cause	src/common/Exception.h	/^	std::string m_cause;$/;"	m	class:Exception
m_cmd_type	src/device_fingerprint/HTTPRequest.h	/^    std::string m_cmd_type;$/;"	m	class:HTTPRequest
m_cond_not_empty	src/common/Queue.h	/^	pthread_cond_t	m_cond_not_empty;$/;"	m	class:Queue
m_cond_not_empty	src/device_fingerprint/Queue.h	/^    pthread_cond_t    m_cond_not_empty;$/;"	m	class:Pool
m_cond_not_full	src/common/Queue.h	/^	pthread_cond_t	m_cond_not_full;$/;"	m	class:Queue
m_cond_not_full	src/device_fingerprint/Queue.h	/^    pthread_cond_t    m_cond_not_full;$/;"	m	class:Pool
m_count	src/common/Counter.h	/^	T m_count;$/;"	m	class:Counter
m_dbname	src/common/PGDBConnectionPool.h	/^    std::string m_dbname;$/;"	m	class:PGDBConnectionPool
m_dbname	src/common/PGDBConnectionPool.h	/^    std::string m_dbname;$/;"	m	class:PGSQLDB
m_detachable	src/common/Thread.h	/^	bool m_detachable;$/;"	m	class:Thread
m_fields_pos	src/common/PGDBConnectionPool.h	/^    unsigned    m_fields_pos;$/;"	m	class:RES_RESULT
m_file_name	src/common/ConfigReader.h	/^	char m_file_name[max_path];$/;"	m	class:ConfigReader
m_free	src/device_fingerprint/Queue.h	/^    int m_free;$/;"	m	class:Pool
m_host	src/common/PGDBConnectionPool.h	/^    std::string m_host;$/;"	m	class:PGDBConnectionPool
m_host	src/common/PGDBConnectionPool.h	/^    std::string m_host;$/;"	m	class:PGSQLDB
m_host	src/common/RedisClass.h	/^    std::string m_host;$/;"	m	class:RedisConnectionPool
m_instance	src/common/CryptRSA.cpp	/^CryptRSA* CryptRSA::m_instance = NULL;$/;"	m	class:CryptRSA	file:
m_instance	src/common/CryptRSA.hpp	/^  static CryptRSA* m_instance;  $/;"	m	class:CryptRSA
m_is_started	src/common/Thread.h	/^	bool m_is_started;$/;"	m	class:Thread
m_isinit	src/common/PGDBConnectionPool.h	/^    bool m_isinit;$/;"	m	class:PGSQLDB
m_isinit	src/common/RedisClusterClient.h	/^    bool m_isinit;$/;"	m	class:CRedisClient
m_isuse	src/common/PGDBConnectionPool.h	/^    bool m_isuse;$/;"	m	class:PGSQLDB
m_isuse	src/common/RedisClusterClient.h	/^    bool m_isuse;$/;"	m	class:CRedisClient
m_items	src/common/ConfigReader.h	/^	std::vector<ConfigItem> m_items;$/;"	m	class:ConfigReader
m_key	src/common/ConfigReader.h	/^		std::string m_key;$/;"	m	class:ConfigReader::ConfigItem
m_lock	src/common/Counter.h	/^	Lock m_lock;$/;"	m	class:MutexCounter
m_lock	src/common/MutexLock.h	/^	pthread_mutex_t m_lock;$/;"	m	class:Lock
m_lock	src/common/MutexLock.h	/^	pthread_mutex_t* m_lock;$/;"	m	class:AutoLock
m_lock	src/common/Queue.h	/^	pthread_mutex_t m_lock;$/;"	m	class:Queue
m_lock	src/common/SDMutexLock.h	/^	pthread_mutex_t m_lock;$/;"	m	class:MutexLock
m_lock	src/device_fingerprint/Queue.h	/^    pthread_mutex_t m_lock;$/;"	m	class:Pool
m_lock_p	src/common/SDMutexLock.h	/^	pthread_mutex_t* m_lock_p;$/;"	m	class:AutoLock
m_lock_p	src/common/SDMutexLock.h	/^	pthread_rwlock_t* m_lock_p;$/;"	m	class:AutoRDLock
m_lock_p	src/common/SDMutexLock.h	/^	pthread_rwlock_t* m_lock_p;$/;"	m	class:AutoWRLock
m_max_count	src/common/Counter.h	/^	T m_max_count;$/;"	m	class:Counter
m_max_num_fields	src/common/PGDBConnectionPool.h	/^    unsigned    m_max_num_fields;$/;"	m	class:RES_RESULT
m_max_num_rows	src/common/PGDBConnectionPool.h	/^    unsigned    m_max_num_rows;$/;"	m	class:RES_RESULT
m_max_size	src/common/Queue.h	/^	int m_max_size;$/;"	m	class:Queue
m_padding	src/common/CryptRSA.hpp	/^  int m_padding;$/;"	m	class:CryptRSA
m_params	src/device_fingerprint/HTTPRequest.h	/^    std::map<std::string, std::pair<std::string, bool> > m_params;$/;"	m	class:HTTPRequest
m_passwd	src/common/PGDBConnectionPool.h	/^    std::string m_passwd;$/;"	m	class:PGDBConnectionPool
m_passwd	src/common/PGDBConnectionPool.h	/^    std::string m_passwd;$/;"	m	class:PGSQLDB
m_passwd	src/common/RedisClass.h	/^    std::string m_passwd;$/;"	m	class:RedisConnectionPool
m_pemkey	src/common/CryptRSA.hpp	/^  string *m_pemkey;$/;"	m	class:CryptRSA
m_port	src/common/PGDBConnectionPool.h	/^    std::string m_port;$/;"	m	class:PGDBConnectionPool
m_port	src/common/PGDBConnectionPool.h	/^    std::string m_port;$/;"	m	class:PGSQLDB
m_prifile	src/common/CryptRSA.hpp	/^  string m_prifile;$/;"	m	class:CryptRSA
m_request_handler	src/device_fingerprint/AppServer.h	/^        HTTPRequestHandler* m_request_handler;$/;"	m	class:AppServer
m_result	src/common/PGDBConnectionPool.h	/^    PGresult*   m_result;$/;"	m	class:RES_RESULT
m_row	src/common/PGDBConnectionPool.h	/^    unsigned    m_row;$/;"	m	class:RES_RESULT
m_rsa	src/common/CryptRSA.hpp	/^  RSA *m_rsa;$/;"	m	class:CryptRSA
m_should_stop	src/common/Thread.h	/^	bool m_should_stop;$/;"	m	class:Thread
m_size	src/common/Queue.h	/^	int m_size;$/;"	m	class:Queue
m_stack_size	src/common/Thread.h	/^	int m_stack_size;$/;"	m	class:Thread
m_start	src/common/Queue.h	/^	int m_start;$/;"	m	class:Queue
m_str	src/common/cexception.h	/^	string m_str;$/;"	m	class:CCommonException
m_thread_counter	src/common/Thread.h	/^	Counter<int>* m_thread_counter;$/;"	m	class:Thread
m_thread_id	src/common/Thread.h	/^	pthread_t m_thread_id;$/;"	m	class:Thread
m_timeout	src/common/RedisClass.h	/^    int m_timeout;$/;"	m	class:RedisConnectionPool
m_url	src/common/cexception.h	/^	string m_url;$/;"	m	class:CCommonException
m_used	src/device_fingerprint/Queue.h	/^    int m_used;$/;"	m	class:Pool
m_user	src/common/PGDBConnectionPool.h	/^    std::string m_user;$/;"	m	class:PGDBConnectionPool
m_user	src/common/PGDBConnectionPool.h	/^    std::string m_user;$/;"	m	class:PGSQLDB
m_value	src/common/ConfigReader.h	/^		std::string m_value;$/;"	m	class:ConfigReader::ConfigItem
main	src/device_fingerprint/Main.cpp	/^int main(void)$/;"	f
main	src/t/main.cpp	/^int main()$/;"	f
main	src/test/MemTest.cpp	/^int main(void)$/;"	f
marshall	src/common/dispatch.types.hpp	/^    inline void marshall(::dsn::binary_writer& writer, const analyse_req& val)$/;"	f	namespace:dsn::tmx
marshall	src/common/dispatch.types.hpp	/^    inline void marshall(::dsn::binary_writer& writer, const analyse_resp& val)$/;"	f	namespace:dsn::tmx
marshall	src/common/dispatch.types.hpp	/^    inline void marshall(::dsn::binary_writer& writer, const decise_req& val)$/;"	f	namespace:dsn::tmx
marshall	src/common/dispatch.types.hpp	/^    inline void marshall(::dsn::binary_writer& writer, const decise_resp& val)$/;"	f	namespace:dsn::tmx
marshall	src/common/dispatch.types.hpp	/^    inline void marshall(::dsn::binary_writer& writer, const dispatch_resp& val)$/;"	f	namespace:dsn::tmx
master_id	src/common/RedisClusterClient.h	/^    std::string master_id;  \/\/ The replication master$/;"	m	struct:NodeInfo
max	src/fastcgi/fcgimisc.h	/^#define max(/;"	d
maxFd	src/fastcgi/os_unix.cpp	/^static int volatile maxFd = -1;$/;"	v	file:
max_count	src/common/Counter.h	/^	virtual T max_count() { return m_max_count; }$/;"	f	class:Counter
max_line_length	src/common/ConfigReader.h	/^	static const int max_line_length = 256;$/;"	m	class:ConfigReader
max_path	src/common/ConfigReader.h	/^	static const int max_path = 256;$/;"	m	class:ConfigReader
millisleep	src/common/RedisClusterClient.cpp	/^void millisleep(uint32_t millisecond)$/;"	f
mime_header	src/fastcgi/html_lib.cpp	/^void mime_header(char *mime)$/;"	f
min	src/fastcgi/fcgimisc.h	/^#define min(/;"	d
msg	src/device_fingerprint/HTTPRequest.h	/^    std::string msg;\/\/提示描述信息$/;"	m	class:HTTPRequest
my_main	src/common/base64.cpp	/^int my_main(int argc, char *argv[])$/;"	f
my_signal	src/common/TimeoutWrapper.cpp	/^sigfunc *my_signal(int signo, sigfunc * func)$/;"	f
nWriters	src/fastcgi/fcgiapp.h	/^    int nWriters;             \/* number of open writers (0..2) *\/$/;"	m	struct:FCGX_Request
name	src/fastcgi/fcgi_lib.h	/^  char *name;$/;"	m	struct:__anon12
newstr	src/fastcgi/fcgi_lib.cpp	/^char *newstr(char *str)$/;"	f
next	src/common/PGDBConnectionPool.cpp	/^bool RES_RESULT::next()$/;"	f	class:RES_RESULT
next	src/fastcgi/fcgi_lib.h	/^  struct _node* next;$/;"	m	struct:_node	typeref:struct:_node::_node
node	src/common/RedisClusterClient.cpp	/^    std::pair<uint32_t, uint16_t> node;$/;"	m	struct:SlotInfo	file:
node	src/fastcgi/fcgi_lib.h	/^} node;$/;"	t	typeref:struct:_node
node_ip	src/common/RedisClusterClient.h	/^    const char* node_ip() const throw () { return _node_ip.c_str(); }$/;"	f	class:CRedisException
node_port	src/common/RedisClusterClient.h	/^    uint16_t node_port() const throw () { return _node_port; }$/;"	f	class:CRedisException
nph_header	src/fastcgi/html_lib.cpp	/^void nph_header(char *status)$/;"	f
null_log_write	src/common/RedisClusterClient.cpp	/^static void null_log_write(const char* UNUSED(format), ...)$/;"	f	file:
numRdPosted	src/fastcgi/os_unix.cpp	/^static int numRdPosted = 0;$/;"	v	file:
numWrPosted	src/fastcgi/os_unix.cpp	/^static int numWrPosted = 0;$/;"	v	file:
offset	src/fastcgi/os_unix.cpp	/^    int offset;$/;"	m	struct:__anon15	file:
on_list	src/fastcgi/fcgi_lib.cpp	/^short on_list(llist *l, node* w)$/;"	f
operator !=	src/common/Json.hpp	/^            inline friend bool operator !=(const Array& lhs, const Array& rhs) {return !(lhs == rhs);}$/;"	f	class:json::Array
operator !=	src/common/Json.hpp	/^            inline friend bool operator !=(const Object& lhs, const Object& rhs)     {return !(lhs == rhs);}$/;"	f	class:json::Object
operator !=	src/common/Json.hpp	/^            inline friend bool operator !=(const Value& lhs, const Value& rhs)     {return !(lhs == rhs);}$/;"	f	class:json::Value
operator !=	src/t/Json.hpp	/^            inline friend bool operator !=(const Array& lhs, const Array& rhs) {return !(lhs == rhs);}$/;"	f	class:json::Array
operator !=	src/t/Json.hpp	/^            inline friend bool operator !=(const Object& lhs, const Object& rhs)     {return !(lhs == rhs);}$/;"	f	class:json::Object
operator !=	src/t/Json.hpp	/^            inline friend bool operator !=(const Value& lhs, const Value& rhs)     {return !(lhs == rhs);}$/;"	f	class:json::Value
operator <	src/common/ConfigReader.h	/^		friend bool operator< (const ConfigItem& s1, const ConfigItem& s2)$/;"	f	class:ConfigReader::ConfigItem
operator <	src/common/Json.hpp	/^    inline bool operator <(const Array& lhs, const Array& rhs)$/;"	f	namespace:json
operator <	src/common/Json.hpp	/^    inline bool operator <(const Object& lhs, const Object& rhs)$/;"	f	namespace:json
operator <	src/common/Json.hpp	/^    inline bool operator <(const Value& lhs, const Value& rhs)$/;"	f	namespace:json
operator <	src/t/Json.hpp	/^    inline bool operator <(const Array& lhs, const Array& rhs)$/;"	f	namespace:json
operator <	src/t/Json.hpp	/^    inline bool operator <(const Object& lhs, const Object& rhs)$/;"	f	namespace:json
operator <	src/t/Json.hpp	/^    inline bool operator <(const Value& lhs, const Value& rhs)$/;"	f	namespace:json
operator <<	src/common/RedisClusterClient.cpp	/^std::ostream& operator <<(std::ostream& os, const struct NodeInfo& node_info)$/;"	f
operator <=	src/common/Json.hpp	/^            inline friend bool operator <=(const Array& lhs, const Array& rhs)    {return !operator>(lhs, rhs);}$/;"	f	class:json::Array
operator <=	src/common/Json.hpp	/^            inline friend bool operator <=(const Object& lhs, const Object& rhs)    {return !operator>(lhs, rhs);}$/;"	f	class:json::Object
operator <=	src/common/Json.hpp	/^            inline friend bool operator <=(const Value& lhs, const Value& rhs)    {return !operator>(lhs, rhs);}$/;"	f	class:json::Value
operator <=	src/t/Json.hpp	/^            inline friend bool operator <=(const Array& lhs, const Array& rhs)    {return !operator>(lhs, rhs);}$/;"	f	class:json::Array
operator <=	src/t/Json.hpp	/^            inline friend bool operator <=(const Object& lhs, const Object& rhs)    {return !operator>(lhs, rhs);}$/;"	f	class:json::Object
operator <=	src/t/Json.hpp	/^            inline friend bool operator <=(const Value& lhs, const Value& rhs)    {return !operator>(lhs, rhs);}$/;"	f	class:json::Value
operator =	src/common/Json.cpp	/^Array& Array::operator =(const Array& a)$/;"	f	class:Array
operator =	src/common/Json.cpp	/^Object& Object::operator =(const Object& obj)$/;"	f	class:Object
operator =	src/common/Json.cpp	/^Value& Value::operator =(const Value& v)$/;"	f	class:Value
operator =	src/t/Json.cpp	/^Array& Array::operator =(const Array& a)$/;"	f	class:Array
operator =	src/t/Json.cpp	/^Object& Object::operator =(const Object& obj)$/;"	f	class:Object
operator =	src/t/Json.cpp	/^Value& Value::operator =(const Value& v)$/;"	f	class:Value
operator ==	src/common/Json.hpp	/^    inline bool operator ==(const Array& lhs, const Array& rhs)$/;"	f	namespace:json
operator ==	src/common/Json.hpp	/^    inline bool operator ==(const Object& lhs, const Object& rhs)$/;"	f	namespace:json
operator ==	src/common/Json.hpp	/^    inline bool operator ==(const Value& lhs, const Value& rhs)$/;"	f	namespace:json
operator ==	src/t/Json.hpp	/^    inline bool operator ==(const Array& lhs, const Array& rhs)$/;"	f	namespace:json
operator ==	src/t/Json.hpp	/^    inline bool operator ==(const Object& lhs, const Object& rhs)$/;"	f	namespace:json
operator ==	src/t/Json.hpp	/^    inline bool operator ==(const Value& lhs, const Value& rhs)$/;"	f	namespace:json
operator >	src/common/Json.hpp	/^            inline friend bool operator >(const Array& lhs, const Array& rhs)     {return operator<(rhs, lhs);}$/;"	f	class:json::Array
operator >	src/common/Json.hpp	/^            inline friend bool operator >(const Object& lhs, const Object& rhs)     {return operator<(rhs, lhs);}$/;"	f	class:json::Object
operator >	src/common/Json.hpp	/^            inline friend bool operator >(const Value& lhs, const Value& rhs)     {return operator<(rhs, lhs);}$/;"	f	class:json::Value
operator >	src/t/Json.hpp	/^            inline friend bool operator >(const Array& lhs, const Array& rhs)     {return operator<(rhs, lhs);}$/;"	f	class:json::Array
operator >	src/t/Json.hpp	/^            inline friend bool operator >(const Object& lhs, const Object& rhs)     {return operator<(rhs, lhs);}$/;"	f	class:json::Object
operator >	src/t/Json.hpp	/^            inline friend bool operator >(const Value& lhs, const Value& rhs)     {return operator<(rhs, lhs);}$/;"	f	class:json::Value
operator >=	src/common/Json.hpp	/^            inline friend bool operator >=(const Array& lhs, const Array& rhs)    {return !operator<(lhs, rhs);}$/;"	f	class:json::Array
operator >=	src/common/Json.hpp	/^            inline friend bool operator >=(const Object& lhs, const Object& rhs)    {return !operator<(lhs, rhs);}$/;"	f	class:json::Object
operator >=	src/common/Json.hpp	/^            inline friend bool operator >=(const Value& lhs, const Value& rhs)    {return !operator<(lhs, rhs);}$/;"	f	class:json::Value
operator >=	src/t/Json.hpp	/^            inline friend bool operator >=(const Array& lhs, const Array& rhs)    {return !operator<(lhs, rhs);}$/;"	f	class:json::Array
operator >=	src/t/Json.hpp	/^            inline friend bool operator >=(const Object& lhs, const Object& rhs)    {return !operator<(lhs, rhs);}$/;"	f	class:json::Object
operator >=	src/t/Json.hpp	/^            inline friend bool operator >=(const Value& lhs, const Value& rhs)    {return !operator<(lhs, rhs);}$/;"	f	class:json::Value
operator Array	src/common/Json.cpp	/^Value::operator Array() const             $/;"	f	class:Value
operator Array	src/t/Json.cpp	/^Value::operator Array() const             $/;"	f	class:Value
operator Object	src/common/Json.cpp	/^Value::operator Object() const         $/;"	f	class:Value
operator Object	src/t/Json.cpp	/^Value::operator Object() const         $/;"	f	class:Value
operator []	src/common/Json.cpp	/^Value& Array::operator [](size_t i)$/;"	f	class:Array
operator []	src/common/Json.cpp	/^Value& Object::operator [](const char* key)$/;"	f	class:Object
operator []	src/common/Json.cpp	/^Value& Object::operator [](const std::string& key)$/;"	f	class:Object
operator []	src/common/Json.cpp	/^Value& Value::operator [](const char* key)$/;"	f	class:Value
operator []	src/common/Json.cpp	/^Value& Value::operator [](const std::string& key)$/;"	f	class:Value
operator []	src/common/Json.cpp	/^Value& Value::operator [](size_t idx)$/;"	f	class:Value
operator []	src/common/Json.cpp	/^const Value& Array::operator [](size_t i) const$/;"	f	class:Array
operator []	src/common/Json.cpp	/^const Value& Object::operator [](const char* key) const$/;"	f	class:Object
operator []	src/common/Json.cpp	/^const Value& Object::operator [](const std::string& key) const$/;"	f	class:Object
operator []	src/common/Json.cpp	/^const Value& Value::operator [](const char* key) const$/;"	f	class:Value
operator []	src/common/Json.cpp	/^const Value& Value::operator [](const std::string& key) const$/;"	f	class:Value
operator []	src/common/Json.cpp	/^const Value& Value::operator [](size_t idx) const$/;"	f	class:Value
operator []	src/t/Json.cpp	/^Value& Array::operator [](size_t i)$/;"	f	class:Array
operator []	src/t/Json.cpp	/^Value& Object::operator [](const char* key)$/;"	f	class:Object
operator []	src/t/Json.cpp	/^Value& Object::operator [](const std::string& key)$/;"	f	class:Object
operator []	src/t/Json.cpp	/^Value& Value::operator [](const char* key)$/;"	f	class:Value
operator []	src/t/Json.cpp	/^Value& Value::operator [](const std::string& key)$/;"	f	class:Value
operator []	src/t/Json.cpp	/^Value& Value::operator [](size_t idx)$/;"	f	class:Value
operator []	src/t/Json.cpp	/^const Value& Array::operator [](size_t i) const$/;"	f	class:Array
operator []	src/t/Json.cpp	/^const Value& Object::operator [](const char* key) const$/;"	f	class:Object
operator []	src/t/Json.cpp	/^const Value& Object::operator [](const std::string& key) const$/;"	f	class:Object
operator []	src/t/Json.cpp	/^const Value& Value::operator [](const char* key) const$/;"	f	class:Value
operator []	src/t/Json.cpp	/^const Value& Value::operator [](const std::string& key) const$/;"	f	class:Value
operator []	src/t/Json.cpp	/^const Value& Value::operator [](size_t idx) const$/;"	f	class:Value
operator bool	src/common/Json.cpp	/^Value::operator bool() const             $/;"	f	class:Value
operator bool	src/t/Json.cpp	/^Value::operator bool() const             $/;"	f	class:Value
operator double	src/common/Json.cpp	/^Value::operator double() const$/;"	f	class:Value
operator double	src/t/Json.cpp	/^Value::operator double() const$/;"	f	class:Value
operator float	src/common/Json.cpp	/^Value::operator float() const             $/;"	f	class:Value
operator float	src/t/Json.cpp	/^Value::operator float() const             $/;"	f	class:Value
operator int	src/common/Json.cpp	/^Value::operator int() const$/;"	f	class:Value
operator int	src/t/Json.cpp	/^Value::operator int() const$/;"	f	class:Value
operator std::string	src/common/Json.cpp	/^Value::operator std::string() const     $/;"	f	class:Value
operator std::string	src/t/Json.cpp	/^Value::operator std::string() const     $/;"	f	class:Value
out	src/fastcgi/fcgiapp.h	/^    FCGX_Stream *out;$/;"	m	struct:FCGX_Request
out_map	src/common/RedisClusterClient.cpp	/^    std::map<std::string, std::string>* out_map;$/;"	m	struct:ParamInfo	file:
out_vec	src/common/RedisClusterClient.cpp	/^    std::vector<std::pair<std::string, int64_t> >* out_vec;$/;"	m	struct:ParamInfo	file:
paddingLen	src/fastcgi/fcgiapp.cpp	/^    int paddingLen;           \/* reader: bytes of unread padding *\/$/;"	m	struct:FCGX_Stream_Data	file:
paddingLength	src/fastcgi/fastcgi.h	/^    unsigned char paddingLength;$/;"	m	struct:__anon5
paraMatch	src/device_fingerprint/HTTPRequest.cpp	/^bool HTTPRequest::paraMatch(json::Value& jsPara)$/;"	f	class:HTTPRequest
paramsExpect	src/fastcgi/fcgi_lib.cpp	/^bool paramsExpect(const std::string &paraStr, std::map<std::string, std::string> &paraMap)$/;"	f
paramsExpect	src/fastcgi/fcgi_lib.cpp	/^bool paramsExpect(llist entries, std::map<std::string, std::string> &paraMapMust, std::string *paraVMust, int size1, std::string *paraVMay, int size2)$/;"	f
paramsPtr	src/fastcgi/fcgiapp.h	/^    struct Params *paramsPtr;$/;"	m	struct:FCGX_Request	typeref:struct:FCGX_Request::Params
parse_CGI_encoded	src/fastcgi/fcgi_lib.cpp	/^int parse_CGI_encoded(llist *entries, char *buffer)$/;"	f
parse_node_string	src/common/RedisClusterClient.cpp	/^static bool parse_node_string(const std::string node_string, std::string* ip, uint16_t* port)$/;"	f	file:
parse_nodes	src/common/RedisClusterClient.cpp	/^void CRedisClient::parse_nodes() throw (CRedisException)$/;"	f	class:CRedisClient
parse_slot_string	src/common/RedisClusterClient.cpp	/^static void parse_slot_string(const std::string slot_string, int* start_slot, int* end_slot)$/;"	f	file:
parse_time	src/common/Utility.cpp	/^time_t Utility::parse_time(std::string &time_mdy)$/;"	f	class:Utility
password	src/common/RedisClusterClient.h	/^    std::string password;$/;"	m	class:CRedisClient
pclose	src/fastcgi/fcgi_stdio.cpp	/^#define pclose /;"	d	file:
pclose	src/fastcgi/fcgi_stdio.h	/^#define	pclose /;"	d
pclose	src/fastcgi/fcgi_stdio.h	/^#undef  pclose$/;"	d
perror	src/fastcgi/fcgi_stdio.h	/^#define	perror /;"	d
perror	src/fastcgi/fcgi_stdio.h	/^#undef  perror$/;"	d
pgHasKey	src/device_fingerprint/RecordCache.cpp	/^bool RecordCache::pgHasKey(const string& key, string &value)$/;"	f	class:RecordCache
pg_sql	src/common/PGDBConnectionPool.h	/^    PGconn *pg_sql;$/;"	m	class:PGSQLDB
pg_sqlpool_list	src/common/PGDBConnectionPool.h	/^    std::vector < PGSQLDB * >pg_sqlpool_list;$/;"	m	class:PGDBConnectionPool
pg_sqlpool_lock	src/common/PGDBConnectionPool.h	/^    pthread_mutex_t pg_sqlpool_lock;$/;"	m	class:PGDBConnectionPool
ping_sent	src/common/RedisClusterClient.h	/^    int ping_sent;          \/\/ Milliseconds unix time at which the currently active ping was sent, or zero if there are no pending pings$/;"	m	struct:NodeInfo
pong_recv	src/common/RedisClusterClient.h	/^    int pong_recv;          \/\/ Milliseconds unix time the last pong was received$/;"	m	struct:NodeInfo
pools_size	src/device_fingerprint/RecordCache.h	/^        int pools_size;$/;"	m	class:RecordCache
pop	src/common/Queue.h	/^	bool pop(T& retVal)$/;"	f	class:Queue
pop	src/common/Queue.h	/^	bool pop(T& retVal, int waitMs)$/;"	f	class:Queue
popen	src/fastcgi/fcgi_stdio.cpp	/^#define popen /;"	d	file:
popen	src/fastcgi/fcgi_stdio.h	/^#define popen /;"	d
popen	src/fastcgi/fcgi_stdio.h	/^#undef  popen$/;"	d
port	src/common/RedisClusterClient.h	/^    uint16_t port;          \/\/ The node port$/;"	m	struct:NodeInfo
pr	src/device_fingerprint/HTTPRequest.h	/^    int pr;\/\/协议版本$/;"	m	class:HTTPRequest
pragma	src/fastcgi/html_lib.cpp	/^void pragma(char *msg)$/;"	f
printLastError	src/common/CryptRSA.cpp	/^void CryptRSA::printLastError()$/;"	f	class:CryptRSA
print_reply	src/common/RedisClusterClient.cpp	/^static void print_reply(const char* command, const char* key, unsigned int slot, redisReply* redis_reply, int excepted_reply_type, const std::pair<std::string, uint16_t>& node)$/;"	f	file:
printf	src/fastcgi/fcgi_stdio.h	/^#define	printf /;"	d
printf	src/fastcgi/fcgi_stdio.h	/^#undef  printf$/;"	d
privKeyDecrypt	src/common/CryptRSA.cpp	/^int CryptRSA::privKeyDecrypt(unsigned char * enc_data,int data_len,unsigned char *decrypted){$/;"	f	class:CryptRSA
procPtr	src/fastcgi/os_unix.cpp	/^    OS_AsyncProc procPtr;	    \/* callout completion procedure *\/$/;"	m	struct:__anon15	file:
process	src/device_fingerprint/AppServer.cpp	/^void* AppServer::process(void* para)$/;"	f	class:AppServer
process	src/device_fingerprint/HTTPRequestHandler.cpp	/^int HTTPRequestHandler::process(FCGX_Request* request)$/;"	f	class:HTTPRequestHandler
processRequest	src/device_fingerprint/AppServer.cpp	/^int AppServer::processRequest(FCGX_Request* request)$/;"	f	class:AppServer
protocolStatus	src/fastcgi/fastcgi.h	/^    unsigned char protocolStatus;$/;"	m	struct:__anon8
publicEncrypt	src/common/CryptRSA.cpp	/^int CryptRSA::publicEncrypt(unsigned char * data,int data_len, unsigned char *encrypted){$/;"	f	class:CryptRSA
push	src/common/Queue.h	/^	bool push(T element)$/;"	f	class:Queue
push	src/common/Queue.h	/^	bool push(const T& element, int waitMs)$/;"	f	class:Queue
push_back	src/common/Json.cpp	/^void Array::push_back(const Value& v)$/;"	f	class:Array
push_back	src/t/Json.cpp	/^void Array::push_back(const Value& v)$/;"	f	class:Array
putc	src/fastcgi/fcgi_stdio.h	/^#define putc /;"	d
putc	src/fastcgi/fcgi_stdio.h	/^#undef  putc$/;"	d
putchar	src/fastcgi/fcgi_stdio.h	/^#define	putchar /;"	d
putchar	src/fastcgi/fcgi_stdio.h	/^#undef  putchar$/;"	d
puts	src/fastcgi/fcgi_stdio.h	/^#define	puts /;"	d
puts	src/fastcgi/fcgi_stdio.h	/^#undef  puts$/;"	d
query	src/common/PGDBConnectionPool.cpp	/^bool PGSQLDB::query (const char *buffer, RES_RESULT **result, bool need_read, unsigned repeattimes)$/;"	f	class:PGSQLDB
r3c_log_write	src/common/RedisClusterClient.cpp	/^static void r3c_log_write(const char* format, ...)$/;"	f	file:
rawWrite	src/fastcgi/fcgiapp.cpp	/^    int rawWrite;             \/* writer: write data without stream headers *\/$/;"	m	struct:FCGX_Stream_Data	file:
raw_lock	src/common/MutexLock.h	/^	pthread_mutex_t raw_lock() const$/;"	f	class:Lock
raw_lock	src/common/SDMutexLock.h	/^	pthread_mutex_t raw_lock() const$/;"	f	class:MutexLock
raw_lock_ptr	src/common/MutexLock.h	/^	pthread_mutex_t* raw_lock_ptr()$/;"	f	class:Lock
raw_lock_ptr	src/common/SDMutexLock.h	/^	pthread_mutex_t* raw_lock_ptr()$/;"	f	class:MutexLock
rcsid	src/fastcgi/fcgi_stdio.cpp	/^static const char rcsid[] = "$Id: fcgi_stdio.c,v 1.14 2001\/09\/01 01:09:30 robs Exp $";$/;"	v	file:
rcsid	src/fastcgi/fcgiapp.cpp	/^static const char rcsid[] = "$Id: fcgiapp.c,v 1.34 2001\/12\/12 22:54:10 robs Exp $";$/;"	v	file:
rcsid	src/fastcgi/os_unix.cpp	/^static const char rcsid[] = "$Id: os_unix.c,v 1.37 2002\/03\/05 19:14:49 robs Exp $";$/;"	v	file:
rdNext	src/fastcgi/fcgiapp.h	/^    unsigned char *rdNext;    \/* reader: first valid byte$/;"	m	struct:FCGX_Stream
readFdSet	src/fastcgi/os_unix.cpp	/^static fd_set readFdSet;$/;"	v	file:
readFdSetPost	src/fastcgi/os_unix.cpp	/^static fd_set readFdSetPost;$/;"	v	file:
readFile	src/common/CryptRSA.cpp	/^bool CryptRSA::readFile(){$/;"	f	class:CryptRSA
read_file	src/common/base64.cpp	/^void *read_file( char *fn, int *_sz)$/;"	f
reconnect	src/common/PGDBConnectionPool.cpp	/^bool PGSQLDB::reconnect ()$/;"	f	class:PGSQLDB
recordSize	src/device_fingerprint/RecordCache.cpp	/^int RecordCache::recordSize()$/;"	f	class:RecordCache
redisHasKey	src/device_fingerprint/RecordCache.cpp	/^bool RecordCache::redisHasKey(const string& key, string &value)$/;"	f	class:RecordCache
redis_clients	src/common/RedisSentinel.h	/^    std::vector<CRedisClient*> redis_clients;$/;"	m	class:RedisSentinel
redis_command	src/common/RedisClusterClient.cpp	/^const redisReply* CRedisClient::redis_command(int excepted_reply_type, std::pair<std::string, uint16_t>* which, const std::string* key, const char* command, const std::string& command_string) throw (CRedisException)$/;"	f	class:CRedisClient
redis_command	src/common/RedisClusterClient.cpp	/^const redisReply* CRedisClient::redis_command(int excepted_reply_type, std::pair<std::string, uint16_t>* which, const std::string* key, const char* command, const std::string& command_string, int argc, const char* argv[], const size_t* argv_len) throw (CRedisException)$/;"	f	class:CRedisClient
redis_command	src/common/RedisClusterClient.cpp	/^const redisReply* CRedisClient::redis_command(int excepted_reply_type, std::pair<std::string, uint16_t>* which, const std::string* key, const char* command, int argc, const char* argv[], const size_t* argv_len) throw (CRedisException)$/;"	f	class:CRedisClient
redis_command	src/common/RedisClusterClient.cpp	/^int64_t CRedisClient::redis_command(int excepted_reply_type, struct ParamInfo* param_info) throw (CRedisException)$/;"	f	class:CRedisClient
redis_context	src/common/RedisClusterClient.cpp	/^    redisContext* redis_context;$/;"	m	struct:SlotInfo	file:
redispool_list	src/common/RedisClass.h	/^    std::vector < CRedisClient * >redispool_list;$/;"	m	class:RedisConnectionPool
redispool_lock	src/common/RedisClass.h	/^    pthread_mutex_t redispool_lock;$/;"	m	class:RedisConnectionPool
release	src/common/PGDBConnectionPool.cpp	/^void RES_RESULT::release()$/;"	f	class:RES_RESULT
release_connect	src/common/RedisClass.cpp	/^void RedisConnectionPool::release_connect (CRedisClient * redis)$/;"	f	class:RedisConnectionPool
release_http_request	src/device_fingerprint/HTTPRequestPool.cpp	/^void HTTPRequestPool::release_http_request(HTTPRequest * http_request)$/;"	f	class:HTTPRequestPool
release_request_pool	src/device_fingerprint/HTTPRequestPool.cpp	/^void HTTPRequestPool::release_request_pool(std::vector<pair<HTTPRequest*,bool> >*http_request_pool)$/;"	f	class:HTTPRequestPool
release_sql	src/common/PGDBConnectionPool.cpp	/^void PGDBConnectionPool::release_sql (PGSQLDB * sql)$/;"	f	class:PGDBConnectionPool
render	src/device_fingerprint/HTTPRequestHandler.cpp	/^int HTTPRequestHandler::render(FCGX_Request* request, HTTPRequest* http_req)$/;"	f	class:HTTPRequestHandler
replace_all	src/common/Utility.cpp	/^int Utility::replace_all(std::string& str,  const std::string& pattern,  const std::string& newpat)$/;"	f	class:Utility
req	test/test.py	/^req=urllib2.Request(url=requrl,data=test_data_urlencode)$/;"	v
reqDataPtr	src/fastcgi/fcgiapp.cpp	/^    FCGX_Request *reqDataPtr; \/* request data not specific to one stream *\/$/;"	m	struct:FCGX_Stream_Data	file:
requestId	src/fastcgi/fcgiapp.h	/^    int requestId;            \/* valid if isBeginProcessed *\/$/;"	m	struct:FCGX_Request
requestIdB0	src/fastcgi/fastcgi.h	/^    unsigned char requestIdB0;$/;"	m	struct:__anon5
requestIdB1	src/fastcgi/fastcgi.h	/^    unsigned char requestIdB1;$/;"	m	struct:__anon5
request_stop	src/common/Thread.h	/^	void request_stop() { m_should_stop = true; }$/;"	f	class:Thread
requrl	test/test.py	/^requrl="http:\/\/10.20.22.11:8080\/appsvr\/cgi_device_fingerprint"$/;"	v
res	src/device_fingerprint/DevDevf.h	/^        string res;$/;"	m	class:DevDevf
res	src/device_fingerprint/DevGtmList.h	/^        string res;$/;"	m	class:DevGtmList
res	src/device_fingerprint/DevTimer.h	/^        string res;$/;"	m	class:DevTimer
res	src/device_fingerprint/DevUpList.h	/^        string res;$/;"	m	class:DevUpList
res	test/test.py	/^res=res_data.read()$/;"	v
res_data	test/test.py	/^res_data=urllib2.urlopen(req)$/;"	v
reserved	src/fastcgi/fastcgi.h	/^    unsigned char reserved;$/;"	m	struct:__anon5
reserved	src/fastcgi/fastcgi.h	/^    unsigned char reserved[3];$/;"	m	struct:__anon8
reserved	src/fastcgi/fastcgi.h	/^    unsigned char reserved[5];$/;"	m	struct:__anon6
reserved	src/fastcgi/fastcgi.h	/^    unsigned char reserved[7];$/;"	m	struct:__anon10
reset	src/common/Counter.h	/^	virtual void reset() $/;"	f	class:MutexCounter
reset	src/common/Counter.h	/^	virtual void reset()$/;"	f	class:Counter
reset_max	src/common/Counter.h	/^	virtual T reset_max() $/;"	f	class:Counter
reset_max	src/common/Counter.h	/^	virtual T reset_max() $/;"	f	class:MutexCounter
resolve	src/common/Utility.cpp	/^vector<string> Utility::resolve(string hostname)$/;"	f	class:Utility
retry_sleep	src/common/RedisClusterClient.cpp	/^void CRedisClient::retry_sleep() const$/;"	f	class:CRedisClient
rewind	src/fastcgi/fcgi_stdio.h	/^#define rewind /;"	d
rewind	src/fastcgi/fcgi_stdio.h	/^#undef  rewind$/;"	d
role	src/fastcgi/fcgiapp.h	/^    int role;$/;"	m	struct:FCGX_Request
roleB0	src/fastcgi/fastcgi.h	/^    unsigned char roleB0;$/;"	m	struct:__anon6
roleB1	src/fastcgi/fastcgi.h	/^    unsigned char roleB1;$/;"	m	struct:__anon6
rpop	src/common/RedisClusterClient.cpp	/^bool CRedisClient::rpop(const std::string& key, std::string* value, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
rpush	src/common/RedisClusterClient.cpp	/^int CRedisClient::rpush(const std::string& key, const std::string& value, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
rpush	src/common/RedisClusterClient.cpp	/^int CRedisClient::rpush(const std::string& key, const std::vector<std::string>& values, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
rpushx	src/common/RedisClusterClient.cpp	/^int CRedisClient::rpushx(const std::string& key, const std::string& value, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
run	src/device_fingerprint/AppServer.cpp	/^void AppServer::run(int thread_count)$/;"	f	class:AppServer
run	src/device_fingerprint/RecordCache.cpp	/^void RecordCache::run()$/;"	f	class:RecordCache
sadd	src/common/RedisClusterClient.cpp	/^int CRedisClient::sadd(const std::string& key, const std::string& value, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
sadd	src/common/RedisClusterClient.cpp	/^int CRedisClient::sadd(const std::string& key, const std::vector<std::string>& values, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
safe_rsa	src/common/CryptTask.cpp	/^CryptRSA* safe_rsa = NULL;$/;"	v
save	src/common/ConfigReader.cpp	/^bool ConfigWriter::save(const char * file_name)$/;"	f	class:ConfigWriter
scan	src/common/RedisClusterClient.cpp	/^int64_t CRedisClient::scan(int64_t cursor, const std::string& pattern, int count, std::vector<std::string>* values, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
scan	src/common/RedisClusterClient.cpp	/^int64_t CRedisClient::scan(int64_t cursor, const std::string& pattern, std::vector<std::string>* values, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
scan	src/common/RedisClusterClient.cpp	/^int64_t CRedisClient::scan(int64_t cursor, int count, std::vector<std::string>* values, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
scan	src/common/RedisClusterClient.cpp	/^int64_t CRedisClient::scan(int64_t cursor, std::vector<std::string>* values, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
scard	src/common/RedisClusterClient.cpp	/^int CRedisClient::scard(const std::string& key, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
sentinel2node	src/common/RedisSentinel.cpp	/^std::string RedisSentinel::sentinel2node(std::string sentinel_info, const int connet_timeout)$/;"	f	class:RedisSentinel
set	src/common/RedisClusterClient.cpp	/^bool CRedisClient::set(const std::string& key, const std::string& value, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
set	src/common/RedisSentinel.cpp	/^bool RedisSentinel::set(const std::string& key, const std::string& value, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:RedisSentinel
setValue	src/device_fingerprint/RecordCache.cpp	/^bool RecordCache::setValue(const std::string &key, const std::string &value)$/;"	f	class:RecordCache
set_active	src/common/Thread.h	/^	virtual void set_active()$/;"	f	class:Thread
set_activethread_counter	src/common/Thread.h	/^	void set_activethread_counter(Counter<int>* counter_p)$/;"	f	class:Thread
set_cookie	src/fastcgi/html_lib.cpp	/^void set_cookie(char *name, char *value, char *expires, char *path,$/;"	f
set_debug_log_write	src/common/RedisClusterClient.cpp	/^void set_debug_log_write(LOG_WRITE debug_log)$/;"	f
set_detachable	src/common/Thread.h	/^	void set_detachable(bool detachable) { m_detachable = detachable; }$/;"	f	class:Thread
set_error_log_write	src/common/RedisClusterClient.cpp	/^void set_error_log_write(LOG_WRITE info_log)$/;"	f
set_inactive	src/common/Thread.h	/^	virtual void set_inactive()$/;"	f	class:Thread
set_info_log_write	src/common/RedisClusterClient.cpp	/^void set_info_log_write(LOG_WRITE info_log)$/;"	f
set_int	src/common/ConfigReader.cpp	/^void ConfigWriter::set_int(const char * key, int value)$/;"	f	class:ConfigWriter
set_retry	src/common/RedisClusterClient.cpp	/^void CRedisClient::set_retry(int retry_times, int retry_sleep_milliseconds)$/;"	f	class:CRedisClient
set_size	src/common/PGDBConnectionPool.cpp	/^void PGDBConnectionPool::set_size (uint32_t size)$/;"	f	class:PGDBConnectionPool
set_size	src/common/RedisClass.cpp	/^void RedisConnectionPool::set_size(uint32_t size)$/;"	f	class:RedisConnectionPool
set_size	src/device_fingerprint/HTTPRequestHandler.cpp	/^void HTTPRequestHandler::set_size(int size)$/;"	f	class:HTTPRequestHandler
set_size	src/device_fingerprint/HTTPRequestPool.cpp	/^void HTTPRequestPool::set_size (uint32_t poolsize)$/;"	f	class:HTTPRequestPool
set_string	src/common/ConfigReader.cpp	/^void ConfigWriter::set_string(const char * key, const char * value)$/;"	f	class:ConfigWriter
setbuf	src/fastcgi/fcgi_stdio.h	/^#define	setbuf /;"	d
setbuf	src/fastcgi/fcgi_stdio.h	/^#undef  setbuf$/;"	d
setex	src/common/RedisClusterClient.cpp	/^void CRedisClient::setex(const std::string& key, const std::string& value, uint32_t seconds, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
setnx	src/common/RedisClusterClient.cpp	/^bool CRedisClient::setnx(const std::string& key, const std::string& value, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
setvbuf	src/fastcgi/fcgi_stdio.h	/^#define	setvbuf /;"	d
setvbuf	src/fastcgi/fcgi_stdio.h	/^#undef  setvbuf$/;"	d
should_stop	src/common/Thread.h	/^	bool should_stop() const { return m_should_stop; }$/;"	f	class:Thread
show_html_page	src/fastcgi/html_lib.cpp	/^void show_html_page(char *loc)$/;"	f
shutdownNow	src/fastcgi/os_unix.cpp	/^static int shutdownNow = FALSE;$/;"	v	file:
shutdownPending	src/fastcgi/os_unix.cpp	/^static int shutdownPending = FALSE;$/;"	v	file:
sigfunc	src/common/TimeoutWrapper.h	/^typedef void sigfunc(int sig);$/;"	t
sign_t	src/device_fingerprint/AppServer.cpp	/^void AppServer::sign_t(int sign)$/;"	f	class:AppServer
sismember	src/common/RedisClusterClient.cpp	/^bool CRedisClient::sismember(const std::string& key, const std::string& value, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
size	src/common/Json.cpp	/^size_t Array::size() const$/;"	f	class:Array
size	src/common/Json.cpp	/^size_t Value::size() const$/;"	f	class:Value
size	src/common/Json.hpp	/^            size_t size() const {return mValues.size();}$/;"	f	class:json::Object
size	src/t/Json.cpp	/^size_t Array::size() const$/;"	f	class:Array
size	src/t/Json.cpp	/^size_t Value::size() const$/;"	f	class:Value
size	src/t/Json.hpp	/^            size_t size() const {return mValues.size();}$/;"	f	class:json::Object
skip	src/fastcgi/fcgiapp.cpp	/^    int skip;                 \/* reader: don't deliver content bytes *\/$/;"	m	struct:FCGX_Stream_Data	file:
slot	src/common/RedisClusterClient.cpp	/^    int slot;$/;"	m	struct:SlotInfo	file:
slots	src/common/RedisClusterClient.h	/^    std::vector<std::pair<int, int> > slots; \/\/ A hash slot number or range$/;"	m	struct:NodeInfo
smembers	src/common/RedisClusterClient.cpp	/^int CRedisClient::smembers(const std::string& key, std::vector<std::string>* values, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
snprintf	src/common/Json.cpp	/^#define snprintf /;"	d	file:
snprintf	src/t/Json.cpp	/^#define snprintf /;"	d	file:
split	src/common/RedisClusterClient.cpp	/^int split(std::vector<std::string>* tokens, const std::string& source, const std::string& sep, bool skip_sep)$/;"	f
split	src/common/Utility.cpp	/^int Utility::split(const std::string& source, const char* delimitor, std::vector<std::string>& result_array)$/;"	f	class:Utility
spop	src/common/RedisClusterClient.cpp	/^bool CRedisClient::spop(const std::string& key, std::string* value, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
spop	src/common/RedisClusterClient.cpp	/^int CRedisClient::spop(const std::string& key, int count, std::vector<std::string>* values, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
srandmember	src/common/RedisClusterClient.cpp	/^int CRedisClient::srandmember(const std::string& key, int count, std::vector<std::string>* values, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
srem	src/common/RedisClusterClient.cpp	/^int CRedisClient::srem(const std::string& key, const std::string& value, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
srem	src/common/RedisClusterClient.cpp	/^int CRedisClient::srem(const std::string& key, const std::vector<std::string>& values, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
sscan	src/common/RedisClusterClient.cpp	/^int64_t CRedisClient::sscan(const std::string& key, int64_t cursor, const std::string& pattern, int count, std::vector<std::string>* values, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
sscan	src/common/RedisClusterClient.cpp	/^int64_t CRedisClient::sscan(const std::string& key, int64_t cursor, const std::string& pattern, std::vector<std::string>* values, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
sscan	src/common/RedisClusterClient.cpp	/^int64_t CRedisClient::sscan(const std::string& key, int64_t cursor, int count, std::vector<std::string>* values, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
sscan	src/common/RedisClusterClient.cpp	/^int64_t CRedisClient::sscan(const std::string& key, int64_t cursor, std::vector<std::string>* values, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
ssize_t	src/fastcgi/fcgi_config_x86.h	/^#undef ssize_t$/;"	d
start	src/common/Thread.cpp	/^bool Thread::start(bool force_restart)$/;"	f	class:Thread
status	src/device_fingerprint/HTTPRequest.h	/^    int status;\/\/200 or 500 表示服务状态$/;"	m	class:HTTPRequest
status	src/fastcgi/html_lib.cpp	/^void status(char *status)$/;"	f
stderr	src/fastcgi/fcgi_stdio.h	/^#define	stderr /;"	d
stderr	src/fastcgi/fcgi_stdio.h	/^#undef  stderr$/;"	d
stdin	src/fastcgi/fcgi_stdio.h	/^#define	stdin /;"	d
stdin	src/fastcgi/fcgi_stdio.h	/^#undef  stdin$/;"	d
stdio_stream	src/fastcgi/fcgi_stdio.h	/^    FILE *stdio_stream;$/;"	m	struct:__anon14
stdout	src/fastcgi/fcgi_stdio.h	/^#define	stdout /;"	d
stdout	src/fastcgi/fcgi_stdio.h	/^#undef  stdout$/;"	d
stop	src/fastcgi/fcgiapp.h	/^    unsigned char *stop;      \/* reader: last valid byte + 1$/;"	m	struct:FCGX_Stream
stopUnget	src/fastcgi/fcgiapp.h	/^    unsigned char *stopUnget; \/* reader: first byte of current buffer$/;"	m	struct:FCGX_Stream
store_sql	src/device_fingerprint/HTTPRequest.h	/^    std::string store_sql;$/;"	m	class:HTTPRequest
str	src/common/RedisClusterClient.cpp	/^std::string CRedisException::str() const throw ()$/;"	f	class:CRedisException
str	src/common/RedisClusterClient.h	/^    std::string str() const$/;"	f	struct:NodeInfo
str1	src/common/RedisClusterClient.cpp	/^    const std::string* str1;$/;"	m	struct:ParamInfo	file:
str2	src/common/RedisClusterClient.cpp	/^    const std::string* str2;$/;"	m	struct:ParamInfo	file:
str2hex	src/common/Utility.cpp	/^string Utility::str2hex(const char * buf,int size)$/;"	f	class:Utility
str3	src/common/RedisClusterClient.cpp	/^    const std::string* str3;$/;"	m	struct:ParamInfo	file:
str4	src/common/RedisClusterClient.cpp	/^    const std::string* str4;$/;"	m	struct:ParamInfo	file:
str5	src/common/RedisClusterClient.cpp	/^    const std::string* str5;$/;"	m	struct:ParamInfo	file:
str6	src/common/RedisClusterClient.cpp	/^    const std::string* str6;$/;"	m	struct:ParamInfo	file:
str7	src/common/RedisClusterClient.cpp	/^    const std::string* str7;$/;"	m	struct:ParamInfo	file:
str_dup	src/fastcgi/os_unix.cpp	/^static char * str_dup(const char * str)$/;"	f	file:
strnicmp	src/common/Utility.cpp	/^int Utility::strnicmp(const char *s1, const char *s2, size_t len)$/;"	f	class:Utility
syncDB	src/device_fingerprint/RecordCache.cpp	/^void *RecordCache::syncDB(void* data)$/;"	f	class:RecordCache
tag	src/common/RedisClusterClient.cpp	/^    const char* tag;$/;"	m	struct:ParamInfo	file:
tag_length	src/common/RedisClusterClient.cpp	/^    size_t tag_length;$/;"	m	struct:ParamInfo	file:
tasks	src/device_fingerprint/AppServer.h	/^        Queue<FCGX_Request*> *tasks;$/;"	m	class:AppServer
tb_account_card_bind	bin/create.sql	/^CREATE TABLE tb_account_card_bind ($/;"	t
tb_account_card_bind.aid	bin/create.sql	/^aid varchar(128) NOT NULL default '',$/;"	F
tb_account_card_bind.authn	bin/create.sql	/^authn varchar(128) NOT NULL default '',$/;"	F
tb_account_card_bind.autht	bin/create.sql	/^autht varchar(128) NOT NULL default '',$/;"	F
tb_account_card_bind.btimes	bin/create.sql	/^btimes varchar(128) default '',$/;"	F
tb_account_card_bind.cararr	bin/create.sql	/^cararr varchar(128) NOT NULL default '',$/;"	F
tb_account_card_bind.carno	bin/create.sql	/^carno varchar(128) NOT NULL default '',$/;"	F
tb_account_card_bind.cno	bin/create.sql	/^cno varchar(128) NOT NULL default '',$/;"	F
tb_account_card_bind.createtime	bin/create.sql	/^createtime timestamp  NOT NULL,$/;"	F
tb_account_card_bind.devf	bin/create.sql	/^devf varchar(128) NOT NULL default '',$/;"	F
tb_account_card_bind.eid	bin/create.sql	/^eid varchar(128) NOT NULL default '',$/;"	F
tb_account_card_bind.fname	bin/create.sql	/^fname varchar(128) NOT NULL default '',$/;"	F
tb_account_card_bind.gprs_city	bin/create.sql	/^gprs_city varchar(128) default '',$/;"	F
tb_account_card_bind.hfwd	bin/create.sql	/^hfwd varchar(128) default '',$/;"	F
tb_account_card_bind.hip	bin/create.sql	/^hip varchar(128) default '',$/;"	F
tb_account_card_bind.hvia	bin/create.sql	/^hvia varchar(128) default '',$/;"	F
tb_account_card_bind.id	bin/create.sql	/^id SERIAL,$/;"	F
tb_account_card_bind.pno	bin/create.sql	/^pno varchar(128) NOT NULL default '',$/;"	F
tb_account_card_bind.proc	bin/create.sql	/^proc int NOT NULL default '0',$/;"	F
tb_account_card_bind.tid	bin/create.sql	/^tid varchar(128) NOT NULL default '',$/;"	F
tb_account_card_bind_fb	bin/create.sql	/^CREATE TABLE tb_account_card_bind_fb ($/;"	t
tb_account_card_bind_fb.cno	bin/create.sql	/^cno varchar(128) NOT NULL default '',$/;"	F
tb_account_card_bind_fb.createtime	bin/create.sql	/^createtime timestamp  NOT NULL,$/;"	F
tb_account_card_bind_fb.eid	bin/create.sql	/^eid varchar(128) NOT NULL default '',$/;"	F
tb_account_card_bind_fb.id	bin/create.sql	/^id SERIAL,$/;"	F
tb_account_card_bind_fb.msg	bin/create.sql	/^msg varchar(256) NOT NULL default '',$/;"	F
tb_account_card_bind_fb.proc	bin/create.sql	/^proc int NOT NULL default '0',$/;"	F
tb_account_card_bind_fb.suc	bin/create.sql	/^suc varchar(16) NOT NULL default 'false',$/;"	F
tb_account_card_bind_fb.tid	bin/create.sql	/^tid varchar(128) NOT NULL default '',$/;"	F
tb_account_card_unbind	bin/create.sql	/^CREATE TABLE tb_account_card_unbind ($/;"	t
tb_account_card_unbind.aid	bin/create.sql	/^aid varchar(128) NOT NULL default '',$/;"	F
tb_account_card_unbind.authn	bin/create.sql	/^authn varchar(128) NOT NULL default '',$/;"	F
tb_account_card_unbind.autht	bin/create.sql	/^autht varchar(128) NOT NULL default '',$/;"	F
tb_account_card_unbind.btimes	bin/create.sql	/^btimes varchar(128) default '',$/;"	F
tb_account_card_unbind.carno	bin/create.sql	/^carno varchar(128) NOT NULL default '',$/;"	F
tb_account_card_unbind.cno	bin/create.sql	/^cno varchar(128) NOT NULL default '',$/;"	F
tb_account_card_unbind.createtime	bin/create.sql	/^createtime timestamp  NOT NULL,$/;"	F
tb_account_card_unbind.devf	bin/create.sql	/^devf varchar(128) NOT NULL default '',$/;"	F
tb_account_card_unbind.eid	bin/create.sql	/^eid varchar(128) NOT NULL default '',$/;"	F
tb_account_card_unbind.gprs_city	bin/create.sql	/^gprs_city varchar(128) default '',$/;"	F
tb_account_card_unbind.hfwd	bin/create.sql	/^hfwd varchar(128) default '',$/;"	F
tb_account_card_unbind.hip	bin/create.sql	/^hip varchar(128) default '',$/;"	F
tb_account_card_unbind.hvia	bin/create.sql	/^hvia varchar(128) default '',$/;"	F
tb_account_card_unbind.id	bin/create.sql	/^id SERIAL,$/;"	F
tb_account_card_unbind.proc	bin/create.sql	/^proc int NOT NULL default '0',$/;"	F
tb_account_card_unbind.tid	bin/create.sql	/^tid varchar(128) NOT NULL default '',$/;"	F
tb_account_card_unbind_fb	bin/create.sql	/^CREATE TABLE tb_account_card_unbind_fb ($/;"	t
tb_account_card_unbind_fb.carno	bin/create.sql	/^carno varchar(128) NOT NULL default '',$/;"	F
tb_account_card_unbind_fb.cno	bin/create.sql	/^cno varchar(128) NOT NULL default '',$/;"	F
tb_account_card_unbind_fb.createtime	bin/create.sql	/^createtime timestamp  NOT NULL,$/;"	F
tb_account_card_unbind_fb.eid	bin/create.sql	/^eid varchar(128) NOT NULL default '',$/;"	F
tb_account_card_unbind_fb.id	bin/create.sql	/^id SERIAL,$/;"	F
tb_account_card_unbind_fb.msg	bin/create.sql	/^msg varchar(256) NOT NULL default '',$/;"	F
tb_account_card_unbind_fb.proc	bin/create.sql	/^proc int NOT NULL default '0',$/;"	F
tb_account_card_unbind_fb.suc	bin/create.sql	/^suc varchar(16) NOT NULL default 'false',$/;"	F
tb_account_card_unbind_fb.tid	bin/create.sql	/^tid varchar(128) NOT NULL default '',$/;"	F
tb_account_login	bin/create.sql	/^CREATE TABLE tb_account_login ($/;"	t
tb_account_login.aid	bin/create.sql	/^aid varchar(128) NOT NULL default '',$/;"	F
tb_account_login.cap_time	bin/create.sql	/^cap_time int default -1,$/;"	F
tb_account_login.cap_times	bin/create.sql	/^cap_times int default -1,$/;"	F
tb_account_login.cdata	bin/create.sql	/^cdata json,$/;"	F
tb_account_login.cname	bin/create.sql	/^cname varchar(128) NOT NULL default '',$/;"	F
tb_account_login.cno	bin/create.sql	/^cno varchar(128) default '',$/;"	F
tb_account_login.cpwd	bin/create.sql	/^cpwd varchar(128) default '',$/;"	F
tb_account_login.createtime	bin/create.sql	/^createtime timestamp  NOT NULL,$/;"	F
tb_account_login.eid	bin/create.sql	/^eid varchar(128) NOT NULL default '',$/;"	F
tb_account_login.hfwd	bin/create.sql	/^hfwd varchar(128) default '',$/;"	F
tb_account_login.hip	bin/create.sql	/^hip varchar(128) default '',$/;"	F
tb_account_login.hvia	bin/create.sql	/^hvia varchar(128) default '',$/;"	F
tb_account_login.id	bin/create.sql	/^id SERIAL,$/;"	F
tb_account_login.otp_time	bin/create.sql	/^otp_time int default -1,$/;"	F
tb_account_login.otp_times	bin/create.sql	/^otp_times int default -1,$/;"	F
tb_account_login.pno	bin/create.sql	/^pno varchar(128) default '',$/;"	F
tb_account_login.proc	bin/create.sql	/^proc int NOT NULL default '0',$/;"	F
tb_account_login.tid	bin/create.sql	/^tid varchar(128) NOT NULL default '',$/;"	F
tb_account_login_fb	bin/create.sql	/^CREATE TABLE tb_account_login_fb ($/;"	t
tb_account_login_fb.authn	bin/create.sql	/^authn varchar(128) default '',$/;"	F
tb_account_login_fb.autht	bin/create.sql	/^autht varchar(128) default '',$/;"	F
tb_account_login_fb.cname	bin/create.sql	/^cname varchar(128) NOT NULL default '',$/;"	F
tb_account_login_fb.cno	bin/create.sql	/^cno varchar(128) default '',$/;"	F
tb_account_login_fb.createtime	bin/create.sql	/^createtime timestamp  NOT NULL,$/;"	F
tb_account_login_fb.eid	bin/create.sql	/^eid varchar(128) NOT NULL default '',$/;"	F
tb_account_login_fb.fname	bin/create.sql	/^fname varchar(128) default '',$/;"	F
tb_account_login_fb.id	bin/create.sql	/^id SERIAL,$/;"	F
tb_account_login_fb.msg	bin/create.sql	/^msg varchar(256)  default '',$/;"	F
tb_account_login_fb.proc	bin/create.sql	/^proc int NOT NULL default '0',$/;"	F
tb_account_login_fb.sex	bin/create.sql	/^sex smallint default 2,$/;"	F
tb_account_login_fb.suc	bin/create.sql	/^suc varchar(16) NOT NULL default 'false',$/;"	F
tb_account_login_fb.tid	bin/create.sql	/^tid varchar(128) NOT NULL default '',$/;"	F
tb_account_login_valid_fb	bin/create.sql	/^CREATE TABLE tb_account_login_valid_fb ($/;"	t
tb_account_login_valid_fb.cname	bin/create.sql	/^cname varchar(128) NOT NULL default '',$/;"	F
tb_account_login_valid_fb.cno	bin/create.sql	/^cno varchar(128) NOT NULL default '',$/;"	F
tb_account_login_valid_fb.createtime	bin/create.sql	/^createtime timestamp  NOT NULL,$/;"	F
tb_account_login_valid_fb.eid	bin/create.sql	/^eid varchar(128) NOT NULL default '',$/;"	F
tb_account_login_valid_fb.id	bin/create.sql	/^id SERIAL,$/;"	F
tb_account_login_valid_fb.msg	bin/create.sql	/^msg varchar(256) default '',$/;"	F
tb_account_login_valid_fb.proc	bin/create.sql	/^proc int NOT NULL default '0',$/;"	F
tb_account_login_valid_fb.suc	bin/create.sql	/^suc varchar(16) NOT NULL default 'false',$/;"	F
tb_account_login_valid_fb.tid	bin/create.sql	/^tid varchar(128) NOT NULL default '',$/;"	F
tb_account_pay	bin/create.sql	/^CREATE TABLE tb_account_pay ($/;"	t
tb_account_pay.abstract	bin/create.sql	/^abstract varchar(256) NOT NULL default '',$/;"	F
tb_account_pay.aid	bin/create.sql	/^aid varchar(128) NOT NULL default '',$/;"	F
tb_account_pay.amount	bin/create.sql	/^amount double precision NOT NULL default 0.0,$/;"	F
tb_account_pay.cdata	bin/create.sql	/^cdata json,$/;"	F
tb_account_pay.cno	bin/create.sql	/^cno varchar(128) NOT NULL default '',$/;"	F
tb_account_pay.commit_time	bin/create.sql	/^commit_time timestamp  NOT NULL,$/;"	F
tb_account_pay.createtime	bin/create.sql	/^createtime timestamp  NOT NULL,$/;"	F
tb_account_pay.currency	bin/create.sql	/^currency smallint default 1,$/;"	F
tb_account_pay.dbank	bin/create.sql	/^dbank varchar(128) NOT NULL default '',$/;"	F
tb_account_pay.dcarno	bin/create.sql	/^dcarno varchar(128) NOT NULL default '',$/;"	F
tb_account_pay.dname	bin/create.sql	/^dname varchar(128) NOT NULL default '',$/;"	F
tb_account_pay.eid	bin/create.sql	/^eid varchar(128) NOT NULL default '',$/;"	F
tb_account_pay.hfwd	bin/create.sql	/^hfwd varchar(128) default '',$/;"	F
tb_account_pay.hip	bin/create.sql	/^hip varchar(128) default '',$/;"	F
tb_account_pay.hvia	bin/create.sql	/^hvia varchar(128) default '',$/;"	F
tb_account_pay.id	bin/create.sql	/^id SERIAL,$/;"	F
tb_account_pay.msg	bin/create.sql	/^msg varchar(256) NOT NULL default '',$/;"	F
tb_account_pay.proc	bin/create.sql	/^proc int NOT NULL default '0',$/;"	F
tb_account_pay.remain	bin/create.sql	/^remain double precision NOT NULL default 0.0,$/;"	F
tb_account_pay.sbank	bin/create.sql	/^sbank varchar(128) NOT NULL default '',$/;"	F
tb_account_pay.scarno	bin/create.sql	/^scarno varchar(128) NOT NULL default '',$/;"	F
tb_account_pay.sname	bin/create.sql	/^sname varchar(128) NOT NULL default '',$/;"	F
tb_account_pay.tid	bin/create.sql	/^tid varchar(128) NOT NULL default '',$/;"	F
tb_account_pay_fb	bin/create.sql	/^CREATE TABLE tb_account_pay_fb ($/;"	t
tb_account_pay_fb.carno	bin/create.sql	/^carno varchar(128) NOT NULL default '',$/;"	F
tb_account_pay_fb.cno	bin/create.sql	/^cno varchar(128) NOT NULL default '',$/;"	F
tb_account_pay_fb.createtime	bin/create.sql	/^createtime timestamp  NOT NULL,$/;"	F
tb_account_pay_fb.eid	bin/create.sql	/^eid varchar(128) NOT NULL default '',$/;"	F
tb_account_pay_fb.id	bin/create.sql	/^id SERIAL,$/;"	F
tb_account_pay_fb.msg	bin/create.sql	/^msg varchar(256) NOT NULL default '',$/;"	F
tb_account_pay_fb.proc	bin/create.sql	/^proc int NOT NULL default '0',$/;"	F
tb_account_pay_fb.suc	bin/create.sql	/^suc varchar(16) NOT NULL default 'false',$/;"	F
tb_account_pay_fb.tid	bin/create.sql	/^tid varchar(128) NOT NULL default '',$/;"	F
tb_account_reg	bin/create.sql	/^CREATE TABLE tb_account_reg ($/;"	t
tb_account_reg.aid	bin/create.sql	/^aid varchar(128) NOT NULL default '',$/;"	F
tb_account_reg.cap_time	bin/create.sql	/^cap_time int default -1,$/;"	F
tb_account_reg.cap_times	bin/create.sql	/^cap_times int default -1,$/;"	F
tb_account_reg.carno	bin/create.sql	/^carno varchar(128) default '',$/;"	F
tb_account_reg.cdata	bin/create.sql	/^cdata json,$/;"	F
tb_account_reg.cname	bin/create.sql	/^cname varchar(128) NOT NULL default '',$/;"	F
tb_account_reg.cno	bin/create.sql	/^cno varchar(128) default '',$/;"	F
tb_account_reg.cpwd	bin/create.sql	/^cpwd varchar(128) default '',$/;"	F
tb_account_reg.createtime	bin/create.sql	/^createtime timestamp  NOT NULL,$/;"	F
tb_account_reg.eid	bin/create.sql	/^eid varchar(128) NOT NULL default '',$/;"	F
tb_account_reg.hfwd	bin/create.sql	/^hfwd varchar(128) default '',$/;"	F
tb_account_reg.hip	bin/create.sql	/^hip varchar(128) default '',$/;"	F
tb_account_reg.hvia	bin/create.sql	/^hvia varchar(128) default '',$/;"	F
tb_account_reg.id	bin/create.sql	/^id SERIAL,$/;"	F
tb_account_reg.otp_time	bin/create.sql	/^otp_time int default -1,$/;"	F
tb_account_reg.otp_times	bin/create.sql	/^otp_times int default -1,$/;"	F
tb_account_reg.pno	bin/create.sql	/^pno varchar(128) default '',$/;"	F
tb_account_reg.proc	bin/create.sql	/^proc int NOT NULL default '0',$/;"	F
tb_account_reg.referrer	bin/create.sql	/^referrer varchar(128) default '',$/;"	F
tb_account_reg.tid	bin/create.sql	/^tid varchar(128) NOT NULL default '',$/;"	F
tb_account_reg_fb	bin/create.sql	/^CREATE TABLE tb_account_reg_fb ($/;"	t
tb_account_reg_fb.authn	bin/create.sql	/^authn varchar(128) default '',$/;"	F
tb_account_reg_fb.autht	bin/create.sql	/^autht varchar(128) default '',$/;"	F
tb_account_reg_fb.cname	bin/create.sql	/^cname varchar(128) NOT NULL default '',$/;"	F
tb_account_reg_fb.cno	bin/create.sql	/^cno varchar(128) default '',$/;"	F
tb_account_reg_fb.createtime	bin/create.sql	/^createtime timestamp  NOT NULL,$/;"	F
tb_account_reg_fb.eid	bin/create.sql	/^eid varchar(128) NOT NULL default '',$/;"	F
tb_account_reg_fb.fname	bin/create.sql	/^fname varchar(128) default '',$/;"	F
tb_account_reg_fb.id	bin/create.sql	/^id SERIAL,$/;"	F
tb_account_reg_fb.msg	bin/create.sql	/^msg varchar(256) default '',$/;"	F
tb_account_reg_fb.pno	bin/create.sql	/^pno varchar(128) default '',$/;"	F
tb_account_reg_fb.proc	bin/create.sql	/^proc int NOT NULL default '0',$/;"	F
tb_account_reg_fb.sex	bin/create.sql	/^sex smallint default 2,$/;"	F
tb_account_reg_fb.suc	bin/create.sql	/^suc varchar(16) NOT NULL default 'false',$/;"	F
tb_account_reg_fb.tid	bin/create.sql	/^tid varchar(128) NOT NULL default '',$/;"	F
tb_account_reg_valid_fb	bin/create.sql	/^CREATE TABLE tb_account_reg_valid_fb ($/;"	t
tb_account_reg_valid_fb.cno	bin/create.sql	/^cno varchar(128) default '',$/;"	F
tb_account_reg_valid_fb.createtime	bin/create.sql	/^createtime timestamp  NOT NULL,$/;"	F
tb_account_reg_valid_fb.eid	bin/create.sql	/^eid varchar(128) NOT NULL default '',$/;"	F
tb_account_reg_valid_fb.id	bin/create.sql	/^id SERIAL,$/;"	F
tb_account_reg_valid_fb.msg	bin/create.sql	/^msg varchar(256) NOT NULL default '',$/;"	F
tb_account_reg_valid_fb.proc	bin/create.sql	/^proc int NOT NULL default '0',$/;"	F
tb_account_reg_valid_fb.suc	bin/create.sql	/^suc varchar(16) NOT NULL default 'false',$/;"	F
tb_account_reg_valid_fb.tid	bin/create.sql	/^tid varchar(128) NOT NULL default '',$/;"	F
tb_name	src/device_fingerprint/HTTPRequest.h	/^    std::string tb_name;$/;"	m	class:HTTPRequest
test_data_urlencode	test/test.py	/^test_data_urlencode=urllib.urlencode(test_data)$/;"	v
the_request	src/fastcgi/fcgiapp.cpp	/^static FCGX_Request the_request;$/;"	v	file:
threadProc	src/common/Thread.cpp	/^void* Thread::threadProc(void* param)$/;"	f	class:Thread
tid	src/device_fingerprint/HTTPRequest.h	/^    std::string tid;\/\/应用启动时生产，退出时结束$/;"	m	class:HTTPRequest
time_index	src/common/Utility.cpp	/^std::string Utility::time_index(uint32_t interval)$/;"	f	class:Utility
time_interval	src/common/Utility.cpp	/^long Utility::time_interval(struct timeval &start_time, struct timeval&end_time)$/;"	f	class:Utility
time_stamp	src/common/Utility.cpp	/^uint64_t Utility::time_stamp()$/;"	f	class:Utility
timeout_signal_handler	src/common/TimeoutWrapper.cpp	/^void timeout_signal_handler(int sig)$/;"	f
tmpfile	src/fastcgi/fcgi_stdio.h	/^#define tmpfile /;"	d
tmpfile	src/fastcgi/fcgi_stdio.h	/^#undef  tmpfile$/;"	d
tmx	src/common/dispatch.types.hpp	/^  namespace tmx {$/;"	n	namespace:dsn
to_string	src/common/dispatch.types.hpp	/^      string to_string()$/;"	f	struct:dsn::tmx::analyse_req
to_string	src/common/dispatch.types.hpp	/^      string to_string()$/;"	f	struct:dsn::tmx::analyse_resp
to_string	src/common/dispatch.types.hpp	/^      string to_string()$/;"	f	struct:dsn::tmx::decise_req
to_string	src/common/dispatch.types.hpp	/^      string to_string()$/;"	f	struct:dsn::tmx::decise_resp
to_string	src/common/dispatch.types.hpp	/^      string to_string()$/;"	f	struct:dsn::tmx::dispatch_req
to_string	src/common/dispatch.types.hpp	/^      string to_string()$/;"	f	struct:dsn::tmx::dispatch_resp
trim	src/common/ConfigReader.cpp	/^void ConfigReader::trim(string& s)$/;"	f	class:ConfigReader
try_lock	src/common/MutexLock.h	/^	int try_lock()$/;"	f	class:Lock
ttl	src/common/RedisClusterClient.cpp	/^int CRedisClient::ttl(const std::string& key, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
type	src/fastcgi/fastcgi.h	/^    unsigned char type;    $/;"	m	struct:__anon10
type	src/fastcgi/fastcgi.h	/^    unsigned char type;$/;"	m	struct:__anon5
type	src/fastcgi/fcgiapp.cpp	/^    int type;                 \/* reader: FCGI_PARAMS or FCGI_STDIN$/;"	m	struct:FCGX_Stream_Data	file:
unescape_url	src/fastcgi/fcgi_lib.cpp	/^void unescape_url(char *url)$/;"	f
ungetc	src/fastcgi/fcgi_stdio.h	/^#define ungetc /;"	d
ungetc	src/fastcgi/fcgi_stdio.h	/^#undef  ungetc$/;"	d
unixVariant	src/fastcgi/os_unix.cpp	/^    struct  sockaddr_un	unixVariant;$/;"	m	union:SockAddrUnion	typeref:struct:SockAddrUnion::sockaddr_un	file:
unlock	src/common/MutexLock.h	/^	int unlock()$/;"	f	class:Lock
unlock	src/common/SDMutexLock.h	/^	void unlock()$/;"	f	class:MutexLock
unmarshall	src/common/dispatch.types.hpp	/^    inline void unmarshall(::dsn::binary_reader& reader,  analyse_req& val)$/;"	f	namespace:dsn::tmx
unmarshall	src/common/dispatch.types.hpp	/^    inline void unmarshall(::dsn::binary_reader& reader,  analyse_resp& val)$/;"	f	namespace:dsn::tmx
unmarshall	src/common/dispatch.types.hpp	/^    inline void unmarshall(::dsn::binary_reader& reader,  decise_resp& val)$/;"	f	namespace:dsn::tmx
unmarshall	src/common/dispatch.types.hpp	/^    inline void unmarshall(::dsn::binary_reader& reader, decise_req& val)$/;"	f	namespace:dsn::tmx
unmarshall	src/common/dispatch.types.hpp	/^    inline void unmarshall(::dsn::binary_reader& reader, dispatch_req& val)$/;"	f	namespace:dsn::tmx
unzip	src/common/Utility.cpp	/^int Utility::unzip(unsigned char* src, int srcLen, unsigned char* des, int desLen)$/;"	f	class:Utility
urlParam	src/device_fingerprint/HTTPRequest.h	/^    std::map<std::string, std::string> urlParam;\/\/request params map$/;"	m	class:HTTPRequest
urllib	test/test.py	/^import urllib$/;"	i
urllib2	test/test.py	/^import urllib2$/;"	i
utf82gbk	src/common/Utility.cpp	/^string Utility::utf82gbk(const char* text)$/;"	f	class:Utility
utf8_decode	src/common/Utility.cpp	/^unsigned int Utility::utf8_decode( char *s, unsigned int *pi )$/;"	f	class:Utility
va_list_helper	src/common/RedisClusterClient.cpp	/^    va_list_helper(va_list& ap)$/;"	f	struct:va_list_helper
va_list_helper	src/common/RedisClusterClient.cpp	/^struct va_list_helper$/;"	s	file:
value	src/common/RedisClusterClient.cpp	/^    std::string* value;$/;"	m	struct:ParamInfo	file:
value	src/fastcgi/fcgi_lib.h	/^  char *value;$/;"	m	struct:__anon12
values	src/common/RedisClusterClient.cpp	/^    std::vector<std::string>* values;$/;"	m	struct:ParamInfo	file:
vec	src/fastcgi/fcgiapp.cpp	/^    FCGX_ParamArray vec;    \/* vector of strings *\/$/;"	m	struct:Params	file:
version	src/fastcgi/fastcgi.h	/^    unsigned char version;$/;"	m	struct:__anon5
vfprintf	src/fastcgi/fcgi_stdio.h	/^#define vfprintf /;"	d
vfprintf	src/fastcgi/fcgi_stdio.h	/^#undef  vfprintf$/;"	d
vprintf	src/fastcgi/fcgi_stdio.h	/^#define vprintf /;"	d
vprintf	src/fastcgi/fcgi_stdio.h	/^#undef  vprintf$/;"	d
wait_terminate	src/common/Thread.cpp	/^void Thread::wait_terminate()$/;"	f	class:Thread
wasFCloseCalled	src/fastcgi/fcgiapp.h	/^    int wasFCloseCalled;$/;"	m	struct:FCGX_Stream
webServerAddressList	src/fastcgi/fcgiapp.cpp	/^static char *webServerAddressList = NULL;$/;"	v	file:
what	src/common/Exception.h	/^	virtual const char* what() const throw() { return m_cause.c_str(); };$/;"	f	class:Exception
what	src/common/RedisClusterClient.cpp	/^const char* CRedisException::what() const throw()$/;"	f	class:CRedisException
which	src/common/RedisClusterClient.cpp	/^    std::pair<std::string, uint16_t>* which;$/;"	m	struct:ParamInfo	file:
withscores	src/common/RedisClusterClient.cpp	/^    const bool* withscores;$/;"	m	struct:ParamInfo	file:
work	src/device_fingerprint/AppServer.cpp	/^void AppServer::work(int thread_count)$/;"	f	class:AppServer
wrNext	src/fastcgi/fcgiapp.h	/^    unsigned char *wrNext;    \/* writer: first free byte$/;"	m	struct:FCGX_Stream
wrapperJsReturn	src/device_fingerprint/HTTPRequest.h	/^    json::Value wrapperJsReturn;$/;"	m	class:HTTPRequest
writeFdSet	src/fastcgi/os_unix.cpp	/^static fd_set writeFdSet;$/;"	v	file:
writeFdSetPost	src/fastcgi/os_unix.cpp	/^static fd_set writeFdSetPost;$/;"	v	file:
write_it_all	src/fastcgi/fcgiapp.cpp	/^static int write_it_all(int fd, char *buf, int len)$/;"	f	file:
x2c	src/fastcgi/fcgi_lib.cpp	/^char x2c(char *what)$/;"	f
zadd	src/common/RedisClusterClient.cpp	/^int CRedisClient::zadd(const std::string& key, const std::map<std::string, int64_t>& map, ZADDFLAG flag, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
zadd	src/common/RedisClusterClient.cpp	/^int CRedisClient::zadd(const std::string& key, const std::string& field, int64_t score, ZADDFLAG flag, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
zcard	src/common/RedisClusterClient.cpp	/^int64_t CRedisClient::zcard(const std::string& key, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
zcount	src/common/RedisClusterClient.cpp	/^int64_t CRedisClient::zcount(const std::string& key, int64_t min, int64_t max , std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
zincrby	src/common/RedisClusterClient.cpp	/^int64_t CRedisClient::zincrby(const std::string& key, const std::string& field, int64_t increment, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
zrange	src/common/RedisClusterClient.cpp	/^int CRedisClient::zrange(const std::string& key, int64_t start, int64_t end, bool withscores, std::vector<std::pair<std::string, int64_t> >* vec, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
zrangebyscore	src/common/RedisClusterClient.cpp	/^int CRedisClient::zrangebyscore(const std::string& key, int64_t min, int64_t max, bool withscores, std::vector<std::pair<std::string, int64_t> >* vec, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
zrangebyscore	src/common/RedisClusterClient.cpp	/^int CRedisClient::zrangebyscore(const std::string& key, int64_t min, int64_t max, int64_t offset, int64_t count, bool withscores, std::vector<std::pair<std::string, int64_t> >* vec, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
zrank	src/common/RedisClusterClient.cpp	/^int CRedisClient::zrank(const std::string& key, const std::string& field, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
zrem	src/common/RedisClusterClient.cpp	/^int CRedisClient::zrem(const std::string& key, const std::string& field, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
zrem	src/common/RedisClusterClient.cpp	/^int CRedisClient::zrem(const std::string& key, const std::vector<std::string>& fields, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
zrevrange	src/common/RedisClusterClient.cpp	/^int CRedisClient::zrevrange(const std::string& key, int64_t start, int64_t end, bool withscores, std::vector<std::pair<std::string, int64_t> >* vec, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
zrevrangebyscore	src/common/RedisClusterClient.cpp	/^int CRedisClient::zrevrangebyscore(const std::string& key, int64_t min, int64_t max, bool withscores, std::vector<std::pair<std::string, int64_t> >* vec, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
zrevrangebyscore	src/common/RedisClusterClient.cpp	/^int CRedisClient::zrevrangebyscore(const std::string& key, int64_t min, int64_t max, int64_t offset, int64_t count, bool withscores, std::vector<std::pair<std::string, int64_t> >* vec, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
zrevrank	src/common/RedisClusterClient.cpp	/^int CRedisClient::zrevrank(const std::string& key, const std::string& field, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
zscan	src/common/RedisClusterClient.cpp	/^int64_t CRedisClient::zscan(const std::string& key, int64_t cursor, const std::string& pattern, int count, std::vector<std::pair<std::string, int64_t> >* values, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
zscan	src/common/RedisClusterClient.cpp	/^int64_t CRedisClient::zscan(const std::string& key, int64_t cursor, const std::string& pattern, std::vector<std::pair<std::string, int64_t> >* values, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
zscan	src/common/RedisClusterClient.cpp	/^int64_t CRedisClient::zscan(const std::string& key, int64_t cursor, int count, std::vector<std::pair<std::string, int64_t> >* values, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
zscan	src/common/RedisClusterClient.cpp	/^int64_t CRedisClient::zscan(const std::string& key, int64_t cursor, std::vector<std::pair<std::string, int64_t> >* values, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
zscore	src/common/RedisClusterClient.cpp	/^int64_t CRedisClient::zscore(const std::string& key, const std::string& field, std::pair<std::string, uint16_t>* which) throw (CRedisException)$/;"	f	class:CRedisClient
~AppServer	src/device_fingerprint/AppServer.cpp	/^AppServer::~AppServer()$/;"	f	class:AppServer
~AutoLock	src/common/MutexLock.h	/^	~AutoLock()$/;"	f	class:AutoLock
~AutoLock	src/common/SDMutexLock.h	/^	~AutoLock()$/;"	f	class:AutoLock
~AutoRDLock	src/common/SDMutexLock.h	/^	~AutoRDLock()$/;"	f	class:AutoRDLock
~AutoSqlExecuter	src/common/AutoSqlExecuter.h	/^    ~AutoSqlExecuter()$/;"	f	class:AutoSqlExecuter
~AutoWRLock	src/common/SDMutexLock.h	/^	~AutoWRLock()$/;"	f	class:AutoWRLock
~CRedisClient	src/common/RedisClusterClient.cpp	/^CRedisClient::~CRedisClient()$/;"	f	class:CRedisClient
~CRedisException	src/common/RedisClusterClient.h	/^    virtual ~CRedisException() throw () {}$/;"	f	class:CRedisException
~ConfigReader	src/common/ConfigReader.cpp	/^ConfigReader::~ConfigReader()$/;"	f	class:ConfigReader
~ConfigWriter	src/common/ConfigReader.h	/^	~ConfigWriter() { }$/;"	f	class:ConfigWriter
~Counter	src/common/Counter.h	/^	virtual ~Counter() { }$/;"	f	class:Counter
~CryptAES	src/common/CryptAES.cpp	/^CryptAES::~CryptAES(){$/;"	f	class:CryptAES
~CryptRSA	src/common/CryptRSA.cpp	/^CryptRSA::~CryptRSA(){$/;"	f	class:CryptRSA
~DevDevf	src/device_fingerprint/DevDevf.cpp	/^DevDevf::~DevDevf()$/;"	f	class:DevDevf
~DevGtmList	src/device_fingerprint/DevGtmList.cpp	/^DevGtmList::~DevGtmList()$/;"	f	class:DevGtmList
~DevTimer	src/device_fingerprint/DevTimer.cpp	/^ DevTimer::~DevTimer()$/;"	f	class:DevTimer
~Exception	src/common/Exception.h	/^	virtual ~Exception() throw() {};$/;"	f	class:Exception
~FreeArgvHelper	src/common/RedisClusterClient.cpp	/^    ~FreeArgvHelper()$/;"	f	class:FreeArgvHelper
~HTTPRequest	src/device_fingerprint/HTTPRequest.cpp	/^HTTPRequest::~HTTPRequest()$/;"	f	class:HTTPRequest
~HTTPRequestHandler	src/device_fingerprint/HTTPRequestHandler.cpp	/^HTTPRequestHandler::~HTTPRequestHandler()$/;"	f	class:HTTPRequestHandler
~HTTPRequestPool	src/device_fingerprint/HTTPRequestPool.cpp	/^HTTPRequestPool::~HTTPRequestPool ()$/;"	f	class:HTTPRequestPool
~Lock	src/common/MutexLock.h	/^	~Lock()$/;"	f	class:Lock
~MutexCounter	src/common/Counter.h	/^	virtual ~MutexCounter() {}$/;"	f	class:MutexCounter
~MutexLock	src/common/SDMutexLock.h	/^	~MutexLock()$/;"	f	class:MutexLock
~PGDBConnectionPool	src/common/PGDBConnectionPool.cpp	/^PGDBConnectionPool::~PGDBConnectionPool ()$/;"	f	class:PGDBConnectionPool
~PGSQLDB	src/common/PGDBConnectionPool.cpp	/^PGSQLDB::~PGSQLDB ()$/;"	f	class:PGSQLDB
~Pool	src/device_fingerprint/Queue.h	/^    virtual ~Pool()$/;"	f	class:Pool
~Queue	src/common/Queue.h	/^	virtual ~Queue()$/;"	f	class:Queue
~RES_RESULT	src/common/PGDBConnectionPool.cpp	/^RES_RESULT::~RES_RESULT()$/;"	f	class:RES_RESULT
~RecordCache	src/device_fingerprint/RecordCache.cpp	/^RecordCache::~RecordCache()$/;"	f	class:RecordCache
~RedisConnectionPool	src/common/RedisClass.cpp	/^RedisConnectionPool::~RedisConnectionPool()$/;"	f	class:RedisConnectionPool
~RedisSentinel	src/common/RedisSentinel.h	/^    virtual ~RedisSentinel()$/;"	f	class:RedisSentinel
~Thread	src/common/Thread.cpp	/^Thread::~Thread()$/;"	f	class:Thread
~fcgi_istream	src/fastcgi/fcgio.h	/^    ~fcgi_istream(void) {}$/;"	f	class:fcgi_istream
~fcgi_ostream	src/fastcgi/fcgio.h	/^    ~fcgi_ostream(void) {}$/;"	f	class:fcgi_ostream
~va_list_helper	src/common/RedisClusterClient.cpp	/^    ~va_list_helper()$/;"	f	struct:va_list_helper
